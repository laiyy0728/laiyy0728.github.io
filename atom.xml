<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laiyy 的个人小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.laiyy.top/"/>
  <updated>2019-04-22T13:24:52.000Z</updated>
  <id>https://www.laiyy.top/</id>
  
  <author>
    <name>Laiyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ（1） Docker 启动 RabbitMQ</title>
    <link href="https://www.laiyy.top/rabbitmq/rabbitmq-1.html"/>
    <id>https://www.laiyy.top/rabbitmq/rabbitmq-1.html</id>
    <published>2019-04-22T13:24:52.000Z</published>
    <updated>2019-04-22T13:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>RabbitMQ</code>是实现了高级消息队列协议（<code>AMQP</code>）的开源消息代理软件（亦称面向消息的中间件）。<code>RabbitMQ</code>服务器是用Erlang语言编写的，而群集和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。</p><a id="more"></a><hr><h1 id="安装-Docker-CentOS-7"><a href="#安装-Docker-CentOS-7" class="headerlink" title="安装 Docker(CentOS 7)"></a>安装 Docker(CentOS 7)</h1><h2 id="删除旧版本-Docker"><a href="#删除旧版本-Docker" class="headerlink" title="删除旧版本 Docker"></a>删除旧版本 Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h2 id="安装-Docker-依赖包"><a href="#安装-Docker-依赖包" class="headerlink" title="安装 Docker 依赖包"></a>安装 Docker 依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure><h2 id="yum-添加-docker-缓存"><a href="#yum-添加-docker-缓存" class="headerlink" title="yum 添加 docker 缓存"></a>yum 添加 docker 缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum makecache fast</span><br><span class="line">$ yum install docker-ce</span><br></pre></td></tr></table></figure><h2 id="设置-docker-开机启动，并启动-docker"><a href="#设置-docker-开机启动，并启动-docker" class="headerlink" title="设置 docker 开机启动，并启动 docker"></a>设置 docker 开机启动，并启动 docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable docker</span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="测试-docker-是否安装成功-docker-run-hello-world"><a href="#测试-docker-是否安装成功-docker-run-hello-world" class="headerlink" title="测试 docker 是否安装成功 $ docker run hello-world"></a>测试 docker 是否安装成功 <code>$ docker run hello-world</code></h2><p>如果出现以下打印信息，则安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure></p><h2 id="设置国内-docker-镜像加速"><a href="#设置国内-docker-镜像加速" class="headerlink" title="设置国内 docker 镜像加速"></a>设置国内 docker 镜像加速</h2><p>打开 <code>/etc/docker/daemon.json</code> 文件，如果没有则创建该文件。向文件内添加如下信息：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启用镜像加速，并重启-docker"><a href="#启用镜像加速，并重启-docker" class="headerlink" title="启用镜像加速，并重启 docker"></a>启用镜像加速，并重启 docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><hr><h1 id="docker-安装-rabbitmq"><a href="#docker-安装-rabbitmq" class="headerlink" title="docker 安装 rabbitmq"></a>docker 安装 rabbitmq</h1><h2 id="拉取-docker-镜像（需要拉取含有管理控制台的镜像）"><a href="#拉取-docker-镜像（需要拉取含有管理控制台的镜像）" class="headerlink" title="拉取 docker 镜像（需要拉取含有管理控制台的镜像）"></a>拉取 docker 镜像（需要拉取含有管理控制台的镜像）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><p>如果出现如下打印，则拉取成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker pull rabbitmq:management</span><br><span class="line">management: Pulling from library/rabbitmq</span><br><span class="line">898c46f3b1a1: Pull complete </span><br><span class="line">63366dfa0a50: Pull complete </span><br><span class="line">041d4cd74a92: Pull complete </span><br><span class="line">6e1bee0f8701: Pull complete </span><br><span class="line">d258c5276992: Pull complete </span><br><span class="line">3edd5483d555: Pull complete </span><br><span class="line">32b61a4caa56: Pull complete </span><br><span class="line">3432dcdcfc27: Pull complete </span><br><span class="line">4a3b69c89c54: Pull complete </span><br><span class="line">85fb990e8d2d: Pull complete </span><br><span class="line">50d6dbbd3ebd: Pull complete </span><br><span class="line">d85e9dd09c17: Pull complete </span><br><span class="line">Digest: sha256:10c32cf7028e828da06fe8eb42d1ea9277a56525ae3edd62c48c0035ed64a0cd</span><br><span class="line">Status: Downloaded newer image for rabbitmq:management</span><br></pre></td></tr></table></figure></p><h2 id="使用默认配置，启动镜像"><a href="#使用默认配置，启动镜像" class="headerlink" title="使用默认配置，启动镜像"></a>使用默认配置，启动镜像</h2><p><code>docker run --name rabbitmq rabbitmq:management</code></p><p>参数解释：</p><blockquote><p>run 代表启动镜像<br>–name 给启动的镜像起个名字<br>rabbitmq:management 启动哪个镜像</p></blockquote><p>若出现如下打印，则启动成功：<br><img src="/images/rabbitmq/rabbitmq-docker-run.png" alt="rabbitmq docker run"><br><img src="/images/rabbitmq/rabbitmq-docker-run-1.png" alt="rabbitmq docker run"></p><h2 id="查看镜像文件-docker-ps-a"><a href="#查看镜像文件-docker-ps-a" class="headerlink" title="查看镜像文件 docker ps -a"></a>查看镜像文件 <code>docker ps -a</code></h2><p><img src="/images/rabbitmq/docker-ps-a.png" alt="docker ps -a"></p><p>此时是访问不了控制台的，原因是 rabbitmq 是在 docker 中启动的，没有映射 docker 到 linux 的端口</p><h2 id="通过镜像id，停止并删除刚才的镜像"><a href="#通过镜像id，停止并删除刚才的镜像" class="headerlink" title="通过镜像id，停止并删除刚才的镜像"></a>通过镜像id，停止并删除刚才的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop cdd3dadf7e5b</span><br><span class="line">docker rm cdd3dadf7e5b</span><br></pre></td></tr></table></figure><h2 id="映射端口，重新启动-docker"><a href="#映射端口，重新启动-docker" class="headerlink" title="映射端口，重新启动 docker"></a>映射端口，重新启动 docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 --name rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><p>其中： 5671、5672 4369 是 API 端口，15671、15672 是控制台端口。 15672 是浏览器访问控制台的端口。</p><h2 id="验证安装："><a href="#验证安装：" class="headerlink" title="验证安装："></a>验证安装：</h2><p>浏览器访问 docker 中的 rabbitmq： <a href="http://192.168.52.220:15672" target="_blank" rel="noopener">http://192.168.52.220:15672</a><br><img src="/images/rabbitmq/rabbitmq-dashboard.png" alt="rabiitmq dashboard"></p><p>默认<code>用户名、密码</code>为：<code>guest/guest</code></p><p><img src="/images/rabbitmq/rabbitmq-overview.png" alt="rabbitmq-overview"></p><hr><h1 id="rabbitmq-设置"><a href="#rabbitmq-设置" class="headerlink" title="rabbitmq 设置"></a>rabbitmq 设置</h1><h2 id="进入-Admin-选项卡，创建一个新用户"><a href="#进入-Admin-选项卡，创建一个新用户" class="headerlink" title="进入 Admin 选项卡，创建一个新用户"></a>进入 <code>Admin</code> 选项卡，创建一个新用户</h2><p><img src="/images/rabbitmq/create-user.png" alt="create-user"></p><h2 id="创建一个新的-vhosts"><a href="#创建一个新的-vhosts" class="headerlink" title="创建一个新的 vhosts"></a>创建一个新的 vhosts</h2><p>vhosts：virtual hosts 可以理解为“数据库”，以“/” 开头</p><p><img src="/images/rabbitmq/create-vhosts.png" alt="create-vhosts"></p><h2 id="授权用户访问-vhosts"><a href="#授权用户访问-vhosts" class="headerlink" title="授权用户访问 vhosts"></a>授权用户访问 vhosts</h2><p>点击刚创建的 vhosts 名称，进入 vhosts 管理页面，设置可以访问当前 vhosts 的用户<br><img src="/images/rabbitmq/set-user-vhosts.png" alt="set user vhosts"></p><h2 id="overview-选项卡"><a href="#overview-选项卡" class="headerlink" title="overview 选项卡"></a>overview 选项卡</h2><p><img src="/images/rabbitmq/overview.png" alt="overview"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;RabbitMQ&lt;/code&gt;是实现了高级消息队列协议（&lt;code&gt;AMQP&lt;/code&gt;）的开源消息代理软件（亦称面向消息的中间件）。&lt;code&gt;RabbitMQ&lt;/code&gt;服务器是用Erlang语言编写的，而群集和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。&lt;/p&gt;
    
    </summary>
    
      <category term="rabbitmq" scheme="https://www.laiyy.top/categories/rabbitmq/"/>
    
    
      <category term="RabbitMQ" scheme="https://www.laiyy.top/tags/RabbitMQ/"/>
    
      <category term="MQ" scheme="https://www.laiyy.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ（3） Rocket 集群</title>
    <link href="https://www.laiyy.top/rocketmq/rocketmq-3.html"/>
    <id>https://www.laiyy.top/rocketmq/rocketmq-3.html</id>
    <published>2019-04-21T11:29:16.000Z</published>
    <updated>2019-04-21T11:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>RocketMQ 集群模式分为四种：<code>单 master</code>、<code>多 master</code>、<code>多 master 多 slave 异步复制</code>、<code>多 master 多 slave 同步双写</code></p><a id="more"></a><h1 id="四种集群模式"><a href="#四种集群模式" class="headerlink" title="四种集群模式"></a>四种集群模式</h1><h2 id="单-master"><a href="#单-master" class="headerlink" title="单 master"></a>单 master</h2><p>风险较大，一旦 broker 宕机或者重启，将导致整个服务部可用。不建议线上环境使用</p><h2 id="多-master"><a href="#多-master" class="headerlink" title="多 master"></a>多 master</h2><p>一个集群全部都是 master，没有 slave</p><ul><li><p>优点<br>配置简单，单个 master 宕机，或者重启未付，对应用没有影响，在磁盘配置为 RAID10 时，即是机器宕机不可恢复的情况，消息也不会丢失（异步刷盘会丢失少量消息，同步刷盘不会丢失消息），性能最高</p></li><li><p>缺点<br>单个 broker 宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息的实时性会受到影响。</p></li></ul><h2 id="多-master-多-slave-异步复制"><a href="#多-master-多-slave-异步复制" class="headerlink" title="多 master 多 slave 异步复制"></a>多 master 多 slave 异步复制</h2><p>每个 master 配置一个 slave，有多对 master slave，HA 采用的是异步复制方式，主备有短暂的消息延迟（毫秒级），master 收到消息后立即向应用返回成功标志，同时向 slave 写入消息。</p><ul><li><p>优点<br>即是磁盘损坏，消息丢失的非常少，且消息的实时性不会受到影响。因为 master 宕机后，消费者仍然可以从 slave 消费，此过程对应用透明，不需要人工干预，性能同多个 master 模式一样</p></li><li><p>缺点<br>master 宕机，磁盘损坏下，会丢失少量消息</p></li></ul><h2 id="多-master-多-slave-同步双写"><a href="#多-master-多-slave-同步双写" class="headerlink" title="多 master 多 slave 同步双写"></a>多 master 多 slave 同步双写</h2><p>每个 master 配置一个 slave，有多对 master slave，HA 采用同步双写模式，主备都成功才会返回成功</p><ul><li><p>优点<br>数据与服务都无单点，master 宕机情况下，消息无延迟，服务可用性与数据可用性最高</p></li><li><p>缺点<br>性能比异步复制低 10% 左右，发送单个 master 的 RT 会略高，主机宕机后，slave 不能自动切换为主机（后续版本会支持）</p></li></ul><hr><h1 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h1><h2 id="修改-master-配置"><a href="#修改-master-配置" class="headerlink" title="修改 master 配置"></a>修改 master 配置</h2><p>进入 <code>conf/2m-2s-async</code>，修改文件：<code>broker-a-s.properties</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf broker-a-s.properties </span><br><span class="line">cp broker-a.properties  broker-a-s.properties</span><br></pre></td></tr></table></figure></p><p>然后打开 <code>broker-a-s.properties</code>，修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brokerId=1</span><br><span class="line">brokerRole=SLAVE</span><br></pre></td></tr></table></figure></p><p>修改两个配置文件的 nameserver 为两个服务器对应的 nameserver 地址，多个地址用英文分号分割</p><h2 id="修改-slave-配置"><a href="#修改-slave-配置" class="headerlink" title="修改 slave 配置"></a>修改 slave 配置</h2><p>将 master 的 <code>broker-a.properties</code>、<code>broker-a-s.properties</code> 同步过来，在 master 上执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp broker-a.properties 192.168.52.201:/usr/local/include/mq/rocketmq/conf/2m-2s-async/</span><br><span class="line">scp broker-a-s.properties 192.168.52.201:/usr/local/include/mq/rocketmq/conf/2m-2s-async/</span><br></pre></td></tr></table></figure></p><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><p>依次启动 master、slave 的 nameserver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure></p><p>在 master 上使用 <code>broker-a.properties</code> 启动 broker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-async/broker-a.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>在 slave 上使用 <code>broker-a-s.properties</code> 启动 broker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-async/broker-a-s.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h2 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h2><p>在 rocketmq-console 中，修改 nameserver 配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rocketmq.config.namesrvAddr=192.168.52.200:9876;192.168.52.201:9876</span><br></pre></td></tr></table></figure></p><p>启动 console，并查看集群属性<br><img src="/images/rocketmq/1-master-1-slave.png" alt="一主一从"></p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>当主节点挂掉后，消息将无法写入</p><hr><h1 id="双主双从"><a href="#双主双从" class="headerlink" title="双主双从"></a>双主双从</h1><p>双主双从，异步刷盘，同步复制（生产环境建议采用此方式）</p><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><p>准备4份 RocketMQ 环境，修改配置文件 <code>conf/2m-2s-sync/broker-a.properties</code>，将 <code>brokerRole</code> 改为：<code>SYNC_MASTER</code>,<code>flushDiskType</code> 改为 <code>ASYNC_FLUSH</code>，nameserver 为四台服务器的 nameserver 地址其他与之前 async 的配置一样</p><p>修改 <code>conf/2m-2s-sync/broker-a-s.0properties</code> 的 <code>brokerId</code> 为大于 0 的值，<code>brokerRole</code> 为 <code>SLAVE</code>，nameserver 为四台服务器的 nameserver 地址。</p><p>修改 <code>conf/2m-2s-sync/broker-b.0properties</code>、<code>conf/2m-2s-sync/broker-b-2.0properties</code>，与 a 的区别在与 <code>brokerName</code> 都为 broker-b</p><h2 id="启动集群-1"><a href="#启动集群-1" class="headerlink" title="启动集群"></a>启动集群</h2><p>每台机器都启动 nameserveer<br><code>nohup ./bin/mqnamesrv &amp;</code></p><p>在第一台机器上启动 broker-a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-sync/broker-a.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>在第二台机器上启动 broker-b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-sync/broker-b.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>在第三台机器上启动 broker-a-s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-sync/broker-a-s.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>在第四台机器上启动 broker-b-s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-sync/broker-b-s.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h2 id="验证集群-1"><a href="#验证集群-1" class="headerlink" title="验证集群"></a>验证集群</h2><p>修改 rocket-console 的配置：<code>rocketmq.config.namesrvAddr=192.168.52.200:9876;192.168.52.201:9876;192.168.52.202:9876;192.168.52.203:9876</code>，启动 console，打开 <code>集群选项卡</code>：<br><img src="/images/rocketmq/2-master-2-slave-sync.png" alt="双主双从-同步双写-异步刷盘"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RocketMQ 集群模式分为四种：&lt;code&gt;单 master&lt;/code&gt;、&lt;code&gt;多 master&lt;/code&gt;、&lt;code&gt;多 master 多 slave 异步复制&lt;/code&gt;、&lt;code&gt;多 master 多 slave 同步双写&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="rocketmq" scheme="https://www.laiyy.top/categories/rocketmq/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ（2）  顺序消息、事务消息</title>
    <link href="https://www.laiyy.top/rocketmq/rocketmq-2.html"/>
    <id>https://www.laiyy.top/rocketmq/rocketmq-2.html</id>
    <published>2019-04-21T09:29:47.000Z</published>
    <updated>2019-04-21T09:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>RocketMQ 顺序消息：消息有序是指可以按照消息发送顺序来消费。RocketMQ 可以严格的保证消息有序，但是这个顺序逼格不是全局顺序，只是分区(queue)顺序。要保证群居顺序，只能有一个分区。</p><a id="more"></a><h1 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h1><p>在 MQ 模型中，顺序要由三个阶段保证：</p><ul><li>消息被发送时，保持顺序</li><li>消息被存储时的顺序和发送的顺序一致</li><li>消息被消费时的顺序和存储的顺序一致</li></ul><p>发送时保持顺序，意味着对于有顺序要求的消息，用户应该在同一个线程中采用同步的方式发送。存储保持和发送的顺序一致，则要求在同一线程中被发送出来的消息 A/B，存储时 A 要在 B 之前。而消费保持和存储一致，则要求消息 A/B 到达 Consumer 之后必须按照先后顺序被处理。</p><p><img src="/images/rocketmq/order.png" alt="order"></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.laiyy.study.rocketmqprovider.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> laiyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/4/21 16:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQProducer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"demo-producer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、开启 producer</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连续发送 5 条信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt;= <span class="number">5</span>; index++) &#123;</span><br><span class="line">            <span class="comment">// 创建消息</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"TOPIC_DEMO"</span>, <span class="string">"TAG_A"</span>, <span class="string">"KEYS_!"</span>, (<span class="string">"HELLO！"</span> + index).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定 MessageQueue，顺序发送消息</span></span><br><span class="line">            <span class="comment">// 第一个参数：消息体</span></span><br><span class="line">            <span class="comment">// 第二个参数：选中指定的消息队列对象（会将所有的消息队列传进来，需要自己选择）</span></span><br><span class="line">            <span class="comment">// 第三个参数：选择对应的队列下标</span></span><br><span class="line">            SendResult result = producer.send(message, <span class="keyword">new</span> MessageQueueSelector() &#123;</span><br><span class="line">                <span class="comment">// 第一个参数：所有的消息队列对象</span></span><br><span class="line">                <span class="comment">// 第二个参数：消息体</span></span><br><span class="line">                <span class="comment">// 第三个参数：传入的消息队列下标</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; list, Message message, Object o)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 获取队列下标</span></span><br><span class="line">                    <span class="keyword">int</span> index = (<span class="keyword">int</span>) o;</span><br><span class="line">                    <span class="keyword">return</span> list.get(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">"发送第："</span> + index + <span class="string">" 条信息成功："</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭 producer</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">发送第：1 条信息成功：SendResult [sendStatus=SEND_OK, msgId=C0A800677E4C18B4AAC26ACE66560000, offsetMsgId=C0A834C800002A9F00000000000000B8, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=1]</span><br><span class="line">发送第：2 条信息成功：SendResult [sendStatus=SEND_OK, msgId=C0A800677E4C18B4AAC26ACE66630001, offsetMsgId=C0A834C800002A9F0000000000000171, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=2]</span><br><span class="line">发送第：3 条信息成功：SendResult [sendStatus=SEND_OK, msgId=C0A800677E4C18B4AAC26ACE66660002, offsetMsgId=C0A834C800002A9F000000000000022A, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=3]</span><br><span class="line">发送第：4 条信息成功：SendResult [sendStatus=SEND_OK, msgId=C0A800677E4C18B4AAC26ACE66690003, offsetMsgId=C0A834C800002A9F00000000000002E3, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=4]</span><br><span class="line">发送第：5 条信息成功：SendResult [sendStatus=SEND_OK, msgId=C0A800677E4C18B4AAC26ACE666C0004, offsetMsgId=C0A834C800002A9F000000000000039C, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=5]</span><br><span class="line">17:45:11.545 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10909] result: true</span><br><span class="line">17:45:11.548 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:9876] result: true</span><br><span class="line">17:45:11.549 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10911] result: true</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>可以看到，所有消息的  <code>queueId</code> 都为 0，顺序消息生产成功。</p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQPushConsumer</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"demo-consumer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置消息拉取最大数</span></span><br><span class="line">        consumer.setConsumeMessageBatchMaxSize(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、设置 subscribe</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TOPIC_DEMO"</span>, <span class="comment">// 要消费的主题</span></span><br><span class="line">                <span class="string">"*"</span> <span class="comment">// 过滤规则</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建消息监听</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerOrderly() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeOrderlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeOrderlyContext consumeOrderlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 5、获取消息信息</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : list) &#123;</span><br><span class="line">                    <span class="comment">// 获取主题</span></span><br><span class="line">                    String topic = msg.getTopic();</span><br><span class="line">                    <span class="comment">// 获取标签</span></span><br><span class="line">                    String tags = msg.getTags();</span><br><span class="line">                    <span class="comment">// 获取信息</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String result = <span class="keyword">new</span> String(msg.getBody(), RemotingHelper.DEFAULT_CHARSET);</span><br><span class="line">                        System.out.println(<span class="string">"Consumer 消费信息：topic："</span> + topic+ <span class="string">"，tags："</span> + tags + <span class="string">"，消息体："</span> + result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 6、返回消息读取状态</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动消费者</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺序消费者与之前的 demo 最大的不同，在于 <code>message listener</code> 从 <code>MessageListenerConcurrently</code> 变为 <code>MessageListenerOrderly</code>，消费标识从 <code>ConsumeConcurrentlyStatus</code> 变为 <code>ConsumeOrderlyStatus</code>。</p><p>查看控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！1</span><br><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！2</span><br><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！3</span><br><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！4</span><br><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！5</span><br></pre></td></tr></table></figure></p><hr><h1 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h1><p>在 RocketMQ 4.3 版本后，开放了事务消息。</p><h2 id="RocketMQ-事务消息流程"><a href="#RocketMQ-事务消息流程" class="headerlink" title="RocketMQ 事务消息流程"></a>RocketMQ 事务消息流程</h2><p>RocketMQ 的事务消息，只要是通过消息的异步处理，可以保证本地事务和消息发送同事成功执行或失败，从而保证数据的最终一致性。</p><p><img src="/images/rocketmq/transaction-message.png" alt="Transaction message"></p><p>MQ 事务消息解决分布式事务问题，但是第三方 MQ 支持事务消息的中间件不多，如 RockctMQ，它们支持事务的方式也是类似于采用二阶段提交，但是市面上一些主流的 MQ 都是不支持事务消息的，如：Kafka、RabbitMQ</p><p>以 RocketMQ 为例，事务消息实现思路大致为：</p><ul><li>第一阶段的 Prepared 消息，会拿到消息的地址</li><li>第二阶段执行本地事务</li><li>第三阶段通过第一阶段拿到的地址去访问消息，并修改状态</li></ul><p>也就是说，在业务方法内想要消息队列提交两次消息，一次发送消息和一次确认消息。如果确认消息发送失败，RocketMQ 会定期扫描消息集群中的事务消息。这时候发现了 prepared 消息，它会向消息发送者确认，所以生产方需要实现一个 check 接口。RocketMQ 会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。<br><img src="/images/rocketmq/transaction-message-1.png" alt="Transaction message"></p><p>事务消息的成功投递需要三个 Topic，分别是</p><ul><li>Half Topic：用于记录所有的 prepare 消息</li><li>Op Half Topic：记录以及提交了状态的 prepare 消息</li><li>Real Topic：事务消息真正的 topic，在 commit 后才会将消息写入该 topic，从而进行消息投递。</li></ul><h2 id="事务消息实现"><a href="#事务消息实现" class="headerlink" title="事务消息实现"></a>事务消息实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 TransactionMQProducer</span></span><br><span class="line">        TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">"transaction-producer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、指定消息监听对象，用于执行本地事务和消息回查</span></span><br><span class="line">        TransactionListenerImpl transactionListener = <span class="keyword">new</span> TransactionListenerImpl();</span><br><span class="line">        producer.setTransactionListener(transactionListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、线程池</span></span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">5</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">2000</span>), <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">                thread.setName(<span class="string">"client-transaction-msg-thread"</span>);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        producer.setExecutorService(executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、开启 producer</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、创建消息</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">"TRANSACTION_TOPIC"</span>, <span class="string">"TAG_A"</span>, <span class="string">"KEYS_!"</span>, <span class="string">"HELLO！TRANSACTION!"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、发送消息</span></span><br><span class="line">        TransactionSendResult result = producer.sendMessageInTransaction(message, <span class="string">"hello-transaction"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 producer</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务消息监听器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title">TransactionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储对应书屋的状态信息， key：事务id，value：事务执行的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentMap&lt;String, Integer&gt; maps = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行本地事务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事务id</span></span><br><span class="line">        String transactionId = message.getTransactionId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0：执行中，状态未知</span></span><br><span class="line">        <span class="comment">// 1：本地事务执行成功</span></span><br><span class="line">        <span class="comment">// 2：本地事务执行失败</span></span><br><span class="line"></span><br><span class="line">        maps.put(transactionId, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"正在执行本地事务。。。。"</span>);</span><br><span class="line">            <span class="comment">// 模拟本地事务</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">65</span>);</span><br><span class="line">            System.out.println(<span class="string">"本地事务执行成功。。。。"</span>);</span><br><span class="line">            maps.put(transactionId, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            maps.put(transactionId, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息回查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageExt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(MessageExt messageExt)</span> </span>&#123;</span><br><span class="line">        String transactionId = messageExt.getTransactionId();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"正在执行消息回查，事务id："</span> + transactionId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取事务id的执行状态</span></span><br><span class="line">        <span class="keyword">if</span> (maps.containsKey(transactionId)) &#123;</span><br><span class="line">            <span class="keyword">int</span> status = maps.get(transactionId);</span><br><span class="line">            System.out.println(<span class="string">"消息回查状态："</span> + status);</span><br><span class="line">            <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LocalTransactionState.UNKNOW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行生产者，查看控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">正在执行本地事务。。。。</span><br><span class="line">正在执行消息回查，事务id：C0A800678F0818B4AAC26AEDDEB10000</span><br><span class="line">消息回查状态：0</span><br><span class="line">本地事务执行成功。。。。</span><br></pre></td></tr></table></figure></p><p>需要注意：消息回查会隔一段时间执行一次，如果执行本地事务的时间太短，则控制台不会输出事务回查日志。</p><hr><h1 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h1><h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQProducer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"boardcast-producer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、开启 producer</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt;= <span class="number">10</span>; index++) &#123;</span><br><span class="line">            Message message = <span class="keyword">new</span> Message(<span class="string">"BOARD_CAST_TOPIC"</span>, <span class="string">"TAG_A"</span>, <span class="string">"KEYS_"</span> + index, (<span class="string">"HELLO！"</span> + index).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line">            SendResult result = producer.send(message);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 producer</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h2><p>消费者需要将消费模式修改为 广播消费：  consumer.setMessageModel(MessageModel.BROADCASTING);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQPushConsumer</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"boardcast-consumer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置消息拉取最大数</span></span><br><span class="line">        consumer.setConsumeMessageBatchMaxSize(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改消费模式，默认是集群消费模式，修改为广播消费模式</span></span><br><span class="line">        consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、设置 subscribe</span></span><br><span class="line">        consumer.subscribe(<span class="string">"BOARD_CAST_TOPIC"</span>, <span class="comment">// 要消费的主题</span></span><br><span class="line">                <span class="string">"*"</span> <span class="comment">// 过滤规则</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建消息监听</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 5、获取消息信息</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : list) &#123;</span><br><span class="line">                    <span class="comment">// 获取主题</span></span><br><span class="line">                    String topic = msg.getTopic();</span><br><span class="line">                    <span class="comment">// 获取标签</span></span><br><span class="line">                    String tags = msg.getTags();</span><br><span class="line">                    <span class="comment">// 获取信息</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String result = <span class="keyword">new</span> String(msg.getBody(), RemotingHelper.DEFAULT_CHARSET);</span><br><span class="line">                        System.out.println(<span class="string">"A  Consumer 消费信息：topic："</span> + topic+ <span class="string">"，tags："</span> + tags + <span class="string">"，消息体："</span> + result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 6、返回消息读取状态</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="生产者控制台输出"><a href="#生产者控制台输出" class="headerlink" title="生产者控制台输出"></a>生产者控制台输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965570000, offsetMsgId=C0A834C800002A9F00000000000026D0, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=1], queueOffset=0]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965660001, offsetMsgId=C0A834C800002A9F000000000000278F, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=2], queueOffset=10]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B29656C0002, offsetMsgId=C0A834C800002A9F000000000000284E, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=3], queueOffset=0]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965700003, offsetMsgId=C0A834C800002A9F000000000000290D, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=0], queueOffset=0]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B29657B0004, offsetMsgId=C0A834C800002A9F00000000000029CC, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=1], queueOffset=1]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965880005, offsetMsgId=C0A834C800002A9F0000000000002A8B, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=2], queueOffset=11]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B29658E0006, offsetMsgId=C0A834C800002A9F0000000000002B4A, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=3], queueOffset=1]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965960007, offsetMsgId=C0A834C800002A9F0000000000002C09, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=0], queueOffset=1]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B29659D0008, offsetMsgId=C0A834C800002A9F0000000000002CC8, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=1], queueOffset=2]</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067971418B4AAC26B2965AB0009, offsetMsgId=C0A834C800002A9F0000000000002D87, messageQueue=MessageQueue [topic=BOARD_CAST_TOPIC, brokerName=broker-a, queueId=2], queueOffset=12]</span><br><span class="line">19:24:35.135 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10911] result: true</span><br><span class="line">19:24:35.140 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:9876] result: true</span><br><span class="line">19:24:35.140 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10909] result: true</span><br></pre></td></tr></table></figure><h3 id="消费者控制台输出"><a href="#消费者控制台输出" class="headerlink" title="消费者控制台输出"></a>消费者控制台输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！1</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！2</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！5</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！4</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！3</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！7</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！6</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！8</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！9</span><br><span class="line">A  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！1</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！2</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！3</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！5</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！4</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！6</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！7</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！8</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！9</span><br><span class="line">B  Consumer 消费信息：topic：BOARD_CAST_TOPIC，tags：TAG_A，消息体：HELLO！10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RocketMQ 顺序消息：消息有序是指可以按照消息发送顺序来消费。RocketMQ 可以严格的保证消息有序，但是这个顺序逼格不是全局顺序，只是分区(queue)顺序。要保证群居顺序，只能有一个分区。&lt;/p&gt;
    
    </summary>
    
      <category term="rocketmq" scheme="https://www.laiyy.top/categories/rocketmq/"/>
    
    
      <category term="MQ" scheme="https://www.laiyy.top/tags/MQ/"/>
    
      <category term="RocketMQ" scheme="https://www.laiyy.top/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ（1） 环境搭建、基础运行</title>
    <link href="https://www.laiyy.top/rocketmq/rocketmq-1.html"/>
    <id>https://www.laiyy.top/rocketmq/rocketmq-1.html</id>
    <published>2019-04-21T08:44:07.000Z</published>
    <updated>2019-04-21T08:44:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>MQ 全称为 <code>Message Queue</code>，是一种应用程序程序对应用程序的通信方式，应用程序通过读写出入队列的消息来通信，而无需专用连接来连接它们。消息传递指的是程序之间通过在消息中发送数据来进行通信，而不是通过直接调用来通信，直接调用通常用于诸如远程过程调用的技术。</p><a id="more"></a><hr><h1 id="主流-MQ-对比"><a href="#主流-MQ-对比" class="headerlink" title="主流 MQ 对比"></a>主流 MQ 对比</h1><p>主流 MQ 有 Kafka、RocketMQ、RabbitMQ 等</p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka 是 Apache 的一个子项目，使用 Scala 实现的一个高性能分布式 publish/subscribe 消息队列系统，主要特点：</p><ul><li>快速持久化：通过磁盘顺序读写与零拷贝机制，可以在 O(1) 的系统开销下进行消息持久化</li><li>高吞吐：在一台普通的服务器上可以达到 10W/S 的吞吐量</li><li>高堆积：支持 Topic 下消费者长时间离线，消息堆积量大</li><li>完全的分布式系统，Broker、Producer、Consumer 都原生支持分布式，依赖 ZK 实现负载均衡</li><li>支持 Hadoop 数据并行加载；对于像 Hadoop 一样的日志数据和离线分析系统，但又要求实时处理的限制，是一个可行的解决方案</li></ul><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>前身是 Metaq，3.0 版本更名为 RocketMQ，alibaba 出品，现交 Apache 孵化。RocketMQ 是一款分布式、队列模型的消息中间件，特点：</p><ul><li>能够保证严格的消息顺序</li><li>提供丰富的消息拉取模式</li><li>高效的订阅者水平扩展能力</li><li>实时的消息订阅机制</li><li>支持事务消息</li><li>亿级消息堆积能力</li></ul><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>使用 Erlang 编写的一个开源的消息队列，本身支持：AMQP、XMPP、SMTP、STOMP 等协议，是一个重量级消息队列，更适合企业级开发。同时也实现的 broker 架构，生产者不会讲消息直接发送给队列，消息在发送给客户端时，现在中心队列排队。<br>对路由、负载均衡、数据持久化有很好的支持。</p><hr><h1 id="RocketMQ-单机环境搭建"><a href="#RocketMQ-单机环境搭建" class="headerlink" title="RocketMQ 单机环境搭建"></a>RocketMQ 单机环境搭建</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>JDK 版本：1.8+</li><li>RocketMQ：4.4.0</li><li>Maven：3.x</li><li>os：CentOS 6.5 x64</li></ul><h2 id="单机版环境搭建"><a href="#单机版环境搭建" class="headerlink" title="单机版环境搭建"></a>单机版环境搭建</h2><ol><li><p>解压 RocketMQ 4.4.0 到指定文件夹，并修改解压后的文件夹名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip rocketmq-all-4.4.0-bin-release.zip -d /usr/local/include/mq/</span><br><span class="line">cd /usr/local/include/mq/</span><br><span class="line">mv rocketmq-all-4.4.0-bin-release/ rocketmq</span><br></pre></td></tr></table></figure></li><li><p>创建日志、数据文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir logs store &amp;&amp; cd store</span><br><span class="line">mkdir commitlog consumequeue index</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>conf/2m-2s-async/broker-a.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 所属集群名称</span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line"># brijer 名称，不同的配置文件，名称不一样</span><br><span class="line">brokerName=broker-a</span><br><span class="line"># 0 表示 master，大于0表示 salve</span><br><span class="line">brokerId=0</span><br><span class="line"># nameServer 地址，分号分割</span><br><span class="line">namesrvAddr=192.168.52.200:9876</span><br><span class="line"># 在发送消息时，自动创建服务器不存在的 Topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"># 是否允许 Broker 自动创建 Topic，生产环境需关闭</span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"># 是否允许 Broker 自动创建订阅组，生产环境需关闭</span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"># Broker 对外服务的监听端口</span><br><span class="line">listenPort=10911</span><br><span class="line"># 删除文件的时间点，默认是凌晨4点</span><br><span class="line">deleteWhen=04</span><br><span class="line"># 文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime=48</span><br><span class="line"># commitLog 每个文件的大小，默认 1G</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line"># consumeQueue 每个文件默认存 30W 条，根据需求调整</span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line"># 检测屋里文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line"># 存储路径</span><br><span class="line">storePathRootDir=/usr/local/include/mq/rocketmq/store</span><br><span class="line"># commitLog 存储路径</span><br><span class="line">storePathCommitLog=/usr/local/include/mq/rocketmq/store/commitlog</span><br><span class="line"># 消息队列存储路径</span><br><span class="line">storePathConsumeQueue=/usr/local/include/mq/rocketmq/store/consumequeue</span><br><span class="line"># 消息索引存储路径</span><br><span class="line">storePathIndex=/usr/local/include/mq/rocketmq/store/index</span><br><span class="line"># checkpoint 文件存储路径</span><br><span class="line">storeCheckPoint=/usr/local/include/mq/rocketmq/store/checkpoint</span><br><span class="line"># abort 文件存储路径</span><br><span class="line">abortFile=/usr/local/include/mq/rocketmq/store/abort</span><br><span class="line"># 限制消息大小</span><br><span class="line">maxMessageSize=65535</span><br><span class="line"># broker 角色</span><br><span class="line"># 1、ASYNC_MASTER：异步复制的 Master</span><br><span class="line"># 2、SYNC_MASTER：同步双鞋 Master</span><br><span class="line"># 3、SLAVE：从</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line"># 刷盘方式</span><br><span class="line"># 1、ASYNC_FLUSH：异步刷盘</span><br><span class="line"># 2、SYNC_FLUSH：同步刷盘</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#checkTransactionMessageEnable=false</span><br><span class="line"></span><br><span class="line"># 发送消息的线程数量</span><br><span class="line"># sendMessageThreadPoolNums=128</span><br><span class="line"># 拉取消息线程池数量</span><br><span class="line"># pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>conf</code> 下所有的 xml 文件，将 xml 中的 <code>${user.home}</code> 修改为 rocketmq 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s#$&#123;user.home&#125;#/usr/local/include/mq/rocketmq#g&apos; *.xml</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>bin/runbroker.sh</code>、<code>bin/runserver.sh</code> 中的 JVM 参数<br><img src="/images/rocketmq/runbroker.sh.png" alt="runbroker.sh"><br><img src="/images/rocketmq/runserver.sh.png" alt="runserver.sh"></p></li><li><p>启动 broker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqnamesrv &amp;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>conf/2m-2s-async/broker-a.properties</code> 配置文件，启动 broker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sh ./bin/mqbroker -c /usr/local/include/mq/rocketmq/conf/2m-2s-async/broker-a.properties &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>使用 jps 查看启动结果<br><img src="/images/rocketmq/jps.png" alt="jps"></p></li></ol><h2 id="RocketMQ-控制台搭建"><a href="#RocketMQ-控制台搭建" class="headerlink" title="RocketMQ 控制台搭建"></a>RocketMQ 控制台搭建</h2><p>下载地址：<a href="https://github.com/apache/rocketmq-externals.git" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals.git</a> master 分支，拉取到本地，使用 IDE 打开，修改：<code>rocketmq-externals-master\rocketmq-console\src\main\resources\application.properties</code> 配置文件，指定 RocketMQ nameserver 地址(默认端口为 9876)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rocketmq.config.namesrvAddr=192.168.52.200:9876</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br><img src="/images/rocketmq/console.png" alt="rocketmq-console"></p><hr><h1 id="消息的生产、消费"><a href="#消息的生产、消费" class="headerlink" title="消息的生产、消费"></a>消息的生产、消费</h1><h2 id="一个简单的消息生产者"><a href="#一个简单的消息生产者" class="headerlink" title="一个简单的消息生产者"></a>一个简单的消息生产者</h2><p>使用 SpringBoot 搭建一个简单的消息生产者：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;rocketmq.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, UnsupportedEncodingException, RemotingException, InterruptedException, MQBrokerException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQProducer</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"demo-producer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、开启 producer</span></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建消息</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">"TOPIC_DEMO"</span>, <span class="string">"TAG_A"</span>, <span class="string">"KEYS_!"</span>, <span class="string">"HELLO！"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送消息</span></span><br><span class="line">        SendResult result = producer.send(message);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// 6、关闭 producer</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行验证控制台打印信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SendResult [sendStatus=SEND_OK, msgId=C0A80067617C18B4AAC26A932C790000, offsetMsgId=C0A834C800002A9F0000000000000000, messageQueue=MessageQueue [topic=TOPIC_DEMO, brokerName=broker-a, queueId=0], queueOffset=0]</span><br><span class="line">16:40:30.148 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10909] result: true</span><br><span class="line">16:40:30.152 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:9876] result: true</span><br><span class="line">16:40:30.152 [NettyClientSelector_1] INFO RocketmqRemoting - closeChannel: close the connection to remote address[192.168.52.200:10911] result: true</span><br></pre></td></tr></table></figure></p><p>查看 rocketmq-console 中 <code>消息</code> 选项卡，并选择主题为 <code>TOPIC_DEMO</code>：<br><img src="/images/rocketmq/message-topic-demo.png" alt="TOPIC_DEMO"></p><p>点击 <code>MESSAGE DETAIL</code> 查看消息具体内容：<br><img src="/images/rocketmq/message-detail.png" alt="message detail"></p><h2 id="一个简单的消息消费者"><a href="#一个简单的消息消费者" class="headerlink" title="一个简单的消息消费者"></a>一个简单的消息消费者</h2><p>依赖与生产者一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建 DefaultMQPushConsumer</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"demo-consumer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、设置 name server</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.52.200:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置消息拉取最大数</span></span><br><span class="line">        consumer.setConsumeMessageBatchMaxSize(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、设置 subscribe</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TOPIC_DEMO"</span>, <span class="comment">// 要消费的主题</span></span><br><span class="line">                <span class="string">"*"</span> <span class="comment">// 过滤规则</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建消息监听</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 5、获取消息信息</span></span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : list) &#123;</span><br><span class="line">                    <span class="comment">// 获取主题</span></span><br><span class="line">                    String topic = msg.getTopic();</span><br><span class="line">                    <span class="comment">// 获取标签</span></span><br><span class="line">                    String tags = msg.getTags();</span><br><span class="line">                    <span class="comment">// 获取信息</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String result = <span class="keyword">new</span> String(msg.getBody(), RemotingHelper.DEFAULT_CHARSET);</span><br><span class="line">                        System.out.println(<span class="string">"Consumer 消费信息：topic："</span> + topic+ <span class="string">"，tags："</span> + tags + <span class="string">"，消息体："</span> + result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 6、返回消息读取状态</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、启动消费者（启动后会阻塞）</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行消费者，查看控制台打印信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer 消费信息：topic：TOPIC_DEMO，tags：TAG_A，消息体：HELLO！</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MQ 全称为 &lt;code&gt;Message Queue&lt;/code&gt;，是一种应用程序程序对应用程序的通信方式，应用程序通过读写出入队列的消息来通信，而无需专用连接来连接它们。消息传递指的是程序之间通过在消息中发送数据来进行通信，而不是通过直接调用来通信，直接调用通常用于诸如远程过程调用的技术。&lt;/p&gt;
    
    </summary>
    
      <category term="rocketmq" scheme="https://www.laiyy.top/categories/rocketmq/"/>
    
    
      <category term="MQ" scheme="https://www.laiyy.top/tags/MQ/"/>
    
      <category term="RocketMQ" scheme="https://www.laiyy.top/tags/RocketMQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（34） --- APM(三) &lt;BR&gt; Pinpoint</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-34.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-34.html</id>
    <published>2019-04-17T08:38:55.000Z</published>
    <updated>2019-04-17T08:38:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Pinpoint</code> 是韩国人编写的 APM 系统，是一个分析大规模分布式系统的平台，并提供处理大量跟踪数据的解决方案。</p><a id="more"></a><h1 id="Pinpoint"><a href="#Pinpoint" class="headerlink" title="Pinpoint"></a>Pinpoint</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>分布式事务追踪，跟踪跨分布式应用的消息</li><li>自动检测应用拓展</li><li>水平扩展，以便支持大规模服务器集群</li><li>提供代码级了践行，便于定位失败点和瓶颈</li><li>提供字节码增强技术，添加新功能无需修改代码</li></ul><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>非侵入式：使用字节码增强技术，添加新功能无需修改代码</li><li>资源消耗小：对性能影响最小（资源使用量增加约3%）</li></ul><h2 id="架构模块"><a href="#架构模块" class="headerlink" title="架构模块"></a>架构模块</h2><ul><li>HBase：主要用于存储数据</li><li>Pinpoint Collector：部署在 Web 容器上</li><li>Pinpoint Web：部署在 Web 容器上</li><li>Pinpoint Agent：附加到用于分析的 Java 应用程序</li></ul><p>流程：首先通过 agent 收集调用应用的数据，将数据发送到 collector，collector 通过处理和分析数据，最后存储到 HBase 中，可以通过 Pinpoint Web UI 查看已经分析好的调用分析数据</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>Span：RPC 跟踪的基本单位，表示 RPC 到达时处理的工作，包含跟踪数据。Span 将子项标记未 SpanEvent，作为数据结构，每个 Span 包含一个 TraceId</li><li>Trace：一系列跨度，由相关的 RPC(Span) 组成。同一跟踪中的跨距共享相同的 TransactionId。Trace 通过 SpanIds 和 ParentSpanIds 排序为分层树结构</li><li>TraceId：由 TransactionId、SpanId、ParentSpanId 组成的秘钥集合。<code>TransactionId</code> 代表消息id，SpanId 和 ParentSpanId 表示 RPC 父子关系<blockquote><p>TransactionId：来自单个事务的分布式系统发送、接收的消息id，必须在整个服务器组是全局唯一的<br>SpanId：接收 RPC 消息时处理的作业 ID，是在 RPC 到达节点时生成的<br>ParentSpanId：生成 RPC 的父 span 的 spanId，如果节点是事务的起始点，不会有父跨度。</p></blockquote></li></ul><p><img src="/images/spring-cloud/apm/pinpoint.png" alt="pinpont 架构图"></p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><h3 id="JDK-兼容性"><a href="#JDK-兼容性" class="headerlink" title="JDK 兼容性"></a>JDK 兼容性</h3><table><thead><tr><th style="text-align:center">Pinpoint 版本</th><th style="text-align:center">Agent 需要的 JDK 版本</th><th style="text-align:center">Collector 需要的 JDK 版本</th><th style="text-align:center">Web 需要的 JDK 版本</th></tr></thead><tbody><tr><td style="text-align:center">1.0.x</td><td style="text-align:center">6-8</td><td style="text-align:center">6+</td><td style="text-align:center">6+</td></tr><tr><td style="text-align:center">1.1.x</td><td style="text-align:center">6-8</td><td style="text-align:center">7+</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">1.5.x</td><td style="text-align:center">6-8</td><td style="text-align:center">7+</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">1.6.x</td><td style="text-align:center">6-8</td><td style="text-align:center">7+</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">1.7.x</td><td style="text-align:center">6-8</td><td style="text-align:center">8+</td><td style="text-align:center">8+</td></tr><tr><td style="text-align:center">1.8.x</td><td style="text-align:center">6-8,9+</td><td style="text-align:center">8+</td><td style="text-align:center">8+</td></tr></tbody></table><h3 id="Base-兼容性"><a href="#Base-兼容性" class="headerlink" title="Base 兼容性"></a>Base 兼容性</h3><table><thead><tr><th style="text-align:center">Pinpoint 版本</th><th style="text-align:center">HBase 0.94.x</th><th style="text-align:center">HBase 0.98.x</th><th style="text-align:center">HBase 1.0.x</th><th style="text-align:center">HBase 1.1.x</th><th style="text-align:center">HBase 1.2.x</th></tr></thead><tbody><tr><td style="text-align:center">1.0.x</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">1.1.x</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td></tr><tr><td style="text-align:center">1.5.x</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td></tr><tr><td style="text-align:center">1.6.x</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.7.x</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.8.x</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td></tr></tbody></table><h3 id="Agent-Collector-兼容性"><a href="#Agent-Collector-兼容性" class="headerlink" title="Agent-Collector 兼容性"></a>Agent-Collector 兼容性</h3><table><thead><tr><th style="text-align:center">Agent 版本</th><th style="text-align:center">Collector 1.0.x</th><th style="text-align:center">Collector 1.1.x</th><th style="text-align:center">Collector 1.5.x</th><th style="text-align:center">Collector 1.6.x</th><th style="text-align:center">Collector 1.7.x</th><th style="text-align:center">Collector 1.8.x</th></tr></thead><tbody><tr><td style="text-align:center">1.0.x</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.1.x</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.5.x</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.6.x</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">not tested</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.7.x</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">1.8.x</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr></tbody></table><h3 id="Flink-兼容性"><a href="#Flink-兼容性" class="headerlink" title="Flink 兼容性"></a>Flink 兼容性</h3><table><thead><tr><th style="text-align:center">Pinpoint 版本</th><th style="text-align:center">flink 1.3.x</th><th style="text-align:center">flink 1.4.x</th></tr></thead><tbody><tr><td style="text-align:center">1.7.x</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr></tbody></table><hr><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>HBase 版本为 1.2.11，下载地址：<a href="http://mirrors.hust.edu.cn/apache/hbase/hbase-1.2.11/" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/hbase/hbase-1.2.11/</a><br>Pinpoint 版本为 1.7.3，下载地址：<a href="https://github.com/naver/pinpoint/releases/tag/1.7" target="_blank" rel="noopener">https://github.com/naver/pinpoint/releases/tag/1.7</a>.<br>Tomcat 版本为：8.x</p><p>其中，Pinpoint 需要下载 <code>agent</code>、<code>collector</code>、<code>web</code> 三个文件。</p><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><h3 id="启动-HBase"><a href="#启动-HBase" class="headerlink" title="启动 HBase"></a>启动 HBase</h3><p>解压 HBase，修改 <code>config/hbase-env.sh</code> 中 JAVA 目录<br><img src="/images/spring-cloud/apm/hbase-havahome.png" alt="HBase Java home"></p><p>修改后启动 HBase： <code>./bin/start-hbase.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">starting master, logging to /opt/hbase/bin/../logs/hbase-root-master-localhost.localdomain.out</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed in 8.0</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=128m; support was removed in 8.0</span><br></pre></td></tr></table></figure></p><p>稍等片刻后，<code>jps</code> 查看是否启动完成，若出现 <code>HMaster</code>，则启动完成：<br><img src="/images/spring-cloud/apm/hbase-setup.png" alt="hbase setup"></p><h3 id="加载-Pinpoint-HBase-脚本"><a href="#加载-Pinpoint-HBase-脚本" class="headerlink" title="加载 Pinpoint HBase 脚本"></a>加载 Pinpoint HBase 脚本</h3><p>在 <a href="https://github.com/naver/pinpoint/tree/master/hbase/scripts" target="_blank" rel="noopener">https://github.com/naver/pinpoint/tree/master/hbase/scripts</a> 中，获取 <code>hbase-create.hbase</code>、<code>hbase-drop.hbase</code> 文件，新建目录 <code>hbase-script</code>，执行脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hbase shell /root/hbase-script/hbase-create.hbase</span><br></pre></td></tr></table></figure></p><p><img src="/images/spring-cloud/apm/hbase-shell.png" alt="HBase Shell"></p><h2 id="Pinpoint-1"><a href="#Pinpoint-1" class="headerlink" title="Pinpoint"></a>Pinpoint</h2><h3 id="启动-Collector、Web"><a href="#启动-Collector、Web" class="headerlink" title="启动 Collector、Web"></a>启动 Collector、Web</h3><p>将 tomcat 解压为2个包，分别为 <code>collector</code>、<code>web</code>，删除 tomcat 目录下 webapps 下除 <code>ROOT</code> 的文件夹，并删除 <code>ROOT</code> 下所有文件。<br>将 collector、web 分别解压至对应 tomcat 的 ROOT 目录下，解压命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf pinpoint-collector-1.7.3.war</span><br></pre></td></tr></table></figure></p><p>分别修改两个 tomcat 的 <code>config/server.xml</code> 文件，修改端口 <code>8005</code>、<code>8080</code>、<code>8443</code>、<code>8009</code> 端口，然后分别启动两个 tomcat。启动成功后访问 zipkin：<a href="http://192.168.67.136:28080/#/main" target="_blank" rel="noopener">http://192.168.67.136:28080/#/main</a><br><img src="/images/spring-cloud/apm/zipkin-dashboard.png" alt="zipkin"></p><h2 id="配置-Agent"><a href="#配置-Agent" class="headerlink" title="配置 Agent"></a>配置 Agent</h2><p>创建四个文件夹：<code>eureka</code>、<code>provider</code>、<code>consumer</code>、<code>zuul</code>，并将四个服务移入对应文件夹，解压 agent.tar.gz，将解压后的文件放入四个文件夹：<br><img src="/images/spring-cloud/apm/pinpoint-agent.png" alt="pinpoint agent"></p><p>配置 agent 中的 <code>pinpoint.config</code> 文件，修改 <code>profiler.collector.ip</code> 设置为 <code>pinpoint-collector</code> 的地址，如果在同一个服务器上，不用修改。<br><img src="/images/spring-cloud/apm/pinpoint-collectorr-ip.png" alt="pinpoint collector ip"></p><p>可以看到在 <code>pinpoint.config</code> 中监听了 <code>9994</code>、<code>9995</code>、<code>9996</code> 端口，这三个端口在 collector 启动后就开启了，默认即可。如果 collector 需要修改端口，需要修改 <code>$COLLECTOR_TOMCAT_HOME/webapps/ROOT/WEB-INF/classes/pinpoint-collector.properties</code> 文件。</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>参数解释：<br><code>-Dpinpoint.agentId</code>：表示 agent 的唯一标识<br><code>-Dpinpoint.applicationName</code>：表示用用名称</p><p>eureka<br><code>java -javaagent:/usr/local/src/pinpoint/soft/eureka/pinpoint-agent-1.7.3/pinpoint-bootstrap-1.7.3.jar -Dpinpoint.agentId=eureka-server -Dpinpoint.applicationName=eureka-server -jar spring-cloud-eureka-server-simple-0.0.1-SNAPSHOT.jar</code></p><p>provider<br><code>java -javaagent:/usr/local/src/pinpoint/soft/eureka/pinpoint-agent-1.7.3/pinpoint-bootstrap-1.7.3.jar -Dpinpoint.agentId=provider -Dpinpoint.applicationName=provider -jar spring-cloud-apm-skywalking-provider-0.0.1-SNAPSHOT.jar</code></p><p>consumer<br><code>java -javaagent:/usr/local/src/pinpoint/soft/eureka/pinpoint-agent-1.7.3/pinpoint-bootstrap-1.7.3.jar -Dpinpoint.agentId=consumer -Dpinpoint.applicationName=consumer -jar spring-cloud-apm-skywlaking-consumer-0.0.1-SNAPSHOT.jar</code></p><p>zuul<br><code>java -javaagent:/usr/local/src/pinpoint/soft/eureka/pinpoint-agent-1.7.3/pinpoint-bootstrap-1.7.3.jar -Dpinpoint.agentId=zuul -Dpinpoint.applicationName=zuul -jar spring-cloud-apm-skywalking-zuul-0.0.1-SNAPSHOT.jar -Xms256m -Xmx256m</code></p><p>成功启动后，访问 pinpoint：<a href="http://192.168.67.136:28080/#/main" target="_blank" rel="noopener">http://192.168.67.136:28080/#/main</a><br><img src="/images/spring-cloud/apm/pinpoint-dashboard.png" alt="pinpoint dashboard"></p><p>通过 zuul 获取数据：<a href="http://192.168.67.136:9020/client/get-info" target="_blank" rel="noopener">http://192.168.67.136:9020/client/get-info</a><br><img src="/images/spring-cloud/apm/pinpoint-zuul.png" alt="pinpoint zuul"></p><p>再次查看 pinpoint，切换到 zuul 选项卡：<br><img src="/images/spring-cloud/apm/pinpoint-error.png" alt="pinpoint error"><br><img src="/images/spring-cloud/apm/pinpoint-error-1.png" alt="pinpoint error"><br>红色代表调用失败（第一次调用时需要从 eureka 获取数据，默认超时一秒）。数字代表调用次数</p><p><code>Inspector</code>：检查器，可以查看服务的调用信息。点击查看：<br><img src="/images/spring-cloud/apm/pinpoint-inspector.png" alt="inspector"></p><p>在 <code>Inspector</code> 中，Timeline 选项卡显示请求时间段，<code>information</code> 选项卡显示当前节点启动的信息，包括：应用名、<code>agentId</code>、启动时间等，<code>Heap Usage</code> 显示堆使用情况，<code>JVM/System Cpu Usage</code> 显示 CPU 使用情况，<code>Active Thread</code> 显示线程使用情况。<code>Response Time</code> 显示响应时间，<code>Data Source</code> 显示数据库使用情况</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Pinpoint&lt;/code&gt; 是韩国人编写的 APM 系统，是一个分析大规模分布式系统的平台，并提供处理大量跟踪数据的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="APM" scheme="https://www.laiyy.top/tags/APM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（33） --- APM(二) &lt;BR&gt; SkyWalking</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-33.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-33.html</id>
    <published>2019-04-12T08:59:07.000Z</published>
    <updated>2019-04-12T08:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>SkyWalking 是有个完整的 APM 系统，被用于追踪、监控、诊断分布式系统。</p><p>SkyWalking 整体由 4 个部分组成：<code>collector</code>、<code>agent</code>、<code>web</code>、<code>storage</code>。<br>应用级别的接入，可以使用 SDK 形式接入，也可以使用非侵入式的 <code>Agent</code> 形式接入。<code>agent</code> 将数据转化为 SkyWalking Trace 数据协议，通过 HTTP、gRPC 发送到 <code>collector</code>，<code>collector</code> 对收集到的数据进行分析、整合，最后存储到 es 或 H2 中，一般情况下，H2 用于测试。</p><a id="more"></a><h1 id="SkyWalking-特性"><a href="#SkyWalking-特性" class="headerlink" title="SkyWalking 特性"></a>SkyWalking 特性</h1><h2 id="SkyWalking-主要功能"><a href="#SkyWalking-主要功能" class="headerlink" title="SkyWalking 主要功能"></a>SkyWalking 主要功能</h2><ul><li>分布式只追踪、上下文传输</li><li>应用、实例、服务性能指标分析</li><li>根源分析</li><li>应用拓扑分析</li><li>应用于服务依赖分析</li><li>慢服务检测</li><li>性能优化</li></ul><h2 id="SkyWalking-主要特性"><a href="#SkyWalking-主要特性" class="headerlink" title="SkyWalking 主要特性"></a>SkyWalking 主要特性</h2><ul><li>多语言探针、类库<ol><li>Java 自动探针，追踪、监控程序时，无需修改源码</li><li>社区提供多语言探针：.NET、Node.js</li></ol></li><li>多种后端存储：Elasticsearch、H2 等<ol><li>支持 OpenTrancing：Java 自动探针和 OpenTracing API 协同工作</li></ol></li><li>轻量级、完善的后台聚合和分析功能</li><li>现代化 Web UI</li><li>日志集成</li><li>应用、实例、服务的告警</li><li>支持接受其他跟踪器数据格式<ol><li>Zipkin JSON、Thrift、Protobuf v1 和 v2 格式，由 OpenZipkin 库提供支持</li><li>Jaeger 采用 Zipkin Thrift 或 JSON v1/v2 格式</li></ol></li></ul><hr><h1 id="SkyWalking-测试用例代码"><a href="#SkyWalking-测试用例代码" class="headerlink" title="SkyWalking 测试用例代码"></a>SkyWalking 测试用例代码</h1><h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h2> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line">      <span class="string">spring-cloud-apm-skywalking-zuul</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9020</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-apm-skywlaking-consumer:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/client/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-apm-skywlaking-consumer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">  ConnectionTimeout:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  threadpool:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      coreSize:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">      maxQueueSize:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">      queueSizeRejectionThreshold:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">120001</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudApmSkywalkingZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudApmSkywalkingZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9021</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-apm-skywlaking-consumer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudApmSkywlakingConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudApmSkywlakingConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"spring-cloud-apm-skywalking-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkyWalkingFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get-send-info"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">getSendInfo</span><span class="params">(@RequestParam(<span class="string">"serviceName"</span>)</span> String serviceName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkyWalkingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SkyWalkingFeignService feignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkyWalkingController</span><span class="params">(SkyWalkingFeignService feignService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.feignService = feignService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get-info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignService.getSendInfo(<span class="string">"service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9022</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-apm-skywalking-provider</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudApmSkywalkingProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudApmSkywalkingProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get-send-info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSendInfo</span><span class="params">(@RequestParam(<span class="string">"serviceName"</span>)</span> String serviceName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serviceName + <span class="string">" --&gt; "</span> + <span class="string">"spring-cloud-apm-skywalking-provider"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="SkyWalking-安装"><a href="#SkyWalking-安装" class="headerlink" title="SkyWalking 安装"></a>SkyWalking 安装</h1><p>SkyWalking 依赖环境：</p><ul><li>被监控的应用运行在 JDK6+</li><li>SkyWalking collector 和 WebUI 运行在 JDK8+</li><li>elasticsearch 5.x（集群可能不能使用）</li></ul><h2 id="下载-elasticsearch-5-6-10-版本"><a href="#下载-elasticsearch-5-6-10-版本" class="headerlink" title="下载 elasticsearch_5.6.10 版本"></a>下载 elasticsearch_5.6.10 版本</h2><p><strong><em>注意：一定要用 5.x 的 elasticsearch，否则会出现版本问题！</em></strong></p><p>解压安装后，进入 <code>config/elasticsearch.yml</code> 文件，修改 <code>network.host</code> 为 <code>0.0.0.0</code>。elasticsearch 不允许 root 用户启动，建立新用户并赋权：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd es</span><br><span class="line">chown -R es:es /path/to/es</span><br></pre></td></tr></table></figure></p><p>切换到 es 用户，启用 es<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>控制台报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure></p><p>修改 <code>/etc/security/limits.conf</code>，增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 819200</span><br><span class="line">* hard nofile 819200</span><br></pre></td></tr></table></figure></p><p>修改 <code>/etc/sysctl.conf</code>，增加配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure></p><p>重新加载配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>后台启动 es： <code>./bin/elasticsearch -d</code></p><p>查看 es 日志：<code>tail -f logs/elasticsearch.log</code>，正常启动。</p><p>浏览器访问 elasticsearch，可见，默认的 cluster name 为 <code>elasticsearch</code>：<br><img src="/images/spring-cloud/apm/elasticsearch.png" alt="elasticsearch"></p><h2 id="SkyWalking-目录结构"><a href="#SkyWalking-目录结构" class="headerlink" title="SkyWalking 目录结构"></a>SkyWalking 目录结构</h2><p><img src="/images/spring-cloud/apm/skywalking-dir-tree.png" alt="SkyWalking 目录结构"></p><ul><li>agent：探针相关</li><li>bin：collectorService、webappService 启动脚本，其中 startup.* 是同事启动两个脚本的合并命令</li><li>config：Collector 的相关配置信息</li><li>log：collector、web 的日志文件</li><li>webapp：存放 SkyWalking 展示 UI 的 jar 和配置文件</li></ul><p>SkyWalking 的默认端口为：8080、10800、11800、12800 等，如果要修改端口，需要修改 config 目录下的 application.yml、webapp 下的 webapp.yml。</p><p>修改 <code>config/application.yml</code> 文件，clusterName 与 elasticsearch 的 cluster name 一致，其余采用默认设置。<br><img src="/images/spring-cloud/apm/application.yml.png" alt="application.yml"></p><h2 id="启动-SkyWalking"><a href="#启动-SkyWalking" class="headerlink" title="启动 SkyWalking"></a>启动 SkyWalking</h2><p>启动 SkyWalking：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/startup.sh</span><br></pre></td></tr></table></figure></p><p><img src="/images/spring-cloud/apm/startup-success.png" alt="启动 SkyWalking"></p><p>访问 SkyWalking：<br><img src="/images/spring-cloud/apm/skywalking-login-page.png" alt="访问 SkyWalking"></p><p>默认 用户名/密码 为：admin/admin</p><p><img src="/images/spring-cloud/apm/skywalking-dashboard.png" alt="SkyWalking Dashboard"></p><hr><h1 id="监控项目"><a href="#监控项目" class="headerlink" title="监控项目"></a>监控项目</h1><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>创建四个目录，分别对应：consumer、provider、zuul、eureka-server 四个应用，每个应用使用一个对应的 agent 进行启动，其中 agent 是 SkyWalking 的 agent 目录。</p><p>修改 <code>agent.config</code> 文件中 <code>agent.application_code</code>，这项配置代表应用。对应修改为 <code>consumer</code>、<code>provider</code>、<code>zuul</code>、<code>eureka</code>。将 eureka、zuul、consumer、provider 打包为 jar，上传到对应目录中。</p><h2 id="修改-es-内存配置"><a href="#修改-es-内存配置" class="headerlink" title="修改 es 内存配置"></a>修改 es 内存配置</h2><p>elasticsearch 默认 JVM 内存为 2g，如果虚拟机内存过小，无法启动。如果略大于 JVM 内存，启动后无法启动其他组件。所以需要修稿 elasticsearch 的默认 JVM 内存。修改 <code>$ES_HOME/config/jvm.options</code>:<br><img src="/images/spring-cloud/apm/es-jvm.png" alt="es jvm 参数"></p><p>修改后重启 es、SkyWalking</p><p>使用 <code>top</code> 命令查看使用内存最高的应用，使用 <code>free</code> 命令，查看内存总用量、剩余内存。<br><img src="/images/spring-cloud/apm/free-top.png" alt="free top 命令"></p><h2 id="依次启动四个应用"><a href="#依次启动四个应用" class="headerlink" title="依次启动四个应用"></a>依次启动四个应用</h2><p>启动时需要指定 JVM 内存，防止出现内存不够的情况。<br><code>-Xms</code> 指定最小内存，<code>-Xmx</code> 指定最大内存</p><p>eureka<br><code>java -javaagent:/usr/local/src/soft/eureka/agent/skywalking-agent.jar -jar /usr/local/src/soft/eureka/spring-cloud-eureka-server-simple-0.0.1-SNAPSHOT.jar -Xms256m -Xmx256m</code></p><p>provider<br><code>java -javaagent:/usr/local/src/soft/provider/agent/skywalking-agent.jar -jar /usr/local/src/soft/provider/spring-cloud-apm-skywalking-provider-0.0.1-SNAPSHOT.jar -Xms256m -Xmx256m</code></p><p>consumer<br><code>java -javaagent:/usr/local/src/soft/consumer/agent/skywalking-agent.jar -jar /usr/local/src/soft/consumer/spring-cloud-apm-skywalking-consumer-0.0.1-SNAPSHOT.jar -Xms256m -Xmx256m</code></p><p>zuul<br><code>java -javaagent:/usr/local/src/soft/zuul/agent/skywalking-agent.jar -jar /usr/local/src/soft/zuul/spring-cloud-apm-skywalking-zuul-0.0.1-SNAPSHOT.jar -Xms256m -Xmx256m</code></p><h2 id="确认启动成功"><a href="#确认启动成功" class="headerlink" title="确认启动成功"></a>确认启动成功</h2><p>使用 <code>jps</code> 命令查看启动进程：<br><img src="/images/spring-cloud/apm/jps.png" alt="jps"></p><p>查看剩余内存是否满足正常运行：<br><img src="/images/spring-cloud/apm/free.png" alt="free"></p><h2 id="验证-SkyWalking"><a href="#验证-SkyWalking" class="headerlink" title="验证 SkyWalking"></a>验证 SkyWalking</h2><p>启动成功后访问eureka： <a href="http://192.168.67.135:8761/" target="_blank" rel="noopener">http://192.168.67.135:8761/</a><br><img src="/images/spring-cloud/apm/eureka.png" alt="eureka"></p><p>访问 SkyWalking：<br><img src="/images/spring-cloud/apm/skywalking-dashboard-1.png" alt="SkyWalking"></p><p>可见 4 个 app 都启动成功了。使用 zuul 访问 consumer，调用 provider：<br><img src="/images/spring-cloud/apm/zuul.png" alt="zuul"></p><p>再次查看 SkyWalking：<br><img src="/images/spring-cloud/apm/skywalking-dashboard-2.png" alt="SkyWalking"></p><p>在 service 选项卡中可以看到每个 service 的具体调用情况<br><img src="/images/spring-cloud/apm/service.png" alt="service"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SkyWalking 是有个完整的 APM 系统，被用于追踪、监控、诊断分布式系统。&lt;/p&gt;
&lt;p&gt;SkyWalking 整体由 4 个部分组成：&lt;code&gt;collector&lt;/code&gt;、&lt;code&gt;agent&lt;/code&gt;、&lt;code&gt;web&lt;/code&gt;、&lt;code&gt;storage&lt;/code&gt;。&lt;br&gt;应用级别的接入，可以使用 SDK 形式接入，也可以使用非侵入式的 &lt;code&gt;Agent&lt;/code&gt; 形式接入。&lt;code&gt;agent&lt;/code&gt; 将数据转化为 SkyWalking Trace 数据协议，通过 HTTP、gRPC 发送到 &lt;code&gt;collector&lt;/code&gt;，&lt;code&gt;collector&lt;/code&gt; 对收集到的数据进行分析、整合，最后存储到 es 或 H2 中，一般情况下，H2 用于测试。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="APM" scheme="https://www.laiyy.top/tags/APM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（32） --- APM(一) &lt;BR&gt; Sleuth</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-32.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-32.html</id>
    <published>2019-04-10T13:19:14.000Z</published>
    <updated>2019-04-10T13:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在微服务架构下，服务按照不同的纬度进行拆分，一次请求可能会涉及到多个服务，并且有可能是由不同的团队开发，可能使用不同的编程语言实现，有可能部署在几百台、几千台服务器上，横跨多个不同的数据中心。因此，需要一些可以帮助理解系统行为、分析性能问题的工具，以便在发生故障时，快速定位、解决问题。此类工具称为 <code>APM</code></p><a id="more"></a><h1 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h1><p>最出名的 <code>APM</code> 是谷歌公开的论文中提到的 <code>Dapper</code>。Dapper 对分布式跟踪系统提出了如下需求：</p><ul><li>性能低损耗：分布式跟踪系统对服务的性能损耗应尽可能做到可以忽略不计，尤其是对性能敏感的应用不能产生损耗。</li><li>对应用透明：尽可能使用非侵入的方式实现跟踪，尽可能做到业务代码的低侵入，对业务开发人员做到透明化。</li><li>可伸缩性：是指不能随着微服务和集群规模的扩大而使用分布式跟踪系统瘫痪。</li><li>跟踪数据可视化、迅速反馈：要有可视化的监控界面，从跟踪数据收集、处理、到结果的展现，尽量做到快速，这样可以对系统的异常状况作出快速反应。</li><li>持续监控：要求分布式跟踪系统必须是 7X24 小时工作，否则很难定位到系统偶尔抖动的行为。</li></ul><p>在 APM 中的一些术语</p><ul><li>Span：基本工作单元。如：发送一次 RPC 请求，就是一个新的 Span。Span 通过一个 64 位的 ID 标识，还包含有描述、事件时间戳、标签、调用它的 Span 的 ID、处理器 ID（一般为 ip 地址）。注意：第一个 Span 是 root Span，它的 ID 和 Trace 的 ID 一样</li><li>Trace：一系列 Span 组成的树状结构，简单的说就是一次调用请求</li><li>Annotation：标注，用来描述事件的实时状态。有如下状态<blockquote><p>cs：Client Sent。客户端发起请求，表示一个 Span 开始<br>sr：Server Received。服务方接收到请求，并开始处理，其值减去 cs 时间，就是网络延迟时间<br>ss：Server Sent。表示请求处理完成，将响应数据返回给客户端。其值减去 sr 时间，就是服务方处理时间<br>cr：Client Received。客户端接收到服务方的返回值，是当前 Span 结束的信号。其值减去 cs，就是一次请求的完整处理时间。</p></blockquote></li></ul><hr><h1 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h1><p><code>Sleuth</code> 是 SpringCloud 的分布式跟踪系统，通过 Trace 定义一次业务调用链，根据它的信息，我们能知道有多少系统参与了该业务处理。而系统间的调用顺序、时间戳信息，通过 Span 记录。Trace 和 Span 整合，就能知道该业务的完整调用链。</p><h2 id="一个简单的-Sleuth"><a href="#一个简单的-Sleuth" class="headerlink" title="一个简单的 Sleuth"></a>一个简单的 Sleuth</h2><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-apm/spring-cloud-apm-sleuth" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-apm/spring-cloud-apm-sleuth</a></em></strong></p><h3 id="通用-pom"><a href="#通用-pom" class="headerlink" title="通用 pom"></a>通用 pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-apm-sleuth-provider</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudApmSleuthProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudApmSleuthProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SpringCloudApmSleuthProviderApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 接收到参数：&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, name);</span><br><span class="line">        String result = <span class="string">"你好啊~"</span> + name;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 返回值：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-apm-aleuth-consumer</span></span><br></pre></td></tr></table></figure><p><strong>Feign</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"spring-cloud-apm-sleuth-provider"</span>, url = <span class="string">"localhost:8082"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/say"</span>)</span><br><span class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>configuration</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumerConfiguration</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">executorService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TraceableExecutorService(<span class="keyword">this</span>.beanFactory, executorService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Controller</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ConsumerController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloService helloService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumerController</span><span class="params">(HelloService helloService, RestTemplate restTemplate, ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloService = helloService;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">        <span class="keyword">this</span>.executorService = executorService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello-feign"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloByFeign</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feign 调用，参数：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, name);</span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; feign 调用，结果：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello-rest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloByRest</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rest 调用，参数：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, name);</span><br><span class="line">        String url = <span class="string">"http://localhost:8082/say?name="</span> + name;</span><br><span class="line">        String result = restTemplate.getForObject(url, String.class);</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; rest 调用，结果：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello-thread"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloByThread</span><span class="params">(String name)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 线程 调用，参数：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, name);</span><br><span class="line">        String url = <span class="string">"http://localhost:8082/say?name="</span> + name;</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 进入线程，参数：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, name);</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">        &#125;);</span><br><span class="line">        String result = future.get();</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 线程 调用，结果：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>启动类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudApmSleuthConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudApmSleuthConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="Fegin-访问验证"><a href="#Fegin-访问验证" class="headerlink" title="Fegin 访问验证"></a>Fegin 访问验证</h3><p>请求 <a href="http://localhost:8081/hello-feign?name=张三" target="_blank" rel="noopener">http://localhost:8081/hello-feign?name=张三</a> ，Consumer 控制台打印信息如下：</p><p><img src="/images/spring-cloud/apm/sleuth-feign-consumer.png" alt="feign 调用 consumer 打印"></p><p>Privider 打印信息如下：<br><img src="/images/spring-cloud/apm/sleuth-feign-provider.png" alt="feign 调用 provider 打印"></p><h3 id="RestTemplate-验证"><a href="#RestTemplate-验证" class="headerlink" title="RestTemplate 验证"></a>RestTemplate 验证</h3><p>请求 <a href="http://localhost:8081/hello-rest?name=张三" target="_blank" rel="noopener">http://localhost:8081/hello-rest?name=张三</a> ，Consumer 控制台打印信息如下：</p><p><img src="/images/spring-cloud/apm/sleuth-rest-consumer.png" alt="rest 调用 consumer 打印"></p><p>Privider 打印信息如下：<br><img src="/images/spring-cloud/apm/sleuth-rest-provider.png" alt="rest 调用 provider 打印"></p><h3 id="线程验证"><a href="#线程验证" class="headerlink" title="线程验证"></a>线程验证</h3><p>请求 <a href="http://localhost:8081/hello-thread?name=张三" target="_blank" rel="noopener">http://localhost:8081/hello-thread?name=张三</a> ，Consumer 控制台打印信息如下：</p><p><img src="/images/spring-cloud/apm/sleuth-thread-consumer.png" alt="thread 调用 consumer 打印"></p><p>Privider 打印信息如下：<br><img src="/images/spring-cloud/apm/sleuth-thread-provider.png" alt="thread 调用 provider 打印"></p><hr><h1 id="Sleuth-拦截器、链路"><a href="#Sleuth-拦截器、链路" class="headerlink" title="Sleuth 拦截器、链路"></a>Sleuth 拦截器、链路</h1><h2 id="TraceFilter"><a href="#TraceFilter" class="headerlink" title="TraceFilter"></a>TraceFilter</h2><p>Sleuth 通过 TraceFilter 获取 Span 信息。需要注意：如果需要对 Span 信息做自定义修改，需要实现自己的 Filter。<br>实现的 Filter 优先级需要比 TraceFilter 优先级低，否则无法拿到 TraceFilter 处理后的信息。</p><p><strong>Consumer</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(TraceWebServletAutoConfiguration.TRACING_FILTER_ORDER + <span class="number">1</span>) <span class="comment">// 优先级低</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern pattern = Pattern.compile(SleuthWebProperties.DEFAULT_SKIP_PATTERN);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> HttpServletRequest) || !(response <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"只支持 Http 请求"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="keyword">boolean</span> matches = pattern.matcher(httpServletRequest.getRequestURI()).matches();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!matches)&#123;</span><br><span class="line">            <span class="comment">// 向链路传入 SessionId，在 Provider 中获取</span></span><br><span class="line">            ExtraFieldPropagation.set(<span class="string">"SessionId"</span>, httpServletRequest.getSession().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Provider</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好啊！"</span> + name + <span class="string">", 你的 session id 是："</span> + ExtraFieldPropagation.get(<span class="string">"SessionId"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Baggage"><a href="#Baggage" class="headerlink" title="Baggage"></a>Baggage</h2><p>Baggage 是存储在 Span 上下文中的一组 K/V 键值对，和 traceId、spanId 不同，baggage 不是必选项。<br>通过 Baggage 可以把一些信息像行李一样，挂在 sleuth 中，由 Sleuth 帮助沿着调用一直向下传递。<br>Baggage 相当于 Sleuth 暴露的一个功能接口，通过它，可以让数据跟着 Sleuth 一直往后接连传递，典型场景是登录信息的传递。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    baggage-keys:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SessionId</span> <span class="comment"># 配置 Baggage 需要传递的参数名称，需要在传递端，接收端都配置。传递端不配置，不能向后传递；接收端不配置，获取不到数据。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微服务架构下，服务按照不同的纬度进行拆分，一次请求可能会涉及到多个服务，并且有可能是由不同的团队开发，可能使用不同的编程语言实现，有可能部署在几百台、几千台服务器上，横跨多个不同的数据中心。因此，需要一些可以帮助理解系统行为、分析性能问题的工具，以便在发生故障时，快速定位、解决问题。此类工具称为 &lt;code&gt;APM&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="APM" scheme="https://www.laiyy.top/tags/APM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（31） --- Spring Cloud Config(五) &lt;BR&gt; 高可用</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-31.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-31.html</id>
    <published>2019-03-07T02:29:50.000Z</published>
    <updated>2019-03-07T02:29:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于线上的生产环境，通常对其都是有很高的要求，其中，高可用是不可或缺的一部分。必须保证服务是可用的，才能保证系统更好的运行，这是业务稳定的保证。<br>高可用一般分为两种：<code>客户端高可用</code>、<code>服务端高可用</code></p><a id="more"></a><h1 id="客户端高可用"><a href="#客户端高可用" class="headerlink" title="客户端高可用"></a>客户端高可用</h1><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-ha/spring-cloud-config-ha-client" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-ha/spring-cloud-config-ha-client</a></em></strong></p><p><code>客户端高可用</code> 主要解决当前服务端不可用哪个的情况下，客户端依然可用正常启动。从客户端触发，不是增加配置中心的高可用性，而是降低客户端对配置中心的依赖程度，从而提高整个分布式架构的健壮性。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="配置的自动装配"><a href="#配置的自动装配" class="headerlink" title="配置的自动装配"></a>配置的自动装配</h3><p><strong>pom.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>配置文件解析</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = ConfigSupportProperties.CONFIG_PREFIX)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigSupportProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载的配置文件前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG_PREFIX = <span class="string">"spring.cloud.config.backup"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DEFAULT_FILE_NAME = <span class="string">"fallback.properties"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地文件地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fallbackLocation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFallbackLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fallbackLocation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFallbackLocation</span><span class="params">(String fallbackLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!fallbackLocation.contains(<span class="string">"."</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果只指定了文件路径，自动拼接文件名</span></span><br><span class="line">            fallbackLocation = fallbackLocation.endsWith(File.separator) ? fallbackLocation : fallbackLocation + File.separator;</span><br><span class="line">            fallbackLocation += DEFAULT_FILE_NAME;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.fallbackLocation = fallbackLocation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>自动装配实现类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ConfigSupportProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigSupportConfiguration</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重中之重！！！！</span></span><br><span class="line"><span class="comment">     * 一定要注意加载顺序！！！</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * bootstrap.yml 加载类：org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration 的加载顺序是 </span></span><br><span class="line"><span class="comment">     * HIGHEST_PRECEDENCE+10，</span></span><br><span class="line"><span class="comment">     * 如果当前配置类再其之前加载，无法找到 bootstrap 配置文件中的信息，继而无法加载到本地</span></span><br><span class="line"><span class="comment">     * 所以当前配置类的装配顺序一定要在 PropertySourceBootstrapConfiguration 之后！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer orderNumber = Ordered.HIGHEST_PRECEDENCE + <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;PropertySourceLocator&gt; propertySourceLocators = Collections.EMPTY_LIST;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigSupportProperties configSupportProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否开启 config server 管理配置</span></span><br><span class="line">        <span class="keyword">if</span> (!isHasCloudConfigLocator(<span class="keyword">this</span>.propertySourceLocators)) &#123;</span><br><span class="line">            logger.info(<span class="string">"Config server 管理配置未启用"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 检查 config Server 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        ConfigurableEnvironment environment = configurableApplicationContext.getEnvironment();</span><br><span class="line">        MutablePropertySources propertySources = environment.getPropertySources();</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 加载 PropertySources 源："</span> + propertySources.size() + <span class="string">" 个"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断配置备份功能是否启用</span></span><br><span class="line">        <span class="keyword">if</span> (!configSupportProperties.isEnabled()) &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 配置备份未启用，使用：&#123;&#125;.enabled 打开 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, ConfigSupportProperties.CONFIG_PREFIX);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isCloudConfigLoaded(propertySources)) &#123;</span><br><span class="line">            <span class="comment">// 可以从 spring cloud 中获取配置信息</span></span><br><span class="line">            PropertySource cloudConfigSource = getLoadedCloudPropertySource(propertySources);</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 获取 config service 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            Map&lt;String, Object&gt; backupPropertyMap = makeBackupPropertySource(cloudConfigSource);</span><br><span class="line">            doBackup(backupPropertyMap, configSupportProperties.getFallbackLocation());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 获取 config Server 资源配置失败 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">// 不能获取配置信息，从本地读取</span></span><br><span class="line">            Properties backupProperty = loadBackupProperty(configSupportProperties.getFallbackLocation());</span><br><span class="line">            <span class="keyword">if</span> (backupProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Map backupSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;(backupProperty);</span><br><span class="line">                PropertySource backupSource = <span class="keyword">new</span> MapPropertySource(<span class="string">"backupSource"</span>, backupSourceMap);</span><br><span class="line"></span><br><span class="line">                propertySources.addFirst(backupSource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从本地加载配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Properties <span class="title">loadBackupProperty</span><span class="params">(String fallbackLocation)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 正在从本地加载！&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        PropertiesFactoryBean propertiesFactoryBean = <span class="keyword">new</span> PropertiesFactoryBean();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileSystemResource fileSystemResource = <span class="keyword">new</span> FileSystemResource(fallbackLocation);</span><br><span class="line">            propertiesFactoryBean.setLocation(fileSystemResource);</span><br><span class="line">            propertiesFactoryBean.afterPropertiesSet();</span><br><span class="line">            properties = propertiesFactoryBean.getObject();</span><br><span class="line">            <span class="keyword">if</span> (properties != <span class="keyword">null</span>)&#123;</span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 读取成功！&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doBackup</span><span class="params">(Map&lt;String, Object&gt; backupPropertyMap, String fallbackLocation)</span> </span>&#123;</span><br><span class="line">        FileSystemResource fileSystemResource = <span class="keyword">new</span> FileSystemResource(fallbackLocation);</span><br><span class="line">        File file = fileSystemResource.getFile();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!file.canWrite())&#123;</span><br><span class="line">                logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 文件无法写入：&#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, fileSystemResource.getPath());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            Iterator&lt;String&gt; iterator = backupPropertyMap.keySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                String key = iterator.next();</span><br><span class="line">                properties.setProperty(key, String.valueOf(backupPropertyMap.get(key)));</span><br><span class="line">            &#125;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(fileSystemResource.getFile());</span><br><span class="line">            properties.store(fileOutputStream, <span class="string">"backup cloud config"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 文件操作失败！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将配置信息转换为 map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">makeBackupPropertySource</span><span class="params">(PropertySource cloudConfigSource)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; backupSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (cloudConfigSource <span class="keyword">instanceof</span> CompositePropertySource) &#123;</span><br><span class="line">            CompositePropertySource propertySource = (CompositePropertySource) cloudConfigSource;</span><br><span class="line">            <span class="keyword">for</span> (PropertySource&lt;?&gt; source : propertySource.getPropertySources()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (source <span class="keyword">instanceof</span> MapPropertySource)&#123;</span><br><span class="line">                    MapPropertySource mapPropertySource = (MapPropertySource) source;</span><br><span class="line">                    String[] propertyNames = mapPropertySource.getPropertyNames();</span><br><span class="line">                    <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!backupSourceMap.containsKey(propertyName)) &#123;</span><br><span class="line">                            backupSourceMap.put(propertyName, mapPropertySource.getProperty(propertyName));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> backupSourceMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * config server 管理配置是否开启</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHasCloudConfigLocator</span><span class="params">(List&lt;PropertySourceLocator&gt; propertySourceLocators)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (PropertySourceLocator propertySourceLocator : propertySourceLocators) &#123;</span><br><span class="line">            <span class="keyword">if</span> (propertySourceLocator <span class="keyword">instanceof</span> ConfigServicePropertySourceLocator) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 config service 配置资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PropertySource <span class="title">getLoadedCloudPropertySource</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!propertySources.contains(PropertySourceBootstrapConfiguration.BOOTSTRAP_PROPERTY_SOURCE_NAME))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PropertySource&lt;?&gt; propertySource = propertySources.get(PropertySourceBootstrapConfiguration.BOOTSTRAP_PROPERTY_SOURCE_NAME);</span><br><span class="line">        <span class="keyword">if</span> (propertySource <span class="keyword">instanceof</span> CompositePropertySource) &#123;</span><br><span class="line">            <span class="keyword">for</span> (PropertySource&lt;?&gt; source : ((CompositePropertySource) propertySource).getPropertySources()) &#123;</span><br><span class="line">                <span class="comment">// 如果配置源是 config service，使用此配置源获取配置信息</span></span><br><span class="line">                <span class="comment">// configService 是 bootstrapProperties 加载 spring cloud 的实现：ConfigServiceBootstrapConfiguration</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"configService"</span>.equals(source.getName()))&#123;</span><br><span class="line">                    <span class="keyword">return</span> source;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否可以从 spring cloud 中获取配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCloudConfigLoaded</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getLoadedCloudPropertySource(propertySources) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>META-INF/spring.factories</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">  com.laiyy.gitee.confog.springcloudconfighaclientautoconfig.ConfigSupportConfiguration</span><br></pre></td></tr></table></figure></p><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.laiyy.gitee.confog<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-ha-client-autoconfig<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>bootstrap.yml</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      backup:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># 自定义配置 -- 是否启用客户端高可用配置</span></span><br><span class="line"><span class="attr">        fallbackLocation:</span> <span class="attr">D:/cloud</span>  <span class="comment"># 自动备份的配置文档存放位置</span></span><br></pre></td></tr></table></figure></p><p><strong>application.yml</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9015</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-ha-client-config</span></span><br></pre></td></tr></table></figure></p><p><strong>启动类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigHaClientConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigHaClientConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.laiyy.gitee.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo.git</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigHaClientConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigHaClientConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>先后启动 <code>config-server</code>、<code>config-client</code>，查看<code>config-client</code>控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fetching config from server at : http://localhost:9090</span><br><span class="line">Located environment: name=config-simple, profiles=[dev], label=master, version=ee39bf20c492b27c2d1b1d0ff378ad721e79a758, state=null</span><br><span class="line">Located property source: CompositePropertySource &#123;name=&apos;configService&apos;, propertySources=[MapPropertySource &#123;name=&apos;configClient&apos;&#125;, MapPropertySource &#123;name=&apos;https://gitee.com/laiyy0728/config-repo.git/config-simple/config-simple-dev.yml&apos;&#125;]&#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 检查 config Server 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 加载 PropertySources 源：11 个</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 获取 config service 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">No active profile set, falling back to default profiles: default</span><br></pre></td></tr></table></figure></p><p>查看 <code>d:/cloud</code>，可见存在 <code>fallback.properties</code> 文件，打开文件，可见配置信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#backup cloud config</span><br><span class="line">#Wed Apr 10 14:49:36 CST 2019</span><br><span class="line">config.client.version=ee39bf20c492b27c2d1b1d0ff378ad721e79a758</span><br><span class="line">com.laiyy.gitee.config=dev \u73AF\u5883\uFF0Cgit \u7248 spring cloud config-----\!</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:9015/config" target="_blank" rel="noopener">http://localhost:9015/config</a> ，可见打印信息如下：<br><img src="/images/spring-cloud/config/client-ha-result.png" alt="config-client-ha-result"></p><hr><p>停止 <code>server</code>、<code>client</code>，删除 <code>d:/cloud/fallback.properties</code>，将 <code>ConfigSupportConfiguration</code> 的 orderNumber 改为 <code>Ordered.HIGHEST_PRECEDENCE + 9</code>，再次先后启动 <code>config-server</code>、<code>config-client</code>，查看控制 <code>client</code> 控制台输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 检查 config Server 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 加载 PropertySources 源：10 个</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 获取 config Server 资源配置失败 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Fetching config from server at : http://localhost:9090</span><br></pre></td></tr></table></figure></p><p>可见，<code>PropertySources</code> 源从原来的 11 个，变为 10 个。原因是 <code>bootstrap.yml</code> 的加载顺序问题。<br>在源码：<code>org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration</code> 中，其加载顺序为：<code>Ordered.HIGHEST_PRECEDENCE + 10</code>，而 <code>ConfigSupportConfiguration</code> 的加载顺序为 <code>Ordered.HIGHEST_PRECEDENCE + 9</code>，先于 bootstrap.yml 配置文件加载执行，所以无法获取到远程配置信息，继而无法备份配置信息。</p><hr><p>重新进行第一步验证，然后将 <code>config-server</code>、<code>config-client</code> 停掉后，只启动 <code>config-client</code>，可见其控制台打印信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 检查 config Server 配置资源 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 加载 PropertySources 源：10 个</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 获取 config Server 资源配置失败 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 正在从本地加载！&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 读取成功！&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:9015/config" target="_blank" rel="noopener">http://localhost:9015/config</a> 正常返回信息。</p><p>由此验证<code>客户端高可用</code>成功</p><hr><h1 id="服务端高可用"><a href="#服务端高可用" class="headerlink" title="服务端高可用"></a>服务端高可用</h1><p>服务端高可用，一般情况下是通过与注册中心结合实现。通过 Ribbon 的负载均衡选择 Config Server 进行连接，来获取配置信息。</p><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-ha/spring-cloud-config-ha-server" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-ha/spring-cloud-config-ha-server</a></em></strong></p><p>eureka 选择使用 <code>spring-cloud-eureka-server-simple</code></p><h2 id="config-server-1"><a href="#config-server-1" class="headerlink" title="config server"></a>config server</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo.git</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-ha-server-app</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigHaServerConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigHaServerConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9016</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-ha-server-client</span></span><br></pre></td></tr></table></figure></p><p><strong>bootstrap.yml</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># 是否从注册中心获取 config server</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">spring-cloud-config-ha-server-app</span> <span class="comment"># 注册中心 config server 的 serviceId</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defauleZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigHaServerClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigHaServerClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.laiyy.gitee.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/config"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用验证：访问 <a href="http://localhost:9016/config" target="_blank" rel="noopener">http://localhost:9016/config</a> ,返回值如下：<br><img src="/images/spring-cloud/config/client-ha-result.png" alt="config-client-ha-result"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于线上的生产环境，通常对其都是有很高的要求，其中，高可用是不可或缺的一部分。必须保证服务是可用的，才能保证系统更好的运行，这是业务稳定的保证。&lt;br&gt;高可用一般分为两种：&lt;code&gt;客户端高可用&lt;/code&gt;、&lt;code&gt;服务端高可用&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="CloudConfig" scheme="https://www.laiyy.top/tags/CloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（30） --- Spring Cloud Config(四) &lt;BR&gt;  Spring Cloud 配置、高可用</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-30.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-30.html</id>
    <published>2019-03-06T03:31:06.000Z</published>
    <updated>2019-03-06T03:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地参数覆盖远程参数"><a href="#本地参数覆盖远程参数" class="headerlink" title="本地参数覆盖远程参数"></a>本地参数覆盖远程参数</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      allow-override:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      override-none:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      override-system-properties:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>allow-override：标识 <code>override-system-properties</code> 是否启用，默认为 true，设置为 false 时，意味着禁用用户的设置</li><li>override-none：当此项为 true，<code>override-override</code> 为 true，外部的配置优先级更低，而且不能覆盖任何存在的属性源。默认为 false</li><li>override-system-properties：用来标识外部配置是否能够覆盖系统配置，默认为 true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.cloud.config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySourceBootstrapProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> overrideSystemProperties = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> allowOverride = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> overrideNone = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PropertySourceBootstrapProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 getter、setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="客户端功能扩展"><a href="#客户端功能扩展" class="headerlink" title="客户端功能扩展"></a>客户端功能扩展</h1><h2 id="客户端自动刷新"><a href="#客户端自动刷新" class="headerlink" title="客户端自动刷新"></a>客户端自动刷新</h2><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-autoconfig" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-autoconfig</a></em></strong></p><p>在有些应用上，不需要再服务端批量推送的时候，客户端本身需要获取变化参数的情况下，使用客户端的自动刷新能完成此功能。</p><p><strong><em>config server</em></strong> 依然采用 <code>spring-cloud-config-simple-server</code>，基础配置不变，配置文件 repo 依然是 <a href="https://gitee.com/laiyy0728/config-repo" target="_blank" rel="noopener">https://gitee.com/laiyy0728/config-repo</a></p><h3 id="配置拉取、刷新二方库"><a href="#配置拉取、刷新二方库" class="headerlink" title="配置拉取、刷新二方库"></a>配置拉取、刷新二方库</h3><p>新建一个二方库（spring-cloud-autoconfig-refresh），用于其他项目引入，以自动刷新配置（用于多个子项目使用同一个配置中心，自动刷新）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整个二方库只有这一个类，作用是获取定时刷新时间，并刷新配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(RefreshEndpoint.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(<span class="string">"spring.cloud.config.refreshInterval"</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RefreshAutoConfiguration.class)</span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudAutoconfigRefreshApplication</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SpringCloudAutoconfigRefreshApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringCloudAutoconfigRefreshApplication</span><span class="params">(RefreshEndpoint refreshEndpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.refreshEndpoint = refreshEndpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.config.refreshInterval&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> refreshInterval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RefreshEndpoint refreshEndpoint;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar scheduledTaskRegistrar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> interval = getRefreshIntervalilliseconds();</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 定时刷新延迟 &#123;&#125; 秒启动，每 &#123;&#125; 毫秒刷新一次配置 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, refreshInterval, interval);</span><br><span class="line">        scheduledTaskRegistrar.addFixedDelayTask(<span class="keyword">new</span> IntervalTask(refreshEndpoint::refresh, interval, interval));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回毫秒级时间间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getRefreshIntervalilliseconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refreshInterval * <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>/resources/META-INF/spring.factories</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.laiyy.gitee.config.springcloudautoconfigrefresh.SpringCloudAutoconfigRefreshApplication</span><br></pre></td></tr></table></figure></p><h3 id="客户端引入二方库"><a href="#客户端引入二方库" class="headerlink" title="客户端引入二方库"></a>客户端引入二方库</h3><p>创建客户端项目(spring-cloud-autoconfig-client)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将配置好的自刷刷新作为二方库引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.laiyy.gitee.config<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-autoconfig-refresh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>bootstrap.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></p><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-autoconfig-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      refreshInterval:</span> <span class="number">10</span> <span class="comment"># 延迟时间、定时刷新时间</span></span><br></pre></td></tr></table></figure></p><p>其余配置与 <code>spring-cloud-config-simple-client</code> 一致</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>启动项目，访问 <a href="http://localhost:9090/get-config-info" target="_blank" rel="noopener">http://localhost:9090/get-config-info</a> ，正常返回信息。修改 config repo 配置文件，等待 10 秒后，再次访问，可见返回信息已经变为修改后信息。<br>查看 client 控制台，可见定时刷新日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Exposing 2 endpoint(s) beneath base path &apos;/actuator&apos;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 定时刷新延迟 10 秒启动</span><br><span class="line">No TaskScheduler/ScheduledExecutorService bean found for scheduled processing</span><br><span class="line">Tomcat started on port(s): 9091 (http) with context path &apos;&apos;</span><br><span class="line">Started SpringCloudAutoconfigClientApplication in 4.361 seconds (JVM running for 5.089)</span><br><span class="line">Initializing Spring DispatcherServlet &apos;dispatcherServlet&apos;</span><br><span class="line">Initializing Servlet &apos;dispatcherServlet&apos;</span><br><span class="line">Fetching config from server at : http://localhost:9090      ------------------ 第一次请求</span><br><span class="line">Completed initialization in 7 ms</span><br><span class="line">Located environment: name=config-simple, profiles=[dev], label=master, version=00324826262afd5178a648a469247f4fffea945e, state=null</span><br><span class="line">Bean &apos;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&apos; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$f67277ed] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">Fetching config from server at : http://localhost:9090       ------------------ 定时刷新配置</span><br><span class="line">Located environment: name=config-simple, profiles=[dev], label=master, version=00324826262afd5178a648a469247f4fffea945e, state=null</span><br><span class="line">Located property source: CompositePropertySource &#123;name=&apos;configService&apos;, propertySources=[MapPropertySource &#123;name=&apos;configClient&apos;&#125;, MapPropertySource &#123;name=&apos;https://gitee.com/laiyy0728/config-repo/config-simple/config-simple-dev.yml&apos;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">... 省略其他多次刷新</span><br></pre></td></tr></table></figure></p><h2 id="客户端回退"><a href="#客户端回退" class="headerlink" title="客户端回退"></a>客户端回退</h2><p>客户端回退机制，可以在出现网络中断时、或者配置服务因维护而关闭时，使得客户端可以正常使用。当启动回退时，客户端适配器将配置“缓存”到计算机中。要启用回退功能，只需要指定缓存存储的位置即可。</p><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-fallback" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-fallback</a></em></strong></p><p><strong><em>config server</em></strong> 依然采用 <code>spring-cloud-config-simple-server</code>，基础配置不变，配置文件 repo 依然是 <a href="https://gitee.com/laiyy0728/config-repo" target="_blank" rel="noopener">https://gitee.com/laiyy0728/config-repo</a></p><h3 id="二方库"><a href="#二方库" class="headerlink" title="二方库"></a>二方库</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-rsa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>config-client.properties</em></strong>：用于设置是否开启配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.config.enabled=false</span><br></pre></td></tr></table></figure></p><p><strong><em>/resources/META-INF/spring.factories</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.cloud.bootstrap.BootstrapConfiguration=\</span><br><span class="line">  com.laiyy.gitee.config.springcloudconfigfallbackautorefresh.ConfigServerBootStrap</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于拉取远程配置文件，并保存到本地</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackableConfigServerPropertySourceLocator</span> <span class="keyword">extends</span> <span class="title">ConfigServicePropertySourceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(FallbackableConfigServerPropertySourceLocator.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> fallbackEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fallbackLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> TextEncryptor textEncryptor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FallbackableConfigServerPropertySourceLocator</span><span class="params">(ConfigClientProperties defaultProperties, String fallbackLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(defaultProperties);</span><br><span class="line">        <span class="keyword">this</span>.fallbackLocation = fallbackLocation;</span><br><span class="line">        <span class="keyword">this</span>.fallbackEnabled = !StringUtils.isEmpty(fallbackLocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; locate(Environment environment)&#123;</span><br><span class="line">        PropertySource&lt;?&gt; propertySource = <span class="keyword">super</span>.locate(environment);</span><br><span class="line">        <span class="keyword">if</span> (fallbackEnabled &amp;&amp; propertySource != <span class="keyword">null</span>)&#123;</span><br><span class="line">            storeLocally(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> propertySource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">storeLocally</span><span class="params">(PropertySource propertySource)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        CompositePropertySource source = (CompositePropertySource) propertySource;</span><br><span class="line">        <span class="keyword">for</span> (String propertyName : source.getPropertyNames()) &#123;</span><br><span class="line">            Object property = source.getProperty(propertyName);</span><br><span class="line">            <span class="keyword">if</span> (textEncryptor != <span class="keyword">null</span>)&#123;</span><br><span class="line">                property = <span class="string">"&#123;cipher&#125;"</span> + textEncryptor.encrypt(String.valueOf(property));</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(propertyName).append(<span class="string">"="</span>).append(property).append(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; file content: &#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, builder);</span><br><span class="line">        saveFile(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存配置到本地</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 配置内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fallbackLocation + File.separator + ConfigServerBootStrap.FALLBACK_NAME);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileCopyUtils.copy(content.getBytes(), file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于判断从远程拉取配置文件，还是从本地拉取（spring boot 2.0，spring cloud F版）</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"config-client.properties"</span>,<span class="string">"file:&#123;spring.cloud.config.fallback-location:&#125;/fallback.properties"</span>&#125;, ignoreResourceNotFound = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerBootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FALLBACK_NAME = <span class="string">"fallback.properties"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableEnvironment configurableEnvironment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigServerBootStrap</span><span class="params">(ConfigurableEnvironment configurableEnvironment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configurableEnvironment = configurableEnvironment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.config.fallback-location:&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String fallbackLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigClientProperties <span class="title">configClientProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConfigClientProperties configClientProperties = <span class="keyword">new</span> ConfigClientProperties(<span class="keyword">this</span>.configurableEnvironment);</span><br><span class="line">        configClientProperties.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> configClientProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FallbackableConfigServerPropertySourceLocator <span class="title">fallbackableConfigServerPropertySourceLocator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConfigClientProperties client = configClientProperties();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FallbackableConfigServerPropertySourceLocator(client, fallbackLocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 SpringBoot 1.0、Spring Cloud G 版中，会启动报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">The bean &apos;configClientProperties&apos;, defined in class path resource [com/laiyy/gitee/config/springcloudconfigfallbackautorefresh/ConfigServerBootStrap.class], could not be registered. A bean with that name has already been defined in class path resource [org/springframework/cloud/config/client/ConfigServiceBootstrapConfiguration.class] and overriding is disabled.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true</span><br><span class="line"></span><br><span class="line">2019-03-07 10:10:11.230 ERROR 13828 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name &apos;configClientProperties&apos; defined in class path resource [com/laiyy/gitee/config/springcloudconfigfallbackautorefresh/ConfigServerBootStrap.class]: Cannot register bean definition [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=com.laiyy.gitee.config.springcloudconfigfallbackautorefresh.ConfigServerBootStrap; factoryMethodName=configClientProperties; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/laiyy/gitee/config/springcloudconfigfallbackautorefresh/ConfigServerBootStrap.class]] for bean &apos;configClientProperties&apos;: There is already [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration; factoryMethodName=configClientProperties; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/cloud/config/client/ConfigServiceBootstrapConfiguration.class]] bound.</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(DefaultListableBeanFactory.java:894) ~[spring-beans-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:274) ~[spring-context-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure></p><p>如果按照报错提示，增加了 <code>spring.main.allow-bean-definition-overriding=true</code> 的配置，没有任何作用；如果修改了 bean 名称<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"clientProperties"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ConfigClientProperties <span class="title">configClientProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConfigClientProperties configClientProperties = <span class="keyword">new</span> ConfigClientProperties(<span class="keyword">this</span>.configurableEnvironment);</span><br><span class="line">    configClientProperties.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">return</span> configClientProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>会有如下报错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Method configClientProperties in org.springframework.cloud.config.client.ConfigClientAutoConfiguration required a single bean, but <span class="number">2</span> were found:</span><br><span class="line">- configClientProperties: defined by method 'configClientProperties' in class path resource [org/springframework/cloud/config/client/ConfigClientAutoConfiguration.class]</span><br><span class="line">- clientProperties: defined by method 'configClientProperties' in class path resource [com/laiyy/gitee/config/springcloudconfigfallbackautorefresh/ConfigServerBootStrap.class]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider marking one of the beans as <span class="meta">@Primary</span>, updating the consumer to accept multiple beans, or using <span class="meta">@Qualifier</span> to identify the bean that should be consumed</span><br></pre></td></tr></table></figure></p><p>原因：<code>ConfigClientProperties</code> 在初始化时已经默认单例加载。即：这个 bean 不能被重新注册到 spring 容器中。<br>解决办法：将 spring 容器已经加载的单例的 <code>ConfigClientProperties</code> 注入进来，并在构造中设置为 false 即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"configClient.properties"</span>, <span class="string">"file:$&#123;spring.cloud.config.fallbackLocation:&#125;/fallback.properties"</span>&#125;, ignoreResourceNotFound = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerBootStrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FALLBACK_NAME = <span class="string">"fallback.properties"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableEnvironment configurableEnvironment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigClientProperties configClientProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigServerBootStrap</span><span class="params">(ConfigurableEnvironment configurableEnvironment, ConfigClientProperties configClientProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configurableEnvironment = configurableEnvironment;</span><br><span class="line">        <span class="keyword">this</span>.configClientProperties = configClientProperties;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.configClientProperties.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.cloud.config.fallbackLocation:&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String fallbackLocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FallbackableConfigServerPropertySourceLocator <span class="title">fallbackableConfigServerPropertySourceLocator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FallbackableConfigServerPropertySourceLocator(configClientProperties, fallbackLocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h3><p><strong><em>bootstrap.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      fallbackLocation:</span> <span class="attr">E:\\springcloud</span></span><br></pre></td></tr></table></figure></p><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-autoconfig-client</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></p><p>其余配置、JAVA 类不变</p><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>启动 config client，查看控制台，可见打印了 2 次远程拉取同步本地文件的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; file content: config.client.version=ee39bf20c492b27c2d1b1d0ff378ad721e79a758</span><br><span class="line">com.laiyy.gitee.config=dev 环境，git 版 spring cloud config-----!</span><br><span class="line"> &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure></p><p>查看本地 E:\springcloud 文件夹，可见多了一个 <code>fallback.properties</code> 文件<br><img src="/images/spring-cloud/config/fallback-local-properties.png" alt="fallback local properties"></p><p>文件内容：<br><img src="/images/spring-cloud/config/fallback-local-properties-content.png" alt="fallback local properties content"></p><p>更新 config repo 的对应配置文件后，POST 访问 config client 刷新端口：<a href="http://localhost:9091/actuator/refresh" target="_blank" rel="noopener">http://localhost:9091/actuator/refresh</a> 可见控制台再次打印同步本地文件信息。此时停止 config server 访问，再次访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，返回的信息是同步后的更新结果，由此验证客户端回退成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本地参数覆盖远程参数&quot;&gt;&lt;a href=&quot;#本地参数覆盖远程参数&quot; class=&quot;headerlink&quot; title=&quot;本地参数覆盖远程参数&quot;&gt;&lt;/a&gt;本地参数覆盖远程参数&lt;/h1&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  cloud:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    config:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      allow-override:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      override-none:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      override-system-properties:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="CloudConfig" scheme="https://www.laiyy.top/tags/CloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（29） --- Spring Cloud Config(三) &lt;BR&gt; git 版 coofnig 配置、使用数据库实现配置中心</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-29.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-29.html</id>
    <published>2019-03-05T03:28:06.000Z</published>
    <updated>2019-03-05T03:28:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了使用 git 作为配置文件的管理中心外，也可以使用关系型数据库、非关系型数据库实现配置中心，以及配置中心的扩展。包括：客户端自动刷新、客户端回退、安全认证、客户端高可用、服务端高可用等。</p><a id="more"></a><hr><h1 id="服务端-git-配置详解"><a href="#服务端-git-配置详解" class="headerlink" title="服务端 git 配置详解"></a>服务端 git 配置详解</h1><p>git 的版 config 有多种配置：</p><ul><li>uri 占位符</li><li>模式匹配</li><li>多残酷</li><li>路径搜索占位符</li></ul><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-placeholder" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-placeholder</a></em></strong></p><p>公共依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="git-中-uri-占位符"><a href="#git-中-uri-占位符" class="headerlink" title="git 中 uri 占位符"></a>git 中 uri 占位符</h2><p>Spring Cloud Config Server 支持占位符的使用，支持 {application}、{profile}、{label}，这样的话就可以在配置 uri 的时候，通过占位符使用应用名称来区分应用对应的仓库进行使用。</p><p><strong><em> config server </em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/&#123;application&#125;</span>        <span class="comment"># &#123;application&#125; 是匹配符，匹配项目名称</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-placeholder-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure></p><p><strong><em> config client </em></strong></p><p>bootstrap.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-repo</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></p><p>使用 <code>{application}</code> 时，需要注意，在 config client 中配置的 <code>name</code>，既是 config 管理中心的 git 名称，又是需要匹配的配置文件名称。即：远程的 config git 管理中心地址为：<a href="https://gitee.com/laiyy0728/config-repo" target="_blank" rel="noopener">https://gitee.com/laiyy0728/config-repo</a> ，在仓库中 <code>config-simple</code> 文件夹下，必须有一个 <code>config-simple.yml</code> 配置文件。否则 config client 会找不到配置文件。</p><h2 id="模式匹配、多存储库"><a href="#模式匹配、多存储库" class="headerlink" title="模式匹配、多存储库"></a>模式匹配、多存储库</h2><p><strong><em>config server</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">native</span> <span class="comment"># 本地配置仓库，在测试本地配置仓库之前，需要注释掉这一行</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">          repos:</span></span><br><span class="line"><span class="attr">            simple:</span> <span class="attr">https://gitee.com/laiyy0728/simple</span></span><br><span class="line"><span class="attr">            special:</span></span><br><span class="line"><span class="attr">              pattern:</span> <span class="string">special*/dev*,*special*/dev*</span></span><br><span class="line"><span class="attr">              uri:</span> <span class="attr">https://gitee.com/laiyy0728/special</span></span><br><span class="line"><span class="attr">        native:</span></span><br><span class="line"><span class="attr">          search-locations:</span>  <span class="attr">C:/Users/laiyy/AppData/Local/Temp/config-simple</span> <span class="comment"># 本地配置仓库路径</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-placeholder-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure></p><h2 id="路径搜索占位符"><a href="#路径搜索占位符" class="headerlink" title="路径搜索占位符"></a>路径搜索占位符</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-*</span> <span class="comment"># 匹配以 config 开头的文件夹</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-placeholder-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><hr><h1 id="关系型数据库实现配置中心"><a href="#关系型数据库实现配置中心" class="headerlink" title="关系型数据库实现配置中心"></a>关系型数据库实现配置中心</h1><p>架构图：<br><img src="/images/spring-cloud/config/config-db.png" alt="config server mysql"></p><p>公共依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="mysql-config-server"><a href="#mysql-config-server" class="headerlink" title="mysql config server"></a>mysql config server</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-customer-repo-mysql</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        jdbc:</span></span><br><span class="line"><span class="attr">          sql:</span> <span class="string">SELECT</span> <span class="string">`KEY`,</span> <span class="string">`VALUE`</span> <span class="string">FROM</span> <span class="string">PROPERTIES</span> <span class="string">WHERE</span> <span class="string">application</span> <span class="string">=</span> <span class="string">?</span> <span class="string">NAD</span> <span class="string">profile</span> <span class="string">=</span> <span class="string">?</span> <span class="string">AND</span> <span class="string">label</span> <span class="string">=</span> <span class="string">?</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">jdbc</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql:///springcloud?useUnicode=true&amp;charsetEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.jdbc.core:</span> <span class="string">debug</span></span><br><span class="line">    <span class="string">org.springframework.jdbc.core.StatementCreatorUtils:</span> <span class="string">Trace</span></span><br></pre></td></tr></table></figure><p>其余配置、config client 与之前一致即可。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>启动 config server、config client，可以看到，config server 打印日志如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Executing prepared SQL query</span><br><span class="line">Executing prepared SQL statement [SELECT `KEY`, `VALUE` FROM PROPERTIES WHERE application = ? AND profile = ? AND lable = ?]</span><br><span class="line">Setting SQL statement parameter value: column index 1, parameter value [config-simple], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 2, parameter value [dev], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 3, parameter value [master], value class [java.lang.String], SQL type unknown</span><br><span class="line">Executing prepared SQL query</span><br><span class="line">Executing prepared SQL statement [SELECT `KEY`, `VALUE` FROM PROPERTIES WHERE application = ? AND profile = ? AND lable = ?]</span><br><span class="line">Setting SQL statement parameter value: column index 1, parameter value [config-simple], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 2, parameter value [default], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 3, parameter value [master], value class [java.lang.String], SQL type unknown</span><br><span class="line">Executing prepared SQL query</span><br><span class="line">Executing prepared SQL statement [SELECT `KEY`, `VALUE` FROM PROPERTIES WHERE application = ? AND profile = ? AND lable = ?]</span><br><span class="line">Setting SQL statement parameter value: column index 1, parameter value [application], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 2, parameter value [dev], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 3, parameter value [master], value class [java.lang.String], SQL type unknown</span><br><span class="line">Executing prepared SQL query</span><br><span class="line">Executing prepared SQL statement [SELECT `KEY`, `VALUE` FROM PROPERTIES WHERE application = ? AND profile = ? AND lable = ?]</span><br><span class="line">Setting SQL statement parameter value: column index 1, parameter value [application], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 2, parameter value [default], value class [java.lang.String], SQL type unknown</span><br><span class="line">Setting SQL statement parameter value: column index 3, parameter value [master], value class [java.lang.String], SQL type unknown</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，返回数据如下：<br><img src="/images/spring-cloud/config/config-mysql-repo.png" alt="spring cloud config mysql"></p><hr><h1 id="非关系数据库实现配置中心"><a href="#非关系数据库实现配置中心" class="headerlink" title="非关系数据库实现配置中心"></a>非关系数据库实现配置中心</h1><p>以 mongodb 为例，需要 spring cloud config server mongodb 依赖，github 地址：<a href="https://github.com/spring-cloud-incubator/spring-cloud-config-server-mongodb" target="_blank" rel="noopener">https://github.com/spring-cloud-incubator/spring-cloud-config-server-mongodb</a></p><h2 id="config-server-monngodb"><a href="#config-server-monngodb" class="headerlink" title="config server monngodb"></a>config server monngodb</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mongogdb 在 spring cloud config server 的依赖，这个依赖是快照依赖，需要指定 spring 的仓库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3.BUILD-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-customer-repo-mongodb</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">mongodb://192.168.67.133/springcloud</span> <span class="comment"># mongo 数据库地址</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableMongoConfigServer</span>  <span class="comment">// 一定注意，不能写为 EnableConfigServer，一定要是 MongooConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudCustomerRepoMongodbApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudCustomerRepoMongodbApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mongo-测试数据"><a href="#mongo-测试数据" class="headerlink" title="mongo 测试数据"></a>mongo 测试数据</h2><p>collection 名称：springcloud</p><p>数据：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"label"</span>: <span class="string">"master"</span>,</span><br><span class="line"><span class="attr">"profile"</span>: <span class="string">"prod"</span>,</span><br><span class="line"><span class="attr">"source"</span>: &#123;</span><br><span class="line"><span class="attr">"com"</span>: &#123;</span><br><span class="line"><span class="attr">"laiyy"</span>: &#123;</span><br><span class="line"><span class="attr">"gitee"</span>: &#123;</span><br><span class="line"><span class="attr">"config"</span>: <span class="string">"I am the mongdb configuration file from dev environment. I will edit."</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">springcloud</span> <span class="comment"># 这里指定的是 collection name</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p><strong><em>config client 与之前的一致</em></strong></p><p>访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，返回值为：<br><img src="/images/spring-cloud/config/mongo-result.png" alt="mongo result"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了使用 git 作为配置文件的管理中心外，也可以使用关系型数据库、非关系型数据库实现配置中心，以及配置中心的扩展。包括：客户端自动刷新、客户端回退、安全认证、客户端高可用、服务端高可用等。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="CloudConfig" scheme="https://www.laiyy.top/tags/CloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（28） --- Spring Cloud Config(二) &lt;BR&gt; 刷新配置</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-28.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-28.html</id>
    <published>2019-03-04T07:55:04.000Z</published>
    <updated>2019-03-04T07:55:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>刷新配置信息的方式有三种：<code>手动刷新</code>、<code>半自动刷新</code>、<code>自动刷新</code>，其中，<code>半自动刷新</code>利用的是 <code>spring cloud bus</code>，<code>自动刷新</code>利用的是 github、gitee、gitlab 等代码托管网站的 <code>webhooks</code></p><a id="more"></a><h1 id="手动刷新"><a href="#手动刷新" class="headerlink" title="手动刷新"></a>手动刷新</h1><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-refresh" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-refresh</a></em></strong></p><p>手动刷新的 config server 依然选用示例中的 <code>spring-cloud-config-simple-server</code></p><h2 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>bootstrap.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></p><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-refresh-client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span> <span class="comment"># 暴露端点，用于手动刷新</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></p><p><strong><em>改造 config properties、config controller</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 标注为配置刷新域</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigInfoProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.laiyy.gitee.config&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 标注为配置刷新域</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigInfoProperties configInfoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigController</span><span class="params">(ConfigInfoProperties configInfoProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configInfoProperties = configInfoProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get-config-info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfoProperties.getConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，观察返回值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dev 环境，git 版 spring cloud config</span><br></pre></td></tr></table></figure></p><p>修改 <a href="https://gitee.com/laiyy0728/config-repo/blob/master/config-simple/config-simple-dev.yml" target="_blank" rel="noopener">https://gitee.com/laiyy0728/config-repo/blob/master/config-simple/config-simple-dev.yml</a> 的内容为：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com:</span></span><br><span class="line"><span class="attr">  laiyy:</span></span><br><span class="line"><span class="attr">    gitee:</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">dev</span> <span class="string">环境，git</span> <span class="string">版</span> <span class="string">spring</span> <span class="string">cloud</span> <span class="string">config，使用手动刷新。。。</span></span><br></pre></td></tr></table></figure></p><p>再次访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，观察返回值仍为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dev 环境，git 版 spring cloud config</span><br></pre></td></tr></table></figure></p><p>这是因为没有进行手动刷新，POST 访问：<a href="http://localhost:9091/actuator/refresh" target="_blank" rel="noopener">http://localhost:9091/actuator/refresh</a> ，返回信息如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"config.client.version"</span>,</span><br><span class="line">    <span class="string">"com.laiyy.gitee.config"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>控制台输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fetching config from server at : http://localhost:9090</span><br><span class="line">Located environment: name=config-simple, profiles=[dev], label=master, version=a04663a171b0d8f552c3d549ad38401bd6873b95, state=null</span><br><span class="line">Located property source: CompositePropertySource &#123;name=&apos;configService&apos;, propertySources=[MapPropertySource &#123;name=&apos;configClient&apos;&#125;, MapPropertySource &#123;name=&apos;https://gitee.com/laiyy0728/config-repo/config-simple/config-simple-dev.yml&apos;&#125;]&#125;</span><br></pre></td></tr></table></figure></p><p>此时，再次访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a> ，观察返回值变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dev 环境，git 版 spring cloud config，使用手动刷新。。。</span><br></pre></td></tr></table></figure></p><p>由此证明，手动刷新成功</p><hr><h1 id="半自动刷新"><a href="#半自动刷新" class="headerlink" title="半自动刷新"></a>半自动刷新</h1><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-bus" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-bus</a></em></strong></p><p>半自动刷新依赖于 Spring Cloud Bus 总线，而 Bus 总线依赖于 RabbitMQ。 Spring Cloud Bus 刷新配置的流程图：<br><img src="/images/spring-cloud/config/spring-cloud-bus.png" alt="Spring Cloud Bus 流程图"></p><p><strong><em>Rabbit MQ 请自行安装启动，在此不做描述</em></strong></p><h2 id="config-server-bus"><a href="#config-server-bus" class="headerlink" title="config server bus"></a>config server bus</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo.git</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">    bus:</span></span><br><span class="line"><span class="attr">      trace:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用bus追踪</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-bus-server</span></span><br><span class="line"><span class="attr">  rabbitmq:</span> <span class="comment"># rabbit mq 配置</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.67</span><span class="number">.133</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigBusServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigBusServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-client-bus"><a href="#config-client-bus" class="headerlink" title="config client bus"></a>config client bus</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>bootstrap.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></p><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo.git</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">    bus:</span></span><br><span class="line"><span class="attr">      trace:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># \u662F\u5426\u542F\u7528bus\u8FFD\u8E2A</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-bus-server</span></span><br><span class="line"><span class="attr">  rabbitmq:</span> <span class="comment"># rabbit mq \u914D\u7F6E</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.67</span><span class="number">.133</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></p><p>其余 Java 类与手动刷新一致。</p><h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><p>访问 <a href="http://localhost:9095/get-config-info" target="_blank" rel="noopener">http://localhost:9095/get-config-info</a><br><img src="/images/spring-cloud/config/config-bus-client.png" alt="Config Bus"></p><p>将 <code>config-simple/config-simple-test.yml</code> 内容修改为<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com:</span></span><br><span class="line"><span class="attr">  laiyy:</span></span><br><span class="line"><span class="attr">    gitee:</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">test</span> <span class="string">环境，git</span> <span class="string">版</span> <span class="string">spring</span> <span class="string">cloud</span> <span class="string">config，bus</span> <span class="string">半自动刷新配置</span></span><br></pre></td></tr></table></figure></p><p>再次访问 <a href="http://localhost:9095/get-config-info" target="_blank" rel="noopener">http://localhost:9095/get-config-info</a> ，返回值仍为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test 环境，git 版 spring cloud config</span><br></pre></td></tr></table></figure></p><p>使用 bus 刷新配置，POST 请求 <a href="http://localhost:9095/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:9095/actuator/bus-refresh</a> ，查看控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bean &apos;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&apos; of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$7c355e31] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</span><br><span class="line">Fetching config from server at : http://localhost:9090</span><br><span class="line">Located environment: name=config-simple, profiles=[test], label=master, version=45c17b3b2a7918ed7093251f2085641df446e961, state=null</span><br><span class="line">Located property source: CompositePropertySource &#123;name=&apos;configService&apos;, propertySources=[MapPropertySource &#123;name=&apos;configClient&apos;&#125;, MapPropertySource &#123;name=&apos;https://gitee.com/laiyy0728/config-repo.git/config-simple/config-simple-test.yml&apos;&#125;]&#125;</span><br><span class="line">No active profile set, falling back to default profiles: default</span><br><span class="line">Started application in 1.108 seconds (JVM running for 264.482)</span><br><span class="line">Received remote refresh request. Keys refreshed []</span><br></pre></td></tr></table></figure></p><p>再次访问 <a href="http://localhost:9095/get-config-info" target="_blank" rel="noopener">http://localhost:9095/get-config-info</a> ，返回值变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test 环境，git 版 spring cloud config，bus 半自动刷新配置</span><br></pre></td></tr></table></figure></p><h2 id="refresh、bus-refresh-比较"><a href="#refresh、bus-refresh-比较" class="headerlink" title="refresh、bus-refresh 比较"></a>refresh、bus-refresh 比较</h2><ul><li>refresh：只能刷新单节点，即：只能刷新指定 ip 的配置信息</li><li>bus-refresh：批量刷新，可以刷新订阅了 rabbit queue 的所有节点配置</li></ul><hr><h1 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h1><p>自动刷新实际上很简单，只需要暴露一个 bus-refresh 节点，并在 config-server 的 git 中，配置 <code>webhook</code> 指向暴露出来的 bus-refresh 节点即可，多个 bus-refresh 节点用英文逗号分隔<br><img src="/images/spring-cloud/config/config-webhook.png" alt="Config webhook"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷新配置信息的方式有三种：&lt;code&gt;手动刷新&lt;/code&gt;、&lt;code&gt;半自动刷新&lt;/code&gt;、&lt;code&gt;自动刷新&lt;/code&gt;，其中，&lt;code&gt;半自动刷新&lt;/code&gt;利用的是 &lt;code&gt;spring cloud bus&lt;/code&gt;，&lt;code&gt;自动刷新&lt;/code&gt;利用的是 github、gitee、gitlab 等代码托管网站的 &lt;code&gt;webhooks&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="CloudConfig" scheme="https://www.laiyy.top/tags/CloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（27） --- Spring Cloud Config(一) &lt;BR&gt; 配置中心、实例</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-27.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-27.html</id>
    <published>2019-03-04T01:51:30.000Z</published>
    <updated>2019-03-04T01:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud Config 是 Spring Cloud 微服务体系中的配置中心，是微服务中不可或缺的一部分，其能够很好的将程序中配置日益增多的各种功能的开关、参数的配置、服务器的地址等配置修改后实时生效、灰度发布，分环境、分集群管理配置等进行全面的集中化管理，有利于系统的配置管理、维护。</p><a id="more"></a><h1 id="Spring-Cloud-Config-配置中心"><a href="#Spring-Cloud-Config-配置中心" class="headerlink" title="Spring Cloud Config 配置中心"></a>Spring Cloud Config 配置中心</h1><h2 id="配置中心对比"><a href="#配置中心对比" class="headerlink" title="配置中心对比"></a>配置中心对比</h2><table><thead><tr><th style="text-align:center">对比方面</th><th style="text-align:center">重要性</th><th style="text-align:center">SpringCloud Config</th><th style="text-align:center">Netflix archaius</th><th style="text-align:center">携程 Apollo</th><th style="text-align:center">disconf</th></tr></thead><tbody><tr><td style="text-align:center">静态配置管理</td><td style="text-align:center">高</td><td style="text-align:center">基于 file</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">动态配置管理</td><td style="text-align:center">高</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">统一管理</td><td style="text-align:center">高</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">多维度管理</td><td style="text-align:center">中</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">变更管理</td><td style="text-align:center">高</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">本地配置缓存</td><td style="text-align:center">高</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">配置更新策略</td><td style="text-align:center">中</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">配置锁</td><td style="text-align:center">中</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">配置校验</td><td style="text-align:center">中</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">配置生效时间</td><td style="text-align:center">高</td><td style="text-align:center">重启生效、手动刷新</td><td style="text-align:center">手动刷新失效</td><td style="text-align:center">实时</td><td style="text-align:center">实时</td></tr><tr><td style="text-align:center">配置更新推送</td><td style="text-align:center">高</td><td style="text-align:center">需要手动触发</td><td style="text-align:center">需要手动触发</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">配置定时拉取</td><td style="text-align:center">高</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">配置更新目前依赖事件驱动，client 重启或者 server 推送操作</td></tr><tr><td style="text-align:center">用户权限管理</td><td style="text-align:center">中</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">授权、审核、审计</td><td style="text-align:center">中</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">界面直接提供发布历史、回滚按钮</td><td style="text-align:center">操作记录存在数据库中，但是无查询接口</td></tr><tr><td style="text-align:center">配置版本管理</td><td style="text-align:center">高</td><td style="text-align:center">git</td><td style="text-align:center">无</td><td style="text-align:center">支持</td><td style="text-align:center">操作记录存在数据库中，但是无查询接口</td></tr><tr><td style="text-align:center">配置合规检测</td><td style="text-align:center">高</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持（不完整）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">实例配置监控</td><td style="text-align:center">高</td><td style="text-align:center">需要结合 spring admin</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持，可以查看每个配置再哪台机器上加载</td></tr><tr><td style="text-align:center">灰度发布</td><td style="text-align:center">中</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td><td style="text-align:center">不支持部分更新</td></tr><tr><td style="text-align:center">告警通知</td><td style="text-align:center">中</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">支持邮件方式告警</td><td style="text-align:center">支持邮件方式告警</td></tr><tr><td style="text-align:center">统计报表</td><td style="text-align:center">中</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">依赖关系</td><td style="text-align:center">高</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">支持 SpringBoot</td><td style="text-align:center">高</td><td style="text-align:center">原生支持</td><td style="text-align:center">低</td><td style="text-align:center">支持</td><td style="text-align:center">与 SpringBoot 无关</td></tr><tr><td style="text-align:center">支持 Spring Config</td><td style="text-align:center">高</td><td style="text-align:center">原生支持</td><td style="text-align:center">低</td><td style="text-align:center">支持</td><td style="text-align:center">与 SpringBoot 无关</td></tr><tr><td style="text-align:center">客户端支持</td><td style="text-align:center">低</td><td style="text-align:center">java</td><td style="text-align:center">java</td><td style="text-align:center">java、.net</td><td style="text-align:center">java</td></tr><tr><td style="text-align:center">业务系统入侵</td><td style="text-align:center">高</td><td style="text-align:center">入侵性弱</td><td style="text-align:center">入侵性弱</td><td style="text-align:center">入侵性弱</td><td style="text-align:center">入侵性弱、支持注解和 xml</td></tr><tr><td style="text-align:center">单点故障</td><td style="text-align:center">高</td><td style="text-align:center">支持 HA 部署</td><td style="text-align:center">支持 HA 部署</td><td style="text-align:center">支持 HA 部署</td><td style="text-align:center">支持 HA 部署、高可用由 zk 提供</td></tr><tr><td style="text-align:center">多数据中心部署</td><td style="text-align:center">高</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">配置界面</td><td style="text-align:center">中</td><td style="text-align:center">无，需要 git、数据库等</td><td style="text-align:center">无</td><td style="text-align:center">统一界面</td><td style="text-align:center">统一界面</td></tr></tbody></table><h2 id="配置中心具备的功能"><a href="#配置中心具备的功能" class="headerlink" title="配置中心具备的功能"></a>配置中心具备的功能</h2><ul><li>Open API</li><li>业务无关性</li><li>配置生效监控</li><li>一致性 K-V 存储</li><li>统一配置实时推送</li><li>配合灰度与更新</li><li>配置全局恢复、备份、历史</li><li>高可用集群</li></ul><p><img src="/images/spring-cloud/config/config-1.png" alt="spring cloud 配置中心功能图"></p><h2 id="配置中心流转"><a href="#配置中心流转" class="headerlink" title="配置中心流转"></a>配置中心流转</h2><p>配置中心各流程流转如图：<br><img src="/images/spring-cloud/config/config-2.png" alt="Spring cloud 配置中心流转图"></p><h2 id="配置中心支撑体系"><a href="#配置中心支撑体系" class="headerlink" title="配置中心支撑体系"></a>配置中心支撑体系</h2><p>配置中心的支撑体系大致有两类</p><ul><li>开发管理体系</li><li>运维管理体系<br><img src="/images/spring-cloud/config/config-devops.png" alt="Spring 开发、运维体系"></li></ul><hr><h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><h2 id="Spring-Cloud-Config-概述"><a href="#Spring-Cloud-Config-概述" class="headerlink" title="Spring Cloud Config 概述"></a>Spring Cloud Config 概述</h2><p>Spring Cloud Config 是一个集中化、外部配置的分布式系统，由服务端、客户端组成，它不依赖于注册中心，是一个独立的配置中心。Spring Cloud Config 支持多种存储配置信息的形式，目前主要有 jdbc、vault、Navicat、svn、git 等形式，默认为 git。</p><h2 id="git-版工作原理"><a href="#git-版工作原理" class="headerlink" title="git 版工作原理"></a>git 版工作原理</h2><p>配置客户端启动时，会向服务端发起请求，服务端接收到客户端的请求后，根据配置的仓库地址，将 git 上的文件克隆到本地的一个临时目录中，这个目录是一个 git 的本地仓库，然后服务端再读取本地文件，返回给客户端。这样做的好处是：当 git 服务故障或网络请求异常时，保证服务端依然能正常工作。</p><p><img src="/images/spring-cloud/config/config-git.png" alt="Spring Cloud Config git 版工作原理"></p><hr><h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><h2 id="config-repo"><a href="#config-repo" class="headerlink" title="config repo"></a>config repo</h2><p>使用 git 做配置中心的配置文件存储，需要一个 git 仓库，用于保存配置文件。 本例仓库地址： <a href="https://gitee.com/laiyy0728/config-repo" target="_blank" rel="noopener">https://gitee.com/laiyy0728/config-repo</a></p><p>在仓库中，新建一个文件夹：<code>config-simple</code>，在文件夹内新建 3 个文件：<code>config-simple-dev.yml</code>、<code>config-simple-test.yml</code>、<code>config-simple-prod.yml</code><br><img src="/images/spring-cloud/config/config-repo-simple.png" alt="Spring Cloud Simple Config"></p><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-simple" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-config/spring-cloud-config-simple</a></em></strong></p><h2 id="config-server"><a href="#config-server" class="headerlink" title="config server"></a>config server</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/laiyy0728/config-repo</span> <span class="comment"># git 仓库地址</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">config-simple</span> <span class="comment"># 从哪个文件夹下拉取配置</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-simple-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigSimpleServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigSimpleServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证-config-server"><a href="#验证-config-server" class="headerlink" title="验证 config server"></a>验证 config server</h2><p>启动 config server，查看 endpoints mappings<br><img src="/images/spring-cloud/config/config-endpoints.png" alt="Spring Cloud Config Endpoints"></p><ul><li>label：代表请求的是哪个分支，默认是 master 分支</li><li>name：代表请求哪个名称的远程文件</li><li>profile：代表哪个版本的文件，如：dev、test、prod 等</li></ul><p>从 mappings 中，可以看出，访问获取一个配置的信息，有多种方式，尝试获取 <code>/config-simple/config-simple.dev.yml</code> 配置信息：</p><h3 id="由接口获取配置详细信息"><a href="#由接口获取配置详细信息" class="headerlink" title="由接口获取配置详细信息"></a>由接口获取配置详细信息</h3><p><a href="http://localhost:9090/config-simple/dev/master" target="_blank" rel="noopener">http://localhost:9090/config-simple/dev/master</a> 、<a href="http://localhost:9090/config-simple/dev" target="_blank" rel="noopener">http://localhost:9090/config-simple/dev</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"config-simple"</span>,</span><br><span class="line"><span class="attr">"profiles"</span>: [</span><br><span class="line"><span class="string">"dev"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"label"</span>: <span class="string">"master"</span>,</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"520b379e9c7f2e39bb56e599f914b6c08fe13c06"</span>,</span><br><span class="line"><span class="attr">"state"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"propertySources"</span>: [&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"https://gitee.com/laiyy0728/config-repo/config-simple/config-simple-dev.yml"</span>,</span><br><span class="line"><span class="attr">"source"</span>: &#123;</span><br><span class="line"><span class="attr">"com.laiyy.gitee.config"</span>: <span class="string">"dev 环境，git 版 spring cloud config"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="由绝对文件路径获取配置文件内容"><a href="#由绝对文件路径获取配置文件内容" class="headerlink" title="由绝对文件路径获取配置文件内容"></a>由绝对文件路径获取配置文件内容</h3><p><a href="http://localhost:9090/master/config-simple-dev.yml" target="_blank" rel="noopener">http://localhost:9090/master/config-simple-dev.yml</a> 、<a href="http://localhost:9090/config-simple-dev.yml" target="_blank" rel="noopener">http://localhost:9090/config-simple-dev.yml</a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com:</span></span><br><span class="line"><span class="attr">  laiyy:</span></span><br><span class="line"><span class="attr">    gitee:</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">dev</span> <span class="string">环境，git</span> <span class="string">版</span> <span class="string">spring</span> <span class="string">cloud</span> <span class="string">config</span></span><br></pre></td></tr></table></figure></p><h2 id="config-client"><a href="#config-client" class="headerlink" title="config client"></a>config client</h2><p>在 config server 中获取配置文件以及成功，接下来需要在 config client 中，通过 config server 获取对应的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-simple-client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于从远程 config server 获取配置文件内容</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.laiyy.gitee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigInfoProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于打印获取到的配置文件内容</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigInfoProperties configInfoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigController</span><span class="params">(ConfigInfoProperties configInfoProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configInfoProperties = configInfoProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get-config-info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfoProperties.getConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigSimpleClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConfigSimpleClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证-config-client"><a href="#验证-config-client" class="headerlink" title="验证 config client"></a>验证 config client</h2><p>启动 config client，观察控制台，发现 config client 拉取配置的路径是：<a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> ，而不是在 yml 中配置的 localhost:9090。这是因为 boot 启动时加载配置文件的顺序导致的。boot 默认先加载 bootstrap.yml 配置，再加载 application.yml 配置。所以需要将 config server 配置移到 bootstrap.yml 中<br><img src="/images/spring-cloud/config/config-client.png" alt="Config client default fetch server"></p><p><strong><em>bootstrap.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span>  <span class="comment"># 代表请求 git 哪个分支，默认 master</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:9090</span> <span class="comment"># config server 地址</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config-simple</span> <span class="comment"># 获取哪个名称的远程文件，可以有多个，英文逗号隔开</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span> <span class="comment"># 代表哪个分支</span></span><br></pre></td></tr></table></figure></p><p><strong><em>application.yml</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-config-simple-client</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9091</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/spring-cloud/config/config-client-remote.png" alt="config client remote server"></p><p>访问 <a href="http://localhost:9091/get-config-info" target="_blank" rel="noopener">http://localhost:9091/get-config-info</a><br><img src="/images/spring-cloud/config/get-config-info.png" alt="get config info"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud Config 是 Spring Cloud 微服务体系中的配置中心，是微服务中不可或缺的一部分，其能够很好的将程序中配置日益增多的各种功能的开关、参数的配置、服务器的地址等配置修改后实时生效、灰度发布，分环境、分集群管理配置等进行全面的集中化管理，有利于系统的配置管理、维护。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="CloudConfig" scheme="https://www.laiyy.top/tags/CloudConfig/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（26） --- Zuul(七) &lt;BR&gt; Zuul 优化、Zuul 工作原理</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-26.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-26.html</id>
    <published>2019-02-25T08:45:46.000Z</published>
    <updated>2019-02-25T08:45:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Zuul 作为一个网关中间件，需要应付各种复杂场景，整合的组件非常繁杂。在受益于其丰富的功能时，也需要面对很多问题。如：与上层负载均衡器(Nginx等)、性能、调优等。</p><a id="more"></a><h1 id="Zuul-应用优化"><a href="#Zuul-应用优化" class="headerlink" title="Zuul 应用优化"></a>Zuul 应用优化</h1><p>Zuul 是建立在 Servlet 上的同步阻塞架构，所有在处理逻辑上面是和线程密不可分，每一次请求都需要在线程池获取一个线程来维护 I/O 操作，路由转发的时候又需要从 http 客户端获取线程来维持连接，这样会导致一个组件占用两个线程资源的情况。所以在 Zuul 的使用中，对这部分的优化很有必要。</p><p>Zuul 的优化分为以下几个类型：</p><ul><li>容器优化：内置容器 tomcat 与 undertow 的比较与参数设置</li><li>组件优化：内部集成的组件优化，如 Hystrix 线程隔离、Ribbon、HttpClient、OkHttp 选择等</li><li>JVM 参数优化：适用于网关应用的 JVM 参数建议</li><li>内部优化：内部原生参数，内部源码，重写等</li></ul><h2 id="容器优化"><a href="#容器优化" class="headerlink" title="容器优化"></a>容器优化</h2><p>把 tomcat 替换为 undertow。<code>undertow</code> 翻译为“暗流”，是一个轻量级、高性能容器。<code>undertow</code> 提供阻塞或基于 XNIO 的非阻塞机制，包大小不足 1M，内嵌模式运行时的堆内存占用只有 4M。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  undertow:</span></span><br><span class="line"><span class="attr">    io-threads:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    worker-threads:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">    direct-buffers:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    buffer-size:</span> <span class="number">1024</span> <span class="comment"># 字节数</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">配置项</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">server.undertow.io-threads</td><td style="text-align:center"><code>Math.max(Runtime.getRuntime().availableProcessors(), 2)</code></td><td style="text-align:center">设置 IO 线程数，它主要执行非阻塞的任务，它们负责多个连接，默认设置每个 CPU 核心有一个线程。不要设置太大，否则启动项目会报错：打开文件数过多</td></tr><tr><td style="text-align:center">server.undertow.worker-threads</td><td style="text-align:center">io-threads * 8</td><td style="text-align:center">阻塞任务线程数，当执行类型 Servlet 请求阻塞 IO 操作，undertow 会从这个线程池中取得线程。值设置取决于系统线程执行任务的阻塞系统，默认是 IO 线程数 * 8</td></tr><tr><td style="text-align:center">server.undertow.direct-buffers</td><td style="text-align:center">取决于 JVM 最大可用内存大小<code>Runtime.getRuntime().maxMemory()</code>，小于 64MB 默认为 false，其余默认为 true</td><td style="text-align:center">是否分配直接内存（NIO 直接分配的堆外内存</td></tr><tr><td style="text-align:center">server.undertow.buffer-size</td><td style="text-align:center">最大可用内存 &lt;64MB：512 字节；64MB&lt; 最大可用内存 &lt;128MB：1024 字节；128MB &lt; 最大可用内存：1024*16 - 20 字节</td><td style="text-align:center">每块 buffer 的空间大小，空间越小利用越充分，设置太大会影响其他应用</td></tr><tr><td style="text-align:center">server.undertow.buffers-per-region</td><td style="text-align:center">最大可用内存 &lt;128MB：10；128MB &lt; 最大可用内存：20</td><td style="text-align:center">每个区域分配的 buffer 数量，pool 大小是 buffer-size * buffer-per-region</td></tr></tbody></table><h2 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h2><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>在 Zuul 中默认集成了 Hystrix 熔断器，使得网关应用具有弹性、容错的能力。但是如果使用默认配置，可能会遇到问题。如：第一次请求失败。这是因为第一次请求的时候，zuul 内部需要初始化很多信息，十分耗时。而 hystrix 默认超时时间是一秒，可能会不够。</p><p>解决方式：</p><ul><li><p>加大超时时间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr"> command:</span></span><br><span class="line"><span class="attr">   default:</span> </span><br><span class="line"><span class="attr">     execution:</span></span><br><span class="line"><span class="attr">       isolation:</span></span><br><span class="line"><span class="attr">         thread:</span></span><br><span class="line"><span class="attr">           timeoutInMilliseconds:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li><li><p>禁用 hystrix 超时</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr"> command:</span></span><br><span class="line"><span class="attr">   default:</span> </span><br><span class="line"><span class="attr">     execution:</span></span><br><span class="line"><span class="attr">       timeout:</span></span><br><span class="line"><span class="attr">         enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><p>Zuul 中关于 Hystrix 的配置还有一个很重要的点：<code>Hystrix 线程隔离策略</code>。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">线程池模式(THREAD)</th><th style="text-align:center">信号量模式(SEMAPHORE)</th></tr></thead><tbody><tr><td style="text-align:center">官方推荐</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">线程</td><td style="text-align:center">与请求线程分离</td><td style="text-align:center">与请求线程公用</td></tr><tr><td style="text-align:center">开销</td><td style="text-align:center">上下文切换频繁，较大</td><td style="text-align:center">较小</td></tr><tr><td style="text-align:center">异步</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">应对并发量</td><td style="text-align:center">大</td><td style="text-align:center">小</td></tr><tr><td style="text-align:center">适用场景</td><td style="text-align:center">外网交互</td><td style="text-align:center">内网交互</td></tr></tbody></table><p>如果应用需要与外网交互，由于网络开销比较大、请求比较耗时，选用线程隔离，可以保证有剩余容器（tomcat 等）线程可用，不会由于外部原因使线程一直在阻塞或等待状态，可以快速返回失败<br>如果应用不需要与外网交互，并且体量较大，使用信号量隔离，这类应用响应通常非常快，不会占用容器线程太长时间，使用信号量线程上下文就会成为一个瓶颈，可以减少线程切换的开销，提高应用运转的效率，也可以气到对请求进行全局限流的作用。</p><h3 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对第一次请求的发我的重试次数</span></span><br><span class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 要重试的下一个服务的最大数量（不包括第一个服务）</span></span><br><span class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>ConnectTimeout</code>、<code>ReadTimeout</code> 是当前 HTTP 客户端使用 HttpClient 的时候生效的，这个超时时间最终会被设置到 HttpClient 中。在设置的时候要结合 Hystrix 超时时间综合考虑。设置太小会导致请求失败，设置太大会导致 Hystrix 熔断控制变差。</p><h2 id="JVM-参数优化"><a href="#JVM-参数优化" class="headerlink" title="JVM 参数优化"></a>JVM 参数优化</h2><p>根据实际情况，调整 JVM 参数</p><h2 id="内有优化"><a href="#内有优化" class="headerlink" title="内有优化"></a>内有优化</h2><p>在官方文档中，zuul 部分将 <code>zuul.max.host.coonnections</code> 属性拆分成了 <code>zuul.host.maxTotalConnections</code>、<code>zuul.host.maxPerRouteConnections</code>，默认值分别为 200、20。<br>需要注意：这个配置只在使用 HttpClient 时有效，使用 OkHttp 无效。</p><p>zuul 中还有一个超时时间，使用 serviceId 映射与 url 映射的设置是不一样的，如果使用 serviceId 映射，<code>ribbon.ReadTimeout</code> 与 <code>ribbon.SocketTimeout</code> 生效；如果使用 url 映射，<code>zuul.host.connect-timeout-millis</code> 与 <code>zuul.host.socket-timeout-millis</code> 生效</p><hr><h1 id="Zuul-原理、核心"><a href="#Zuul-原理、核心" class="headerlink" title="Zuul 原理、核心"></a>Zuul 原理、核心</h1><p>zuul 官方提供了一张架构图，很好的描述了 Zuul 工作原理</p><p><img src="/images/spring-cloud/zuul/zuul-framework.png" alt="Zuul 架构图"></p><p>Zuul Servlet 通过 RequestContext 通关着由许多 Filter 组成的核心组件，所有操作都与 Filter 息息相关。请求、ZuulServlet、Filter 共同构建器 Zuul 的运行时声明周期</p><p><img src="/images/spring-cloud/zuul/zuul-life-cycle-2.png" alt="zuul life cycle"></p><p>Zuul 的请求来自于 DispatcherServlet，然后交给 ZuulHandlerMapping 处理初始化得来的路由定位器<code>RouteLocator</code>，为后续的请求分发做好准备，同时整合了基于事件从服务中心拉取服务列表的机制；<br>进入 ZuulController，主要职责是初始化 ZuulServlet 以及集成 ServletWrappingController，通过重写 handleRequest 方法来将 ZuulServlet 引入声明周期，之后所有的请求都会经过 ZuulServlet；<br>当请求进入 ZuulServlet 之后，第一次调用会初始化 ZuulRunner，非第一次调用就按照 Filter 链的 order 顺序执行；<br>ZuulRunner 中将请求和响应初始化为 RequestContext，包装成 FilterProcessor 转换为为调用 preRoute、route、postRoute、error 方法；<br>最后再 Filter 链中经过种种变换，得到预期结果。</p><h2 id="EnableZuulProxy、EnableZuulServer"><a href="#EnableZuulProxy、EnableZuulServer" class="headerlink" title="EnableZuulProxy、EnableZuulServer"></a>EnableZuulProxy、EnableZuulServer</h2><p>对比 <code>EnableZuulProxy</code>、<code>EnableZuulServer</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(ZuulProxyMarkerConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableZuulProxy &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;ZuulServerMarkerConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableZuulServer &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个注解的区别在于 <code>@Import</code> 中的配置类不一样。查看两个配置类的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Responsible for adding in a marker bean to trigger activation of </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulProxyAutoConfiguration&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyMarkerConfiguration</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Marker <span class="title">zuulProxyMarkerBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Responsible for adding in a marker bean to trigger activation of </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulServerAutoConfiguration&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Biju Kunjummen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerMarkerConfiguration</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Marker <span class="title">zuulServerMarkerBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这两个配置类的源码一致，区别在于类的注释上 <code>@link</code> 指向的自动装配类不一样，<code>ZuulProxyMarkerConfiguration</code> 对应的是 <code>ZuulProxyAutoConfiguration</code>；<code>ZuulServerMarkerConfiguration</code> 对应的是 <code>ZuulServerAutoConfiguration</code></p><p>查看 <code>ZuulProxyAutoConfiguration</code> 和 <code>ZuulServerAutoConfiguration</code> 的类注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; RibbonCommandFactoryConfiguration.RestClientRibbonConfiguration.class,</span><br><span class="line">RibbonCommandFactoryConfiguration.OkHttpRibbonConfiguration.class,</span><br><span class="line">RibbonCommandFactoryConfiguration.HttpClientRibbonConfiguration.class,</span><br><span class="line">HttpClientConfiguration.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulProxyMarkerConfiguration.Marker.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulProxyAutoConfiguration</span> <span class="keyword">extends</span> <span class="title">ZuulServerAutoConfiguratio</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;ZuulServlet.class, ZuulServletFilter.class&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，这两个类是通过 <code>ZuulServerMarkerConfiguration</code>、<code>ZuulProxyMarkerConfiguration</code> 中 Marker 类是否存在，当做是否进行自动装配的开关。<br>对比两个 <code>AutoCOnfiguration</code> 的具体源码实现，经过对比，可以分析出：<br><code>ZuulServerAutoConfiguration</code> 的功能是：</p><ul><li>初始化配置加载器</li><li>初始化路由定位器</li><li>初始化路由映射器</li><li>初始化配置刷新监听器</li><li>初始化 ZuulServlet 加载器</li><li>初始化 ZuulController</li><li>初始化 Filter 执行解析器</li><li>初始化部分 Filter</li><li>初始化 Metrix 监控</li></ul><p><code>ZuulProxyAutoConfiguration</code> 的功能是：</p><ul><li>初始化服务注册、发现监听器</li><li>初始化服务列表监听器</li><li>初始化 zuul 自定义的 endpoint</li><li>初始化一些 <code>ZuulServerAutoConfiguration</code> 中没有的 filter’</li><li>引入 http 客户端的两种方式：HttpClient、OkHttp</li></ul><h2 id="Filter-链"><a href="#Filter-链" class="headerlink" title="Filter 链"></a>Filter 链</h2><h3 id="filter-装载"><a href="#filter-装载" class="headerlink" title="filter 装载"></a>filter 装载</h3><p>zuul 中的 Filter 必须经过初始化装载，才能在请求中发挥作用，其过程如下<br><img src="/images/spring-cloud/zuul/zuul-filter-life-cycle.png" alt="zuul-filter-life-cycle"></p><h4 id="zuul-filter-连初始化过程"><a href="#zuul-filter-连初始化过程" class="headerlink" title="zuul filter 连初始化过程"></a>zuul filter 连初始化过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilterConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ZuulFilter&gt; filters;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZuulFilterInitializer <span class="title">zuulFilterInitializer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      CounterFactory counterFactory, TracerFactory tracerFactory)</span> </span>&#123;</span><br><span class="line">      FilterLoader filterLoader = FilterLoader.getInstance();</span><br><span class="line">      FilterRegistry filterRegistry = FilterRegistry.instance();</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ZuulFilterInitializer(<span class="keyword">this</span>.filters, counterFactory, tracerFactory, filterLoader, filterRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulFilterInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// @PostConstruct：表明在 Bean 初始化之前，就把 Filter 的信息保存到 FilterRegistry</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"Starting filter initializer"</span>);</span><br><span class="line"></span><br><span class="line">TracerFactory.initialize(tracerFactory);</span><br><span class="line">CounterFactory.initialize(counterFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, ZuulFilter&gt; entry : <span class="keyword">this</span>.filters.entrySet()) &#123;</span><br><span class="line">filterRegistry.put(entry.getKey(), entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @PreDestroy：表明在 bean 销毁之前清空 filterRegistry 与 FilterLoader。filterloader 可以通过 filter 名、filter class、filter 类型来查询得到相应的 filter</span></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.info(<span class="string">"Stopping filter initializer"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, ZuulFilter&gt; entry : <span class="keyword">this</span>.filters.entrySet()) &#123;</span><br><span class="line">filterRegistry.remove(entry.getKey());</span><br><span class="line">&#125;</span><br><span class="line">clearLoaderCache();</span><br><span class="line"></span><br><span class="line">TracerFactory.initialize(<span class="keyword">null</span>);</span><br><span class="line">CounterFactory.initialize(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearLoaderCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Field field = ReflectionUtils.findField(FilterLoader.class, <span class="string">"hashFiltersByType"</span>);</span><br><span class="line">ReflectionUtils.makeAccessible(field);</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">Map cache = (Map) ReflectionUtils.getField(field, filterLoader);</span><br><span class="line">cache.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="zuul-filter-请求调用过"><a href="#zuul-filter-请求调用过" class="headerlink" title="zuul filter 请求调用过"></a>zuul filter 请求调用过</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServletFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZuulRunner zuulRunner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String bufferReqsStr = filterConfig.getInitParameter(<span class="string">"buffer-requests"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> bufferReqs = bufferReqsStr != <span class="keyword">null</span> &amp;&amp; bufferReqsStr.equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        zuulRunner = <span class="keyword">new</span> ZuulRunner(bufferReqs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRouting();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRouting();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Only forward onto to the chain if a zuul response is not being sent</span></span><br><span class="line">            <span class="keyword">if</span> (!RequestContext.getCurrentContext().sendZuulResponse()) &#123;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                routing();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRouting();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postRouting();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(<span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_FROM_FILTER_"</span> + e.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postRouting</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        zuulRunner.postRoute();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRunn</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        FilterProcessor.getInstance().postRoute();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRoute</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runFilters(<span class="string">"post"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ZuulException(e, <span class="number">500</span>, <span class="string">"UNCAUGHT_EXCEPTION_IN_POST_FILTER_"</span> + e.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">runFilters</span><span class="params">(String sType)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (RequestContext.getCurrentContext().debugRouting()) &#123;</span><br><span class="line">            Debug.addRoutingDebug(<span class="string">"Invoking &#123;"</span> + sType + <span class="string">"&#125; type filters"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> bResult = <span class="keyword">false</span>;</span><br><span class="line">        List&lt;ZuulFilter&gt; list = FilterLoader.getInstance().getFiltersByType(sType);</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                ZuulFilter zuulFilter = list.get(i);</span><br><span class="line">                Object result = processZuulFilter(zuulFilter);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">                    bResult |= ((Boolean) result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心路由的实现"><a href="#核心路由的实现" class="headerlink" title="核心路由的实现"></a>核心路由的实现</h2><p>Zuul 的路由有一个顶级接口 <code>RouteLocator</code>。所有关于路由的功能都是由此而来，其中定义了三个方法：获取忽略的 path 集合、获取路由列表、根据 path 获取路由信息。<br><img src="/images/spring-cloud/zuul/route-locator.png" alt="Route 类图"></p><p><code>SimpleRouteLocator</code> 是一个基本实现，主要功能是对 ZuulServer 的配置文件中路由规则的维护，实现了 Ordered 接口，可以对定位器优先级进行设置。<br>Spring 是一个大量使用策略模式的框架，在策略模式下，接口的实现类有一个优先级问题，Spring 通过 Ordered 接口实现优先级。</p><p><code>ZuulProperties$ZuulRoute</code> 类就是维护路由规则的类，具体属性如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRoute</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String serviceId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> stripPrefix = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Boolean retryable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; sensitiveHeaders = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> customSensitiveHeaders = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>RefreshableRouteLocator</code> 扩展了 RouteLocator 接口，在 ZuulHandlerMapping 中才实质性生效：凡是实现了 RefreshableRouteLocator，都会被时间监听器所刷新：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDirty</span><span class="params">(<span class="keyword">boolean</span> dirty)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dirty = dirty;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.routeLocator <span class="keyword">instanceof</span> RefreshableRouteLocator) &#123;</span><br><span class="line">((RefreshableRouteLocator) <span class="keyword">this</span>.routeLocator).refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>DiscoveryClientRouteLocator</code> 实现了 RefreshableRouteLocator，扩展了 SimpleRouteLocator。其作用是整合配置文件与注册中心的路由信息。</p><p><code>CompositeRouteLocator</code>，在 <code>ZuulServerAutoConfiguration</code> 中配置加载时，有一个很重要的注解：<code>@Primary</code>，表示所有的 <code>RouteLocator</code> 中，优先加载它，也就是说，所有的定位器都要在这里装配，可以看做其他路由定位器的处理器。<br>zuul 通过它来将请求域路由规则进行关联，这个操作在 <code>ZuulHandlerMapping</code> 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ZuulController zuul;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ZuulHandlerMapping</span><span class="params">(RouteLocator routeLocator, ZuulController zuul)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.routeLocator = routeLocator;</span><br><span class="line"><span class="keyword">this</span>.zuul = zuul;</span><br><span class="line">setOrder(-<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">lookupHandler</span><span class="params">(String urlPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.errorController != <span class="keyword">null</span> &amp;&amp; urlPath.equals(<span class="keyword">this</span>.errorController.getErrorPath())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isIgnoredPath(urlPath, <span class="keyword">this</span>.routeLocator.getIgnoredPaths())) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line"><span class="keyword">if</span> (ctx.containsKey(<span class="string">"forward.to"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.dirty) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.dirty) &#123;</span><br><span class="line">registerHandlers();</span><br><span class="line"><span class="keyword">this</span>.dirty = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.lookupHandler(urlPath, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerHandlers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection&lt;Route&gt; routes = <span class="keyword">this</span>.routeLocator.getRoutes();</span><br><span class="line"><span class="keyword">if</span> (routes.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.logger.warn(<span class="string">"No routes found from RouteLocator"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Route route : routes) &#123;</span><br><span class="line">registerHandler(route.getFullPath(), <span class="keyword">this</span>.zuul);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ZuulHandlerMapping 将映射规则交给 <code>ZuulController</code> 处理，而 ZuulController 又到 ZuulServlet 中处理，最后到达异域或源服务发送 http 请求的 route 类型的 filter 中，默认有三种发送 http 请求的 filter</p><ul><li>RibbonRoutingFilter：优先级 10，使用 Ribbon、Hystrix、嵌入式 HTTP 客户端发送请求</li><li>SimpleHostRoutingFilter：优先级 100，室友 Apache HttpClient 发送请求</li><li>SendForwardFilter：优先级 500，使用 Servlet 发送请求</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zuul 作为一个网关中间件，需要应付各种复杂场景，整合的组件非常繁杂。在受益于其丰富的功能时，也需要面对很多问题。如：与上层负载均衡器(Nginx等)、性能、调优等。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（25） --- Zuul(六) &lt;BR&gt; Zuul 文件上传、使用技巧</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-25.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-25.html</id>
    <published>2019-02-21T08:09:28.000Z</published>
    <updated>2019-02-21T08:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 <code>https://www.laiyy.top/java/2019/01-24/spring-cloud-10.html</code> 介绍了使用 Feign 做文件上传的操作，使用 Zuul 做文件上传，实际上是在 feign 调用之外增加了一层 zuul 路由。</p><a id="more"></a><h1 id="Zuul-文件上传"><a href="#Zuul-文件上传" class="headerlink" title="Zuul 文件上传"></a>Zuul 文件上传</h1><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-file-upload" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-file-upload</a></em></strong></p><h2 id="Zuul-Server"><a href="#Zuul-Server" class="headerlink" title="Zuul Server"></a>Zuul Server</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-zuul-file-upload</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 使用 http multipart 上传</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">100</span><span class="string">MB</span> <span class="comment"># 文件最大大小，默认 1M，不配置则为 -1</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">100</span><span class="string">MB</span> <span class="comment"># 请求最大大小，默认 10M，不配置为 -1</span></span><br><span class="line"><span class="attr">      file-size-threshold:</span> <span class="number">1</span><span class="string">MB</span> <span class="comment"># 当上传文件达到 1NB 时进行磁盘写入</span></span><br><span class="line"><span class="attr">      location:</span> <span class="string">/</span> <span class="comment"># 上传的临时目录</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">30000</span> <span class="comment"># 超时时间 30 秒，防止大文件上传出现超时</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ConnectionTimeout:</span> <span class="number">3000</span> <span class="comment"># Ribbon 链接超时时间</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">30000</span>    <span class="comment"># Ribbon 读超时时间</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulFileUploadApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulFileUploadApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>)</span> MultipartFile file) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">        File fileToSave = <span class="keyword">new</span> File(file.getOriginalFilename());</span><br><span class="line">        FileCopyUtils.copy(bytes, fileToSave);</span><br><span class="line">        <span class="keyword">return</span> fileToSave.getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/images/spring-cloud/zuul/zuul-file-upload.png" alt="Zuul file upload"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果使用的 cloud 版本是 Finchley 之前的版本，在上传中文名称的文件时，会出现乱码的情况。解决办法：在调用接口上加上 <code>/zuul</code> 根节点。如： <a href="http://localhost:5555/zuul/upload" target="_blank" rel="noopener">http://localhost:5555/zuul/upload</a></p><p>需要注意的是，在 @RequestMapping、@PostMapping 上不能加 <code>/zuul</code>，这个节点是 zuul 自带的。也就是说，即是在项目中没有 <code>/zuul</code> 开头的映射，使用 zuul 后都会加上 <code>/zuul</code> 根映射。</p><hr><h1 id="Zuul-使用技巧"><a href="#Zuul-使用技巧" class="headerlink" title="Zuul 使用技巧"></a>Zuul 使用技巧</h1><h2 id="Zuul-饥饿加载"><a href="#Zuul-饥饿加载" class="headerlink" title="Zuul 饥饿加载"></a>Zuul 饥饿加载</h2><p>Zuul 内部使用 Ribbon 远程调用，根据 Ribbon 的特性，第一次调用会去注册中心获取注册表，初始化 Ribbon 负载信息，这是一种懒加载策略，但是这个过程很耗时。为了避免这个问题，可以使用饥饿加载</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    eager-load:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="修改请求体"><a href="#修改请求体" class="headerlink" title="修改请求体"></a>修改请求体</h2><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-change-param" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-change-param</a></em></strong></p><h3 id="zuul-server"><a href="#zuul-server" class="headerlink" title="zuul server"></a>zuul server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeParamZuulFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; requestQueryParams = currentContext.getRequestQueryParams();</span><br><span class="line">        <span class="keyword">if</span> (requestQueryParams == <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestQueryParams = Maps.newHashMap();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;String&gt; arrayList = Lists.newArrayList();</span><br><span class="line">        <span class="comment">// 增加一个参数</span></span><br><span class="line">        arrayList.add(<span class="string">"1111111"</span>);</span><br><span class="line">        requestQueryParams.put(<span class="string">"test"</span>, arrayList);</span><br><span class="line">        currentContext.setRequestQueryParams(requestQueryParams);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/change-params"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">modifyRequestEntity</span> <span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; bodyParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration enu = request.getParameterNames();  </span><br><span class="line">        <span class="keyword">while</span> (enu.hasMoreElements()) &#123;  </span><br><span class="line">        String paraName = (String)enu.nextElement();  </span><br><span class="line">        bodyParams.put(paraName, request.getParameter(paraName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bodyParams;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>访问 <a href="http://localhost:5555/provider/change-params" target="_blank" rel="noopener">http://localhost:5555/provider/change-params</a></p><p><img src="/images/spring-cloud/zuul/zuul-change-params.png" alt="change params"></p><h2 id="zuul-中使用-OkHttp"><a href="#zuul-中使用-OkHttp" class="headerlink" title="zuul 中使用 OkHttp"></a>zuul 中使用 OkHttp</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  okhttp:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="zuul-重试"><a href="#zuul-重试" class="headerlink" title="zuul 重试"></a>zuul 重试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- retry --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    loadbalancer:</span></span><br><span class="line"><span class="attr">      retry:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  retryable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">  MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对第一次请求的服务的重试次数</span></span><br><span class="line"><span class="attr">  MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 要重试的下一个服务的最大数量（不包括第一个服务）</span></span><br><span class="line"><span class="attr">  OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="header-传递"><a href="#header-传递" class="headerlink" title="header 传递"></a>header 传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddHeaderZuulFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        currentContext.addZuulRequestHeader(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下游 <code>spring-cloud-change-param-provider</code> 中查看 header 传递<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/change-params"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">modifyRequestEntity</span> <span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; bodyParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration enu = request.getParameterNames();  </span><br><span class="line">        <span class="keyword">while</span> (enu.hasMoreElements()) &#123;  </span><br><span class="line">        String paraName = (String)enu.nextElement();  </span><br><span class="line">        bodyParams.put(paraName, request.getParameter(paraName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String header = headerNames.nextElement();</span><br><span class="line">            String value = request.getHeader(header);</span><br><span class="line">            System.out.println(header + <span class="string">" ---&gt; "</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bodyParams;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:5555/provider/change-params" target="_blank" rel="noopener">http://localhost:5555/provider/change-params</a> ，查看控制台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user-agent ---&gt; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span><br><span class="line">cache-control ---&gt; no-cache</span><br><span class="line">origin ---&gt; chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop</span><br><span class="line">postman-token ---&gt; a99dcd1c-7c76-2d7e-8a4c-fa5c2bdb6222</span><br><span class="line">accept ---&gt; */*</span><br><span class="line">accept-encoding ---&gt; gzip, deflate, br</span><br><span class="line">accept-language ---&gt; zh-CN,zh;q=0.9</span><br><span class="line">x-forwarded-host ---&gt; localhost:5555</span><br><span class="line">x-forwarded-proto ---&gt; http</span><br><span class="line">x-forwarded-prefix ---&gt; /provider</span><br><span class="line">x-forwarded-port ---&gt; 5555</span><br><span class="line">x-forwarded-for ---&gt; 0:0:0:0:0:0:0:1</span><br><span class="line">key ---&gt; value          ---------------------- zuul server 中增加的 header</span><br><span class="line">content-type ---&gt; application/x-www-form-urlencoded;charset=UTF-8</span><br><span class="line">content-length ---&gt; 12</span><br><span class="line">host ---&gt; 10.10.10.141:7070</span><br><span class="line">connection ---&gt; Keep-Alive</span><br></pre></td></tr></table></figure></p><h2 id="Zuul-整合-Swagger"><a href="#Zuul-整合-Swagger" class="headerlink" title="Zuul 整合 Swagger"></a>Zuul 整合 Swagger</h2><h3 id="provider-1"><a href="#provider-1" class="headerlink" title="provider"></a>provider</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2   <span class="comment">// 这个注解必须加，否则解析不到</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudChangeParamProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudChangeParamProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Zuul-Server-1"><a href="#Zuul-Server-1" class="headerlink" title="Zuul Server"></a>Zuul Server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> laiyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/25 15:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">// 这个注解必须加</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Swagger2Configuration</span><span class="params">(ZuulProperties zuulProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zuulProperties = zuulProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"spring cloud swagger 2"</span>)</span><br><span class="line">                .description(<span class="string">"spring cloud 整合 swagger2"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"laiyy"</span>, <span class="string">"laiyy0728@gmail.com"</span>, <span class="string">"laiyy0728@gmail.com"</span>)).version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种配置方式</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwaggerResourcesProvider <span class="title">swaggerResourcesProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">            List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            zuulProperties.getRoutes().values().stream()</span><br><span class="line">                    .forEach(route -&gt; resources.add(createResource(route.getServiceId(), route.getServiceId(), <span class="string">"2.0"</span>)));</span><br><span class="line">            <span class="keyword">return</span> resources;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SwaggerResource <span class="title">createResource</span><span class="params">(String name, String location, String version)</span> </span>&#123;</span><br><span class="line">        SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">        swaggerResource.setName(name);</span><br><span class="line">        swaggerResource.setLocation(<span class="string">"/"</span> + location + <span class="string">"/v2/api-docs"</span>);</span><br><span class="line">        swaggerResource.setSwaggerVersion(version);</span><br><span class="line">        <span class="keyword">return</span> swaggerResource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种配置方式（推荐使用）</span></span><br><span class="line"><span class="comment">//    @Component</span></span><br><span class="line"><span class="comment">//    @Primary</span></span><br><span class="line"><span class="comment">//    public class ZuulSwaggerResourceProvider implements SwaggerResourcesProvider &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        private final RouteLocator routeLocator;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        @Autowired</span></span><br><span class="line"><span class="comment">//        public ZuulSwaggerResourceProvider(RouteLocator routeLocator) &#123;</span></span><br><span class="line"><span class="comment">//            this.routeLocator = routeLocator;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public List&lt;SwaggerResource&gt; get() &#123;</span></span><br><span class="line"><span class="comment">//            List&lt;SwaggerResource&gt; resources = Lists.newArrayList();</span></span><br><span class="line"><span class="comment">//            routeLocator.getRoutes().forEach(route -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                resources.add(createResource(route.getId(), route.getFullPath().replace("**", "v2/api-docs")));</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//            return resources;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        private SwaggerResource createResource(String name, String location) &#123;</span></span><br><span class="line"><span class="comment">//            SwaggerResource swaggerResource = new SwaggerResource();</span></span><br><span class="line"><span class="comment">//            swaggerResource.setName(name);</span></span><br><span class="line"><span class="comment">//            swaggerResource.setLocation(location);</span></span><br><span class="line"><span class="comment">////            swaggerResource.setLocation("/" + location + "/api-docs");</span></span><br><span class="line"><span class="comment">//            swaggerResource.setSwaggerVersion("2.0");</span></span><br><span class="line"><span class="comment">//            return swaggerResource;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>访问 <a href="http://localhost:5555/swagger-ui.html" target="_blank" rel="noopener">http://localhost:5555/swagger-ui.html</a><br><img src="/images/spring-cloud/zuul/zuul-swagger.png" alt="Zuul Swagger"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在 &lt;code&gt;https://www.laiyy.top/java/2019/01-24/spring-cloud-10.html&lt;/code&gt; 介绍了使用 Feign 做文件上传的操作，使用 Zuul 做文件上传，实际上是在 feign 调用之外增加了一层 zuul 路由。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（24） --- Zuul(五) &lt;BR&gt; 动态路由、灰度发布</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-24.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-24.html</id>
    <published>2019-02-20T08:54:01.000Z</published>
    <updated>2019-02-20T08:54:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了动态路由的改造原理、方式后，就可以自实现一个小 demo。可以使用 mysql 作为持久化方式，目的是方面、易于管理。</p><a id="more"></a><h1 id="动态路由实战"><a href="#动态路由实战" class="headerlink" title="动态路由实战"></a>动态路由实战</h1><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-dynamic-route-zuul-server" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-dynamic-route-zuul-server</a></em></strong></p><h2 id="Zuul-Server"><a href="#Zuul-Server" class="headerlink" title="Zuul Server"></a>Zuul Server</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-dynamic-route-zuul-server</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Hongkong</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zuul 路由实体</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"zuul_route"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRouteEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"service_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceId;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"strip_prefix"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stripPrefix = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> retryable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZuulPropertiesDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">ZuulRouteEntity</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"FROM ZuulRouteEntity WHERE enabled = TRUE"</span>)</span><br><span class="line">    <span class="function">List&lt;ZuulRouteEntity&gt; <span class="title">findAllByParams</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicZuulRouteLocator</span> <span class="keyword">extends</span> <span class="title">SimpleRouteLocator</span> <span class="keyword">implements</span> <span class="title">RefreshableRouteLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZuulPropertiesDao zuulPropertiesDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicZuulRouteLocator</span><span class="params">(String servletPath, ZuulProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(servletPath, properties);</span><br><span class="line">        <span class="keyword">this</span>.zuulProperties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        doRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, ZuulProperties.ZuulRoute&gt; locateRoutes() &#123;</span><br><span class="line">        Map&lt;String, ZuulProperties.ZuulRoute&gt; routeMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        routeMap.putAll(<span class="keyword">super</span>.locateRoutes());</span><br><span class="line">        routeMap.putAll(getProperties());</span><br><span class="line">        Map&lt;String, ZuulProperties.ZuulRoute&gt; values = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        routeMap.forEach((path, zuulRoute) -&gt; &#123;</span><br><span class="line">            path = path.startsWith(<span class="string">"/"</span>) ? path : <span class="string">"/"</span> + path;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.zuulProperties.getPrefix())) &#123;</span><br><span class="line">                path = <span class="keyword">this</span>.zuulProperties.getPrefix() + path;</span><br><span class="line">                path = path.startsWith(<span class="string">"/"</span>) ? path : <span class="string">"/"</span> + path;</span><br><span class="line">            &#125;</span><br><span class="line">            values.put(path, zuulRoute);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ZuulProperties.ZuulRoute&gt; getProperties() &#123;</span><br><span class="line">        Map&lt;String, ZuulProperties.ZuulRoute&gt; routeMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        List&lt;ZuulRouteEntity&gt; list = zuulPropertiesDao.findAllByParams();</span><br><span class="line">        list.forEach(entity -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (org.apache.commons.lang.StringUtils.isBlank(entity.getPath())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ZuulProperties.ZuulRoute route = <span class="keyword">new</span> ZuulProperties.ZuulRoute();</span><br><span class="line">            BeanUtils.copyProperties(entity, route);</span><br><span class="line">            route.setId(String.valueOf(entity.getId()));</span><br><span class="line">            routeMap.put(route.getPath(), route);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> routeMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册到 Spring</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicZuulConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZuulProperties zuulProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicZuulConfig</span><span class="params">(ZuulProperties zuulProperties, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zuulProperties = zuulProperties;</span><br><span class="line">        <span class="keyword">this</span>.serverProperties = serverProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DynamicZuulRouteLocator <span class="title">dynamicZuulRouteLocator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicZuulRouteLocator(serverProperties.getServlet().getContextPath(), zuulProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在数据库中增加三条数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springcloud`</span>.<span class="string">`zuul_route`</span> (<span class="string">`id`</span>, <span class="string">`description`</span>, <span class="string">`enabled`</span>, <span class="string">`path`</span>, <span class="string">`retryable`</span>, <span class="string">`service_id`</span>, <span class="string">`strip_prefix`</span>, <span class="string">`url`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'重定向到百度'</span>, <span class="string">'\1'</span>, <span class="string">'/baidu/**'</span>, <span class="string">'\0'</span>, <span class="literal">NULL</span>, <span class="string">'\1'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springcloud`</span>.<span class="string">`zuul_route`</span> (<span class="string">`id`</span>, <span class="string">`description`</span>, <span class="string">`enabled`</span>, <span class="string">`path`</span>, <span class="string">`retryable`</span>, <span class="string">`service_id`</span>, <span class="string">`strip_prefix`</span>, <span class="string">`url`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'url'</span>, <span class="string">'\1'</span>, <span class="string">'/client/**'</span>, <span class="string">'\0'</span>, <span class="literal">NULL</span>, <span class="string">'\1'</span>, <span class="string">'http://localhost:8081'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springcloud`</span>.<span class="string">`zuul_route`</span> (<span class="string">`id`</span>, <span class="string">`description`</span>, <span class="string">`enabled`</span>, <span class="string">`path`</span>, <span class="string">`retryable`</span>, <span class="string">`service_id`</span>, <span class="string">`strip_prefix`</span>, <span class="string">`url`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'serviceId'</span>, <span class="string">'\1'</span>, <span class="string">'/client-1/**'</span>, <span class="string">'\0'</span>, <span class="string">'client-a'</span>, <span class="string">'\1'</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:5555/baidu/get-result" target="_blank" rel="noopener">http://localhost:5555/baidu/get-result</a> 、<a href="http://localhost:5555/client/get-result" target="_blank" rel="noopener">http://localhost:5555/client/get-result</a> 、<a href="http://localhost:5555/client-a/get-result" target="_blank" rel="noopener">http://localhost:5555/client-a/get-result</a><br><img src="/images/spring-cloud/zuul/dynamic-route-baidu.png" alt="重定向百度"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is provider service! this port is: 8081 headers: [user-agent]: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36; [cache-control]: no-cache; [postman-token]: a35929aa-9bcf-f5e4-b79a-0e684b1611ed; [token]: E477CA7B8E7CDCDCE3331742544DE9F1; [content-type]: application/x-www-form-urlencoded;charset=UTF-8; [accept]: */*; [accept-encoding]: gzip, deflate, br; [accept-language]: zh-CN,zh;q=0.9; [x-forwarded-host]: localhost:5555; [x-forwarded-proto]: http; [x-forwarded-prefix]: /client; [x-forwarded-port]: 5555; [x-forwarded-for]: 0:0:0:0:0:0:0:1; [host]: localhost:8081; [connection]: Keep-Alive;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;timestamp&quot;: &quot;2019-02-21T03:15:18.997+0000&quot;,</span><br><span class="line">    &quot;status&quot;: 404,</span><br><span class="line">    &quot;error&quot;: &quot;Not Found&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;No message available&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/client-a/get-result&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可以证明，动态路由配置成功。</p><hr><h1 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h1><p>灰度发布是指在系统迭代新功能时的一种平滑过渡的上线发布方式。灰度发布是在原有的系统基础上，额外增加一个新版本，在这个新版本中，有需要验证的功能修改或添加，使用负载均衡器，引入一小部分流量到新版本应用中，如果这个新版本没有出现差错，再平滑地把线上系统或服务一步步替换成新版本，直至全部替换上线结束。</p><h2 id="灰度发布实现方式"><a href="#灰度发布实现方式" class="headerlink" title="灰度发布实现方式"></a>灰度发布实现方式</h2><p>灰度发布可以使用元数据来实现，元数据有两种</p><ul><li>标准元数据：标准元数据是服务的各种注册信息，如：ip、端口、健康信息、续约信息等，存储于专门为服务开辟的注册表中，用于其他组件取用以实现整个微服务生态</li><li>自定义元数据：自定义元数据是使用 <code>eureka.instance.metadata-map.{key}={value}</code> 配置，其内部实际上是维护了一个 map 来保存子弹元数据信息，可配置再远端服务，随服务一并注册保存在 Eureka 注册表，对微服务生态没有影响。</li></ul><h2 id="灰度发布实战"><a href="#灰度发布实战" class="headerlink" title="灰度发布实战"></a>灰度发布实战</h2><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-metadata" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-metadata</a></em></strong></p><h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-metadata-provider-service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7070</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">node1</span>   <span class="comment"># 设定 profile，可以使用 mvn spring-boor:run -Dspring.profiles.active=node1 启动，或者在启动类使用   SpringApplication.run(SpringCloudMetadataProviderServiceApplication.class, "--spring.profiles.active=node1"); 启动</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      host-mark:</span> <span class="string">running</span> <span class="comment"># 设定当前节点的 metadata，zuul server 使用这个标注来进行路由转发</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">node2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7071</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      host-mark:</span> <span class="string">running</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">node3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7072</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      host-mark:</span> <span class="string">gray</span>  <span class="comment"># 当前节点是灰度节点</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudMetadataProviderServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudMetadataProviderServiceApplication.class, args);</span><br><span class="line">        <span class="comment">// SpringApplication.run(SpringCloudMetadataProviderServiceApplication.class, "--Dspring.profiles.active=node1"); // 非 maven 启动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get-result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"metadata provider service result, port: "</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Zuul-Server-1"><a href="#Zuul-Server-1" class="headerlink" title="Zuul Server"></a>Zuul Server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实现通过 metadata 进行灰度路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jmnarloch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-discovery-filter-spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-metadata-zuul-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defautlZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-metadata-provider-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-metadata-provider-service</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现灰度的 Filter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrayFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="keyword">return</span> !context.containsKey(FilterConstants.FORWARD_TO_KEY) &amp;&amp; !context.containsKey(FilterConstants.SERVICE_ID_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        HttpServletRequest request = RequestContext.getCurrentContext().getRequest();</span><br><span class="line">        String grayMark = request.getHeader(<span class="string">"gray_mark"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(grayMark) &amp;&amp; StringUtils.equals(<span class="string">"enable"</span>, grayMark)) &#123;</span><br><span class="line">            RibbonFilterContextHolder.getCurrentContext().add(<span class="string">"host-mark"</span>, <span class="string">"gray"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            RibbonFilterContextHolder.getCurrentContext().add(<span class="string">"host-mark"</span>, <span class="string">"running"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudMetadataZuulServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudMetadataZuulServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GrayFilter <span class="title">grayFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GrayFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>正常访问： <a href="http://localhost:5555/provider/get-result" target="_blank" rel="noopener">http://localhost:5555/provider/get-result</a> ，查看返回值， port 在 7070 和 7071 之间轮询。<br><img src="/images/spring-cloud/zuul/gray-running.png" alt="gray running"></p><p>启用 gray_mark header，再次访问，发现 port 始终都是 7072，由此验证灰度成功<br><img src="/images/spring-cloud/zuul/gray.png" alt="gray"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了动态路由的改造原理、方式后，就可以自实现一个小 demo。可以使用 mysql 作为持久化方式，目的是方面、易于管理。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（23） --- Zuul(四) &lt;BR&gt;限流、动态路由概念</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-23.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-23.html</id>
    <published>2019-02-19T08:40:14.000Z</published>
    <updated>2019-02-19T08:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前利用 Hystrix，通过熔断器实现了<code>通过某个阈值来对异常流量进行降级处理</code>。除了对异常流量进行降级之外，还可以通过 <code>流量排队</code>、<code>限流</code>、<code>分流</code>等操作，防止系统出错。</p><a id="more"></a><h1 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h1><p>限流算法一般分为 <code>漏桶</code>、<code>令牌桶</code> 两种。</p><h2 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h2><p>漏桶的圆形是一个底部有漏孔的桶，桶的上方有一个入水口，水不断流进桶内，桶下方的漏孔会以一个相对恒定的速度漏水，在<code>入大于出</code>的情况下，桶在一段时间内就会被装满，这时候多余的水就会溢出；而在<code>入小于出</code>的情况下，漏桶起不到任何作用。</p><p>当请求或者具有一定体量的数据进入系统时，在漏桶作用下，流量被整形，不能满足要求的部分被削减掉，漏桶算法能强制限定流量速度。溢出的流量可以被再次利用起来，并非完全丢弃，可以把溢出的流量收集到一个队列中，做流量排队，尽量合理利用所有资。<br><img src="/images/spring-cloud/zuul/leaky-bucket.png" alt="leaky-bucket"></p><h2 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h2><p>令牌桶与漏桶的区别是，桶里放的是令牌而不是流量，令牌以一个恒定的速度被加入桶内，可以积压，可以溢出。当流量涌入时，量化请求用于获取令牌，如果取到令牌则方形，同时桶内丢掉这个令牌；如果取不到令牌，则请求被丢弃。<br>由于桶内可以存一定量的令牌，那么就可能会解决一定程度的流量突发。这个也是漏桶与令牌桶的适用场景不同之处。</p><p><img src="/images/spring-cloud/zuul/token-bucket.png" alt="token-bucket"></p><hr><h1 id="限流实例"><a href="#限流实例" class="headerlink" title="限流实例"></a>限流实例</h1><p>在 Zuul 中实现限流，最简单的方式是使用 Filter 加上相关的限流算法，其中可能会考虑到 Zuul 多节点部署。因为算法的原因，这是需要一个 K/V 存储工具（Redis等）。</p><p><a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener"><code>spring-cloud-zuul-ratelimit</code></a> 是一个针对 Zuul 的限流库<br>限流粒度的策略：</p><ul><li>user：认证用户名或匿名，针对某用户粒度进行限流</li><li>origin：客户机 ip，针对请求客户机 ip 粒度进行限流</li><li>url：特定 url，针对某个请求 url 粒度进行限流</li><li>serviceId：特定服务，针对某个服务 id 粒度进行限流</li></ul><p>限流粒度临时变量存储方式：</p><ul><li>IN_MEMORY：基于本地内存，底层是 ConcurrentHashMap</li><li>REDIS：基于 Redis K/V 存储</li><li>CONSUL：基于 Consul K/V 存储</li><li>JPA：基于 SpringData JPA，数据库存储</li><li>BUKET4J：使用 Java 编写的基于令牌桶算法的限流库，四种模：<code>JCache</code>、<code>Hazelcast</code>、<code>Apache Ignite</code>、<code>Inifinispan</code>，后面三种支持异步</li></ul><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-ratelimit" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-ratelimit</a></em></strong></p><h2 id="Zuul-Server"><a href="#Zuul-Server" class="headerlink" title="Zuul Server"></a>Zuul Server</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.marcosbarbero.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-zuul-ratelimit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-ratelimit-zuul-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-ratelimit-provider-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-ratelimit-provider-service</span></span><br><span class="line"><span class="attr">  ratelimit:</span></span><br><span class="line"><span class="attr">    key-prefix:</span> <span class="string">springcloud</span> <span class="comment"># 按粒度拆分的临时变量 key 的前缀</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment"># 启用开关</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">in_memory</span> <span class="comment"># key 的存储类型，默认是 in_memory</span></span><br><span class="line"><span class="attr">    behind-proxy:</span> <span class="literal">true</span> <span class="comment"># 表示代理之后</span></span><br><span class="line"><span class="attr">    default-policy:</span></span><br><span class="line"><span class="attr">      limit:</span> <span class="number">2</span> <span class="comment"># 在一个单位时间内的请求数量</span></span><br><span class="line"><span class="attr">      quota:</span> <span class="number">1</span> <span class="comment"># 在一个单位时间内的请求时间限制</span></span><br><span class="line"><span class="attr">      refresh-interval:</span> <span class="number">3</span> <span class="comment"># 单位时间窗口</span></span><br><span class="line"><span class="attr">      type:</span> </span><br><span class="line"><span class="bullet">        -</span> <span class="string">user</span> <span class="comment"># 可指定用户粒度</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">origin</span> <span class="comment"># 可指定客户端地址粒度</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">url</span> <span class="comment"># 可指定 url 粒度</span></span><br></pre></td></tr></table></figure><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-ratelimit-provider-service</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7070</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>快速访问几次 <a href="http://localhost:5555/provider/get-result" target="_blank" rel="noopener">http://localhost:5555/provider/get-result</a> ，返回值如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-02-20T06:52:51.220+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">429</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Too Many Requests"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"429"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制台打印异常如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.netflix.zuul.exception.ZuulException: 429</span><br><span class="line">at com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.support.RateLimitExceededException.&lt;init&gt;(RateLimitExceededException.java:13) ~[spring-cloud-zuul-ratelimit-core-2.0.6.RELEASE.jar:2.0.6.RELEASE]</span><br><span class="line">at com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.filters.RateLimitPreFilter.lambda$run$0(RateLimitPreFilter.java:106) ~[spring-cloud-zuul-ratelimit-core-2.0.6.RELEASE.jar:2.0.6.RELEASE]</span><br><span class="line">at java.util.ArrayList.forEach(ArrayList.java:1257) ~[na:1.8.0_171]</span><br><span class="line">at com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.filters.RateLimitPreFilter.run(RateLimitPreFilter.java:79) ~[spring-cloud-zuul-ratelimit-core-2.0.6.RELEASE.jar:2.0.6.RELEASE]</span><br><span class="line">at com.netflix.zuul.ZuulFilter.runFilter(ZuulFilter.java:117) ~[zuul-core-1.3.1.jar:1.3.1]</span><br><span class="line">at com.netflix.zuul.FilterProcessor.processZuulFilter(FilterProcessor.java:193) ~[zuul-core-1.3.1.jar:1.3.1]</span><br><span class="line">at com.netflix.zuul.FilterProcessor.runFilters(FilterProcessor.java:157) ~[zuul-core-1.3.1.jar:1.3.1]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>正常访问结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zuul rate limit result !</span><br></pre></td></tr></table></figure></p><hr><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><p>之前配置路由映射规则的方式，为“静态路由”。如果在迭代过程中，可能需要动态将路由映射规则写入内存。在“静态路由”配置中，需要重启 Zuul 应用。<br>不需要重启 Zuul，又能修改映射规则的方式，称为“动态路由”。</p><ul><li>SpringCloud Config + Bus，动态刷新配置文件。好处是不用 Zuul 维护映射规则，可以随时修改，随时生效。缺点是需要单独集成一些使用并不频繁的组件。SpringCloud Config 没有可视化界面，维护也麻烦</li><li>重写 Zuul 配置读取方式，采用事件刷新机制，从数据库读取路由映射规则。此方式基于数据库，可轻松实现管理页面，灵活度高。</li></ul><h1 id="动态路由实现原理"><a href="#动态路由实现原理" class="headerlink" title="动态路由实现原理"></a>动态路由实现原理</h1><p><img src="/images/spring-cloud/zuul/dynamic-route.png" alt="动态路由原理核心类依赖图"></p><h2 id="DiscoveryClientRouteLocator"><a href="#DiscoveryClientRouteLocator" class="headerlink" title="DiscoveryClientRouteLocator"></a>DiscoveryClientRouteLocator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryClientRouteLocator</span> <span class="keyword">extends</span> <span class="title">SimpleRouteLocator</span> <span class="keyword">implements</span> <span class="title">RefreshableRouteLocator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LinkedHashMap&lt;String, ZuulRoute&gt; <span class="title">locateRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doRefresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locateRoutes</code> 方法继承自 <code>SimpleRouteLocator</code> 类，并重写规则，该方法主要的功能就是将配置文件中的映射规则信息包装成 <code>LinkedHashMap&lt;String, ZuulRoute&gt;</code>，键为路径 path，值 ZuulRoute 是配置文件的封装类。之前的映射配置信息就是使用 ZuulRoute 封装的。<br><code>refresh</code> 实现自 RefreshableRouteLocator 接口，添加刷新功能必须实现此方法，<code>doRefresh</code> 方法来自 <code>SimpleRouteLocator</code> 类</p><h2 id="SimpleRouteLocator"><a href="#SimpleRouteLocator" class="headerlink" title="SimpleRouteLocator"></a>SimpleRouteLocator</h2><p><code>SimpleRouteLocator</code> 是 <code>DiscoveryClientRouteLocator</code> 的父类，此类基本实现了 RouteLocator 接口，对读取配置文件信息做一些处理，提供方法 <code>doRefresh</code>、<code>locateRoutes</code> 供子类实现刷新策略与映射规则加载策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calculate all the routes and set up a cache for the values. Subclasses can call</span></span><br><span class="line"><span class="comment"> * this method if they need to implement &#123;<span class="doctag">@link</span> RefreshableRouteLocator&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.routes.set(locateRoutes());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compute a map of path pattern to route. The default is just a static map from the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulProperties&#125;, but subclasses can add dynamic calculations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, ZuulRoute&gt; <span class="title">locateRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ZuulRoute route : <span class="keyword">this</span>.properties.getRoutes().values()) &#123;</span><br><span class="line">        routesMap.put(route.getPath(), route);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> routesMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法都是 protectted 修饰，是为了让子类不用维护此类一些成员变量就能实现刷新或读取路由的功能。从注释上可以看到，调用 <code>doRedresh</code> 方法需要实现 <code>RefreshableRouteLocator</code>；<code>locateRoutes</code> 默认是一个静态的映射读取方法，如果需要动态记载映射，需要子类重写此方法。</p><h2 id="ZuulServerAutoConfiguration"><a href="#ZuulServerAutoConfiguration" class="headerlink" title="ZuulServerAutoConfiguration"></a>ZuulServerAutoConfiguration</h2><p>ZuulServerAutoConfiguration 是 Spring Cloud Zuul 的配置类，主要目的是注册各种过滤器、监听器以及其他功能。Zuul 在注册中心新增服务后刷新监听器也是在这个类中注册的，底层是 Spring 的 ApplicationListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ZuulServlet.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ZuulServerMarkerConfiguration.Marker.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他功能注册</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Zuul 刷新监听器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulRefreshListener</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ZuulHandlerMapping zuulHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HeartbeatMonitor heartbeatMonitor = <span class="keyword">new</span> HeartbeatMonitor();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RefreshScopeRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> RoutesRefreshedEvent</span><br><span class="line">|| event <span class="keyword">instanceof</span> InstanceRegisteredEvent) &#123;</span><br><span class="line">reset();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ParentHeartbeatEvent) &#123;</span><br><span class="line">ParentHeartbeatEvent e = (ParentHeartbeatEvent) event;</span><br><span class="line">resetIfNeeded(e.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> HeartbeatEvent) &#123;</span><br><span class="line">HeartbeatEvent e = (HeartbeatEvent) event;</span><br><span class="line">resetIfNeeded(e.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetIfNeeded</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.heartbeatMonitor.update(value)) &#123;</span><br><span class="line">reset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.zuulHandlerMapping.setDirty(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，由方法 <code>onApplicationEvent</code>可知，Zuul 会接收 4 种事件通知 <code>ContextRefreshedEvent</code>、<code>RefreshScopeRefreshedEvent</code>、<code>RoutesRefreshedEvent</code>、<code>InstanceRegisteredEvent</code>，这四种通知都会去刷新路由映射配置信息，此外，心跳续约监视器 <code>HeartbeatEvent</code> 也会触发这个动作</p><h2 id="ZuulHandlerMapping"><a href="#ZuulHandlerMapping" class="headerlink" title="ZuulHandlerMapping"></a>ZuulHandlerMapping</h2><p>在 <code>ZuulServerAutoConfiguration#ZuulRefreshListener</code> 中，注入了 <code>ZuulHandlerMapping</code>，此类是将本地配置的映射关系，映射到远程的过程控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MVC HandlerMapping that maps incoming request paths to remote services.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他配置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dirty = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDirty</span><span class="params">(<span class="keyword">boolean</span> dirty)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dirty = dirty;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.routeLocator <span class="keyword">instanceof</span> RefreshableRouteLocator) &#123;</span><br><span class="line">((RefreshableRouteLocator) <span class="keyword">this</span>.routeLocator).refresh();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dirty</code> 属性很重要，它是用来控制当前是否需要重新加载映射配置信息的标记，在 Zuul 每次进行路由操作的时候都会检查这个值。如果为 true，则会触发配置信息的重新加载，同时再将其审核制为 false。由 <code>setDirty</code> 方法体可知，启动刷新动作必须实现 <code>RefreshableRouteLocator</code>，否则会出现类转换异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前利用 Hystrix，通过熔断器实现了&lt;code&gt;通过某个阈值来对异常流量进行降级处理&lt;/code&gt;。除了对异常流量进行降级之外，还可以通过 &lt;code&gt;流量排队&lt;/code&gt;、&lt;code&gt;限流&lt;/code&gt;、&lt;code&gt;分流&lt;/code&gt;等操作，防止系统出错。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（22） --- Zuul(三) &lt;br&gt; Zuul 权限集成</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-22.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-22.html</id>
    <published>2019-02-18T06:27:07.000Z</published>
    <updated>2019-02-18T06:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在原本的单体应用中，通常使用 Apache Shiro、Spring Security 等权限框架，但是在 Spring Cloud 中，面对成千上万的微服务，而且每个服务之间无状态，使用 Shiro、Security 难免力不从心。在解决方案的选择上，传统的单点登录SSO、分布式 session 等，要么致使权限服务器集中化，导致流量臃肿，要么需要实现一套复杂的存储同步机制，都不是最好的解决方案。</p><a id="more"></a><p>可以使用 Spring Cloud Zuul 自定义实现权限认证方式</p><p><strong><em>源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-security" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-security</a></em></strong></p><hr><h1 id="自定义权限认证"><a href="#自定义权限认证" class="headerlink" title="自定义权限认证"></a>自定义权限认证</h1><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Zuul 对于请求的转发是通过 Filter 链控制的，可以在 RequestContext 的基础上做任何事。所以只需要在 <code>spring-cloud-zuul-filter</code> 的基础上，设置一个执行顺序比较靠前的 Filter，就可以专门用于对请求特定内容做权限认证。</p><p>优点：实现灵活度高，可整合已有的权限系统，对原始系统违法化友好<br>缺点：需要开发一套新的逻辑，维护成本增加，调用链紊乱</p><h2 id="OAuth2-0-JWT"><a href="#OAuth2-0-JWT" class="headerlink" title="OAuth2.0 + JWT"></a>OAuth2.0 + JWT</h2><p>OAuth2.0 是对于“授权-认证”比较成熟的面向资源的授权协议。整个授权流程中，用户是资源拥有者，服务端需要资源拥有者的授权，这个过程相当于键入密码或者其他第三方登录。触发了这个操作后，客户端就可以向授权服务器申请 Token，拿到后，再携带 Token 到资源所在服务器拉取响应资源。</p><p>JWT(JSON Web Token)是一种使用 JSON 格式来规范 Token 或 Session 的协议。由于传统认证方式会生成一个凭证，这个凭证可以是 Token 或 Session，保存于服务端或其他持久化工具中，这样一来，凭证的存取或十分麻烦。JWT 实现了“客户端 Session”。</p><p>JWT 的组成部分：</p><ul><li>Header 头部：指定 JWT 使用的签名算法</li><li>Payload 载荷：包含一些自定义与非自定义的认证信息</li><li>Signature：将头部、载荷使用“.”连接后，使用头部的签名算法生成签名信息，并拼装到末尾</li></ul><p>OAuth2.0 + JWT 的意义在于，使用 OAuth2.0 协议思想拉取认证生成 TToken，使用 JWT 瞬时保存这个 Token，在客户端与资源端进行对称或非对称加密，是的这个规约具有定时、定量的授权认证功能，从而免去 Token 存储带来的安全或者系统扩展问题。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Zuul-Server"><a href="#Zuul-Server" class="headerlink" title="Zuul Server"></a>Zuul Server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-zuul-security-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5555</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-zuul-security-provider-service:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-zuul-security-provider-service</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  oauth2:</span></span><br><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="attr">      access-token-uri:</span>  <span class="attr">http://localhost:7777/uaa/oauth/token</span> <span class="comment"># 令牌端点</span></span><br><span class="line"><span class="attr">      user-authorization-uri:</span> <span class="attr">http://localhost:7777/uaa/oauth/authorize</span> <span class="comment"># 授权端点</span></span><br><span class="line"><span class="attr">      client-id:</span> <span class="string">zuul_server</span> <span class="comment"># OAuth2 客户端id</span></span><br><span class="line"><span class="attr">      client-secret:</span> <span class="string">secret</span> <span class="comment"># OAuth2 客户端秘钥</span></span><br><span class="line"><span class="attr">    resource:</span></span><br><span class="line"><span class="attr">      jwt:</span></span><br><span class="line"><span class="attr">        key-value:</span> <span class="string">spring-cloud</span> <span class="comment"># 使用对称加密，默认算法为 HS256，加密秘钥为 spring-cloud</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableOAuth</span>2Sso    <span class="comment">// 开启 OAuth2.0 sso认证</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulSecurityServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulSecurityServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 声明要鉴权的 urls</span></span><br><span class="line">                .antMatchers(<span class="string">"/login"</span>, <span class="string">"/provider/**"</span>)</span><br><span class="line">                .permitAll().anyRequest().authenticated().and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="auth-server"><a href="#auth-server" class="headerlink" title="auth server"></a>auth server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-zuul-security-auth-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7777</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/uaa</span> <span class="comment"># web 访问根节点</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulSecurityAuthServerApplication</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulSecurityAuthServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = BeanIds.AUTHENTICATION_MANAGER)  <span class="comment">// 设置 Bean 的名称</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// password 编码器</span></span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置用户和权限</span></span><br><span class="line">        auth.inMemoryAuthentication().withUser(<span class="string">"guest"</span>).password(<span class="string">"guest"</span>).authorities(<span class="string">"WRIGHT_READ"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).authorities(<span class="string">"WRIGHT_READ"</span>, <span class="string">"WRIGHT_WRITE"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// OAuth 配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span>  <span class="comment">// 开启认证服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuthConfiguration</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OAuthConfiguration</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">// 此处的 client 是 zuul server 中 security.oauth2.client.client-id</span></span><br><span class="line">                .withClient(<span class="string">"zuul_server"</span>)</span><br><span class="line">                <span class="comment">// 此处的 secret 是 zuul server 中 security.oauth2.client.client-secret</span></span><br><span class="line">                .secret(<span class="string">"secret"</span>)</span><br><span class="line">                <span class="comment">// 作用域</span></span><br><span class="line">                .scopes(<span class="string">"WRIGHT"</span>, <span class="string">"READ"</span>)</span><br><span class="line">                <span class="comment">// 跳过认证确认的过程</span></span><br><span class="line">                .autoApprove(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 权限</span></span><br><span class="line">                .authorities(<span class="string">"WRIGHT_READ"</span>, <span class="string">"WRIGHT_WRITE"</span>)</span><br><span class="line">                <span class="comment">// 可以使用的授权类型，默认为空</span></span><br><span class="line">                <span class="comment">// implicit：隐式授权类型</span></span><br><span class="line">                <span class="comment">// refresh_token：刷新令牌获取新的令牌</span></span><br><span class="line">                <span class="comment">// password：资源所有者密码类型</span></span><br><span class="line">                <span class="comment">// authorization_code：授权码类型</span></span><br><span class="line">                <span class="comment">// client_credentials：客户端凭据（客户端ID以及key）类型</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">"implicit"</span>, <span class="string">"refresh_token"</span>, <span class="string">"password"</span>, <span class="string">"authorization_code"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.tokenStore(jwtTokenStore())</span><br><span class="line">                .tokenEnhancer(jwtAccessTokenConverter())</span><br><span class="line">                .authenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">jwtTokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">// 设置秘钥，需要与 zuul_server 中配置的一样</span></span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(<span class="string">"spring-cloud"</span>);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7070</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-zuul-security-provider-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulSecurityProviderServiceApplication</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SpringCloudZuulSecurityProviderServiceApplication.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulSecurityProviderServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; header start! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements())&#123;</span><br><span class="line">            String header = headerNames.nextElement();</span><br><span class="line">            String value = request.getHeader(header);</span><br><span class="line">            LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125; : &#123;&#125; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>, header, value);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; header end! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" test!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable().authorizeRequests().antMatchers(<span class="string">"/**"</span>).authenticated()</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">"/test"</span>)</span><br><span class="line">                .hasAuthority(<span class="string">"WRIGHT_READ"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.resourceId(<span class="string">"WRIGHT"</span>)</span><br><span class="line">                .tokenStore(tokenStore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JwtAccessTokenConverter converter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        converter.setSigningKey(<span class="string">"spring-cloud"</span>);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>访问 <a href="http://localhost:5555/provider/test" target="_blank" rel="noopener">http://localhost:5555/provider/test</a> 页面返回值如下<br><img src="/images/spring-cloud/zuul/oauth2-error.png" alt="oauth2 权限不足"></p><p>访问 <a href="http://localhost:5555/login" target="_blank" rel="noopener">http://localhost:5555/login</a> 将会自动跳转到 <a href="http://localhost:7777/uaa/login" target="_blank" rel="noopener">http://localhost:7777/uaa/login</a> 使用 <code>admin/admin</code> 登录<br><img src="/images/spring-cloud/zuul/oauth2-login.png" alt="oauth2 登录"></p><p>访问成功后会返回一个 404 页面，这是因为没有配置成功后跳转页面导致的，暂时不管<br><img src="/images/spring-cloud/zuul/oauth2-logined.png" alt="oauth2 登录成功"></p><p>再次访问 <a href="http://localhost:5555/provider/test" target="_blank" rel="noopener">http://localhost:5555/provider/test</a> 页面返回值如下<br><img src="/images/spring-cloud/zuul/oauth2-succeed.png" alt="oauth2 访问成功"></p><p>同时查看 provider-service，控制台输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; header start! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; upgrade-insecure-requests : 1 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; user-agent : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dnt : 1 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; accept : text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; accept-language : zh-CN,zh;q=0.9 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; authorization : bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTA2MDcxODQsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiV1JJR0hUX1dSSVRFIiwiV1JJR0hUX1JFQUQiXSwianRpIjoiZTJjYmNjNDk</span><br><span class="line">tMzE5ZC00NDdhLTlmMWYtZmY0YzI5ZDFmZWM4IiwiY2xpZW50X2lkIjoic3ByaW5nLWNsb3VkLXp1dWwtc2VjdXJpdHktc2VydmVyIiwic2NvcGUiOlsiV1JJR0hUIiwicmVhZCJdfQ.vOibf3j0seQqsJuH66eLi_zU_P3KeiTn07baUx78T5A &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; x-forwarded-host : localhost:5555 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; x-forwarded-proto : http &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; x-forwarded-prefix : /provider &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; host : localhost:5555 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; x-forwarded-port : 5555 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; x-forwarded-for : 0:0:0:0:0:0:0:1 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; accept-encoding : gzip &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; content-length : 0 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; connection : Keep-Alive &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; header end! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure></p><p>其中，<code>authorization</code> 就是 JWT Token，这个 Token 是使用 base64 加密的，将 <code>authorization</code> 去掉 <code>bearer</code> 后，其余部分按 “.” 分隔，每个部分分别解密<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code> 解码后为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line"><span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>eyJleHAiOjE1NTA2MDcxODQsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiV1JJR0hUX1dSSVRFIiwiV1JJR0hUX1JFQUQiXSwianRpIjoiZTJjYmNjNDktMzE5ZC00NDdhLTlmMWYtZmY0YzI5ZDFmZWM4IiwiY2xpZW50X2lkIjoic3ByaW5nLWNsb3VkLXp1dWwtc2VjdXJpdHktc2VydmVyIiwic2NvcGUiOlsiV1JJR0hUIiwicmVhZCJdfQ</code> 解码后为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"exp"</span>: <span class="number">1550607184</span>,</span><br><span class="line"><span class="attr">"user_name"</span>: <span class="string">"admin"</span>,</span><br><span class="line"><span class="attr">"authorities"</span>: [<span class="string">"WRIGHT_WRITE"</span>, <span class="string">"WRIGHT_READ"</span>],</span><br><span class="line"><span class="attr">"jti"</span>: <span class="string">"e2cbcc49-319d-447a-9f1f-ff4c29d1fec8"</span>,</span><br><span class="line"><span class="attr">"client_id"</span>: <span class="string">"spring-cloud-zuul-security-server"</span>,</span><br><span class="line"><span class="attr">"scope"</span>: [<span class="string">"WRIGHT"</span>, <span class="string">"read"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vOibf3j0seQqsJuH66eLi_zU_P3KeiTn07baUx78T5A：这一部分是密文，不能使用 base64 解密</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在原本的单体应用中，通常使用 Apache Shiro、Spring Security 等权限框架，但是在 Spring Cloud 中，面对成千上万的微服务，而且每个服务之间无状态，使用 Shiro、Security 难免力不从心。在解决方案的选择上，传统的单点登录SSO、分布式 session 等，要么致使权限服务器集中化，导致流量臃肿，要么需要实现一套复杂的存储同步机制，都不是最好的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（21） --- Zuul(二) &lt;br&gt; Zuul Filter 链</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-21.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-21.html</id>
    <published>2019-02-15T08:03:31.000Z</published>
    <updated>2019-02-15T08:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Zuul 的核心逻辑是由一系列紧密配合工作的 Filter 来实现的，能够在进行 HTTP 请求或响应的时候执行相关操作。</p><a id="more"></a><h1 id="Zuul-Filter"><a href="#Zuul-Filter" class="headerlink" title="Zuul Filter"></a>Zuul Filter</h1><h2 id="Zuul-Filter-的特点"><a href="#Zuul-Filter-的特点" class="headerlink" title="Zuul Filter 的特点"></a>Zuul Filter 的特点</h2><ul><li>Filter 类型：Filter 类型决定了当前的 Filter 在整个 Filter 链中的执行顺序。</li><li>Filter 执行顺序：同一种类型的 Filter 通过 filterOrder() 来设置执行顺序</li><li>Filter 执行条件：Filter 执行所需的标准、条件</li><li>Filter 执行效果：符合某个条件，产生的执行结果</li></ul><p>Zuul 内部提供了一个动态读取、编译、运行这些 Filter 的机制。Filter 之间不直接通信，在请求线程中会通过 RequestContext 共享状态，内部使用 ThreadLocal 实现，也可以在 Filter 之间使用 ThreadLocal 收集自己需要的状态、数据</p><p>Zuul Filter 的执行逻辑源码在 <code>com.netflix.zuul.http.ZuulServlet</code> 中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.init((HttpServletRequest)servletRequest, (HttpServletResponse)servletResponse);</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();        <span class="comment">// 通过 RequestContext 获取共享状态</span></span><br><span class="line">        context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.preRoute();        <span class="comment">// 执行请求之前的操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var13) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(var13);      <span class="comment">// 出现错误的操作</span></span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.route();       <span class="comment">// 路由操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var12) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(var12);</span><br><span class="line">            <span class="keyword">this</span>.postRoute();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.postRoute();       <span class="comment">// 请求操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZuulException var11) &#123;</span><br><span class="line">            <span class="keyword">this</span>.error(var11);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var14) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="keyword">new</span> ZuulException(var14, <span class="number">500</span>, <span class="string">"UNHANDLED_EXCEPTION_"</span> + var14.getClass().getName()));</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        RequestContext.getCurrentContext().unset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Zuul-生命周期"><a href="#Zuul-生命周期" class="headerlink" title="Zuul 生命周期"></a>Zuul 生命周期</h2><p>Zuul 官方文档中，生命周期图。<br><img src="/images/spring-cloud/zuul/zuul-life-cycle.png" alt="Zuul Life Cycle"></p><p>但官方文档的生命周期图不太准确。</p><ul><li>在 postRoute 执行之前，即 postFilter 执行之前，如果没有出现过错误，会调用 error 方法，并调用 this.error(new ZuulException) 打印堆栈信息</li><li>在 postRoute 执行之前就已经报错，会调用 error 方法，再调用 postRoute，但是之后会直接 return，不会调用 this.error(new ZuulException) 打印堆栈信息</li></ul><p>由此可以看出，整个 Filter 调用链的重点可能是 postFilter 也可能是 errorFilter</p><p><img src="/images/spring-cloud/zuul/zuul-life-cycle-1.png" alt="Zuul Life Cycle"></p><p>pre、route 出现错误后，进入 error，再进入 post，再返回<br>pre、route 没有出现错误，进入 post，如果出现错误，再进入 error，再返回</p><ul><li>pre：在 Zuul 按照规则路由到下级服务之前执行。如果需要对请求进行预处理，如：鉴权、限流等，都需要在此 Filter 实现</li><li>route：Zuul 路由动作的执行者，是 Http Client、Ribbon 构建和发送原始 HTTP 请求的地方</li><li>post：源服务返回结果或异常信息发生后执行，如果需要对返回值信息做处理，需要实现此类 Filter</li><li>error：整个生命周期发生异常，都会进入 error Filter，可做全局异常处理。</li></ul><p>Filter 之间，通过 <code>com.netflix.zuul.context.RequestContext</code> 类进行通信，内部采用 ThreadLocal 保存每个请求的一些信息，包括：请求路由、错误信息、HttpServletRequest、HTTPServletResponse，扩展了 ConcurrentHashMap，目的是为了在处理过程中保存任何形式的信息</p><hr><h1 id="Zuul-原生-Filter"><a href="#Zuul-原生-Filter" class="headerlink" title="Zuul 原生 Filter"></a>Zuul 原生 Filter</h1><p>整合 <code>spring-boot-starter-actuator</code> 后，查看 idea 控制台 endpoints 栏的 mappings，可以看到多了几个 Actuator 端点</p><h2 id="routes-端点"><a href="#routes-端点" class="headerlink" title="routes 端点"></a>routes 端点</h2><p>访问 <a href="http://localhost:8989/actuator/routes" target="_blank" rel="noopener">http://localhost:8989/actuator/routes</a> 可以查看当前 zuul server 映射了几个路径、服务<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"/provider/**"</span>: <span class="string">"spring-cloud-provider-service-simple"</span>,</span><br><span class="line">    <span class="attr">"/spring-cloud-provider-service-simple/**"</span>: <span class="string">"spring-cloud-provider-service-simple"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8989/actuator/routes/details" target="_blank" rel="noopener">http://localhost:8989/actuator/routes/details</a> 可以查看具体的映射信息<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"/provider/**"</span>: &#123;</span><br><span class="line">        "id": "spring-cloud-provider-service-simple",       // serviceId</span><br><span class="line">        "fullPath": "/provider/**",     // 映射 path</span><br><span class="line">        "location": "spring-cloud-provider-service-simple",     // 服务名称，实际上也是 serviceId</span><br><span class="line">        "path": "/**",      // 实际访问路径 </span><br><span class="line">        "prefix": "/provider",      // 访问前缀</span><br><span class="line">        "retryable": false,     // 是否开启重试</span><br><span class="line">        "customSensitiveHeaders": false,        // 是否自定义了敏感 header</span><br><span class="line">        "prefixStripped": true      // 是否去掉前缀（如果为 false，则实际访问时需要加 前缀，且实际请求的访问路径也会加上前缀）</span><br><span class="line">    &#125;,</span><br><span class="line">    "/spring-cloud-provider-service-simple/**": &#123;</span><br><span class="line">        "id": "spring-cloud-provider-service-simple",</span><br><span class="line">        "fullPath": "/spring-cloud-provider-service-simple/**",</span><br><span class="line">        "location": "spring-cloud-provider-service-simple",</span><br><span class="line">        "path": "/**",</span><br><span class="line">        "prefix": "/spring-cloud-provider-service-simple",</span><br><span class="line">        "retryable": false,</span><br><span class="line">        "customSensitiveHeaders": false,</span><br><span class="line">        "prefixStripped": true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="filters-端点"><a href="#filters-端点" class="headerlink" title="filters 端点"></a>filters 端点</h2><p>访问 <a href="http://localhost:8989/actuator/filters" target="_blank" rel="noopener">http://localhost:8989/actuator/filters</a> ，返回当前 zuul 的所有 filters</p><p><img src="/images/spring-cloud/zuul/zuul-filters.png" alt="Zuul Filters"></p><h2 id="内置-Filters"><a href="#内置-Filters" class="headerlink" title="内置 Filters"></a>内置 Filters</h2><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">顺序</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">ServletDetectionFilter</td><td style="text-align:center">pre</td><td style="text-align:center">-3</td><td style="text-align:center">通过 Spring Dispatcher 检查请求是否通过</td></tr><tr><td style="text-align:center">Servlet30WrapperFilter</td><td style="text-align:center">pre</td><td style="text-align:center">-2</td><td style="text-align:center">适配 HttpServletRequest 为 Servlet30RequestWrapper 对象</td></tr><tr><td style="text-align:center">FormBodyWrapperFilter</td><td style="text-align:center">pre</td><td style="text-align:center">-1</td><td style="text-align:center">解析表单数据，并为下游请求进行重新编码</td></tr><tr><td style="text-align:center">DebugFilter</td><td style="text-align:center">pre</td><td style="text-align:center">1</td><td style="text-align:center">Debug 路由标识</td></tr><tr><td style="text-align:center">PreDecorationFilter</td><td style="text-align:center">pre</td><td style="text-align:center">5</td><td style="text-align:center">处理请求上下文供后续使用，设置下游相关头信息</td></tr><tr><td style="text-align:center">RibbonRoutingFilter</td><td style="text-align:center">route</td><td style="text-align:center">10</td><td style="text-align:center">使用 Ribbon、Hystrix、嵌入式 HTTP 客户端发送请求</td></tr><tr><td style="text-align:center">SimpleHostRoutingFilter</td><td style="text-align:center">route</td><td style="text-align:center">100</td><td style="text-align:center">使用 Apache Httpclient 发送请求</td></tr><tr><td style="text-align:center">SendForwardFilter</td><td style="text-align:center">route</td><td style="text-align:center">500</td><td style="text-align:center">使用 Servlet 转发请求</td></tr><tr><td style="text-align:center">SendResponseFilter</td><td style="text-align:center">post</td><td style="text-align:center">1000</td><td style="text-align:center">将代理请求的响应写入当前响应</td></tr><tr><td style="text-align:center">SendErrorFilter</td><td style="text-align:center">error</td><td style="text-align:center">0</td><td style="text-align:center">如果 RequestContext.getThrowable() 不为空，则转发到 error.path 哦诶之的路径</td></tr></tbody></table><p>如果使用 <code>@EnableZuulServer</code> 注解，将减少 <code>PreDecorationFilter</code>、<code>RibbonRoutingFilter</code>、<code>SimpleHostRoutingFilter</code></p><p>如果要替换到某个原生的 Filter，可以自实现一个和原生 Filter 名称、类型一样的 Filter，并替换。或者禁用掉某个filter，并自实现一个新的。<br>禁用语法： <code>zuul.{SimpleClassName}.{filterType}.disable=true</code>，如 <code>zuul.SendErrorFilter.error.disable=true</code></p><hr><h1 id="多级业务处理"><a href="#多级业务处理" class="headerlink" title="多级业务处理"></a>多级业务处理</h1><p>在 Zuul Filter 链体系中，可以把一组业务逻辑细分，然后封装到一个个紧密结合的 Filter，设置处理顺序，组成一组 Filter 链。</p><h2 id="自定义实现-Filter"><a href="#自定义实现-Filter" class="headerlink" title="自定义实现 Filter"></a>自定义实现 Filter</h2><p>在 Zuul 中实现自定义 Filter，继承 <code>ZuulFilter</code> 类即可，ZuulFilter 是一个抽象类，需要实现以下几个方法</p><ul><li>String filterType：使用返回值设定 Filter 类型，可以设置为 <code>pre</code>、<code>route</code>、<code>post</code>、<code>error</code></li><li>int filterOrder：使用返回值设置 Filter 执行次序</li><li>boolean shouldFilter：使用返回值设定该 Filter 是否执行，可以作为开关来使用</li><li>Object run：Filter 的核心执行逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 ZuulFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"自定义 Filter，类型为 pre！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入 Spring 容器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FirstPreFilter <span class="title">firstPreFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FirstPreFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问 <a href="http://localhost:8989/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/provider/get-result</a> ，查看控制台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Initializing Servlet &apos;dispatcherServlet&apos;</span><br><span class="line">Completed initialization in 0 ms</span><br><span class="line">自定义 Filter，类型为 pre！</span><br><span class="line">Flipping property: spring-cloud-provider-service-simple.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647</span><br><span class="line">Shutdown hook installed for: NFLoadBalancer-PingTimer-spring-cloud-provider-service-simple</span><br></pre></td></tr></table></figure></p><h2 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h2><p>使用 SecondFilter 验证是否传入参数 a，ThirdPreFilter 验证是否传入参数 b，在 PostFilter 统一处理返回内容。</p><p><strong><em>SecondPreFilter</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SecondPreFilter.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SecondPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 从上下文获取 request</span></span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        <span class="comment">// 从 request 获取参数 a</span></span><br><span class="line">        String a = request.getParameter(<span class="string">"a"</span>);</span><br><span class="line">        <span class="comment">// 如果参数 a 为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(a)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 参数 a 为空！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">// 禁止路由，禁止访问下游服务</span></span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 设置 responseBody，供 postFilter 使用</span></span><br><span class="line">            requestContext.setResponseBody(<span class="string">"&#123;\"status\": 500, \"message\": \"参数 a 为空！\"&#125;"</span>);</span><br><span class="line">            <span class="comment">// 用于下游 Filter 判断是否执行</span></span><br><span class="line">            requestContext.set(<span class="string">"logic-is-success"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// Filter 结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        requestContext.set(<span class="string">"logic-is-success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>ThirdPreFilter</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdPreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ThirdPreFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 获取上下文中的 logic-is-success 中的值，用于判断当前 filter 是否执行</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">boolean</span>) context.get(<span class="string">"logic-is-success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ThirdPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">// 获取上下文</span></span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 从上下文获取 request</span></span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        <span class="comment">// 从 request 获取参数 a</span></span><br><span class="line">        String a = request.getParameter(<span class="string">"b"</span>);</span><br><span class="line">        <span class="comment">// 如果参数 a 为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(a)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 参数 b 为空！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="comment">// 禁止路由，禁止访问下游服务</span></span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 设置 responseBody，供 postFilter 使用</span></span><br><span class="line">            requestContext.setResponseBody(<span class="string">"&#123;\"status\": 500, \"message\": \"参数 b 为空！\"&#125;"</span>);</span><br><span class="line">            <span class="comment">// 用于下游 Filter 判断是否执行</span></span><br><span class="line">            requestContext.set(<span class="string">"logic-is-success"</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// Filter 结束</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        requestContext.set(<span class="string">"logic-is-success"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>PostFilter</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PostFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Post Filter! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 处理返回中文乱码</span></span><br><span class="line">        context.getResponse().setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 获取上下文保存的 responseBody</span></span><br><span class="line">        String responseBody = context.getResponseBody();</span><br><span class="line">        <span class="comment">// 如果 responseBody 不为空，则证明流程中有异常发生</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(responseBody)) &#123;</span><br><span class="line">            <span class="comment">// 设置返回状态码</span></span><br><span class="line">            context.setResponseStatusCode(<span class="number">500</span>);</span><br><span class="line">            <span class="comment">// 替换响应报文</span></span><br><span class="line">            context.setResponseBody(responseBody);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8989/provider/add" target="_blank" rel="noopener">http://localhost:8989/provider/add</a> 、<a href="http://localhost:8989/provider/add?a=1" target="_blank" rel="noopener">http://localhost:8989/provider/add?a=1</a> 、<a href="http://localhost:8989/provider/add?a=1&amp;b=1" target="_blank" rel="noopener">http://localhost:8989/provider/add?a=1&amp;b=1</a> ，查看控制台</p><p>控制台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-02-18 14:09:44.890  INFO 5800 --- [nio-8989-exec-7] c.l.g.z.s.filter.FirstPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 自定义 Filter，类型为 pre！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:09:44.890  INFO 5800 --- [nio-8989-exec-7] c.l.g.z.s.filter.SecondPreFilter         : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SecondPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:09:44.890  INFO 5800 --- [nio-8989-exec-7] c.l.g.z.s.filter.SecondPreFilter         : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 参数 a 为空！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:09:44.890  INFO 5800 --- [nio-8989-exec-7] c.l.g.z.s.filter.PostFilter              : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Post Filter! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-02-18 14:10:13.004  INFO 5800 --- [nio-8989-exec-5] c.l.g.z.s.filter.FirstPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 自定义 Filter，类型为 pre！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:13.004  INFO 5800 --- [nio-8989-exec-5] c.l.g.z.s.filter.SecondPreFilter         : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SecondPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:13.004  INFO 5800 --- [nio-8989-exec-5] c.l.g.z.s.filter.ThirdPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ThirdPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:13.004  INFO 5800 --- [nio-8989-exec-5] c.l.g.z.s.filter.ThirdPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 参数 b 为空！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:13.005  INFO 5800 --- [nio-8989-exec-5] c.l.g.z.s.filter.PostFilter              : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Post Filter! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-02-18 14:10:28.488  INFO 5800 --- [nio-8989-exec-9] c.l.g.z.s.filter.FirstPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 自定义 Filter，类型为 pre！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:28.488  INFO 5800 --- [nio-8989-exec-9] c.l.g.z.s.filter.SecondPreFilter         : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; SecondPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:28.488  INFO 5800 --- [nio-8989-exec-9] c.l.g.z.s.filter.ThirdPreFilter          : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; ThirdPreFilter ！ &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">2019-02-18 14:10:28.500  INFO 5800 --- [nio-8989-exec-9] c.l.g.z.s.filter.PostFilter              : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Post Filter! &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><p>返回值：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"status"</span>: <span class="number">500</span>, <span class="attr">"message"</span>: <span class="string">"参数 a 为空！"</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"status"</span>: <span class="number">500</span>, <span class="attr">"message"</span>: <span class="string">"参数 b 为空！"</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result is : a + b = 2</span><br></pre></td></tr></table></figure><p>由此验证自定义 Zuul Filter 成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zuul 的核心逻辑是由一系列紧密配合工作的 Filter 来实现的，能够在进行 HTTP 请求或响应的时候执行相关操作。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（20） --- Zuul(一) &lt;br&gt; 基本概念、配置</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-20.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-20.html</id>
    <published>2019-02-13T08:12:03.000Z</published>
    <updated>2019-02-13T08:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Zuul 是由 Netflix 孵化的一个致力于“网关”的解决方案的开源组件。Zuul 在动态路由、监控、弹性、服务治理、安全等方面有着举足轻重的作用。<br>Zuul 底层为 Servlet，本质组件是一系列 Filter 构成的责任链。</p><a id="more"></a><p><strong>Zuul 具备的功能</strong></p><ul><li>认证、鉴权</li><li>压力控制</li><li>金丝雀测试（灰度发布）</li><li>动态路由</li><li>负载削减</li><li>静态响应处理</li><li>主动流量控制</li></ul><h1 id="Zuul-入门案例"><a href="#Zuul-入门案例" class="headerlink" title="Zuul 入门案例"></a>Zuul 入门案例</h1><h2 id="Zuul-Server"><a href="#Zuul-Server" class="headerlink" title="Zuul Server"></a>Zuul Server</h2><p><strong><em>Server源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-simple" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-simple</a></em></strong><br><strong><em>Client源码：<a href="https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-provider-service-simple" target="_blank" rel="noopener">https://gitee.com/laiyy0728/spring-cloud/tree/master/spring-cloud-zuul/spring-cloud-zuul-provider-service-simple</a></em></strong></p><h3 id="pom、yml"><a href="#pom、yml" class="headerlink" title="pom、yml"></a>pom、yml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-zuul-simple</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8989</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span>  <span class="comment"># zuul 路由配置，map 结构</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span> <span class="comment"># 针对哪个服务进行路由</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span>  <span class="comment"># 路由匹配什么规则。 当前配置为 provider 开头的请求路由到 provider-service 上</span></span><br><span class="line">      <span class="comment"># serviceId: spring-cloud-provider-service-simple # 路由到哪个 serviceId 上（即哪个服务），可不设置</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span>        <span class="comment">// 开启 Zuul 代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudZuulSimpleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudZuulSimpleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>先请求 provider-service： <a href="http://localhost:8081/get-result" target="_blank" rel="noopener">http://localhost:8081/get-result</a></p><p><img src="/images/spring-cloud/zuul/provider-service.png" alt="Zuul Provider Service"></p><p>再请求 zuul server： <a href="http://localhost:8989/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/provider/get-result</a><br><img src="/images/spring-cloud/zuul/zuul-server-provider-service.png" alt="Zuul Server Provider"></p><p>可以看到，响应结果一致，但通过 <code>Zuul Server</code> 的请求路径多了 <code>/provider</code>，由此验证 zuul server 路由代理成功</p><hr><h1 id="典型配置"><a href="#典型配置" class="headerlink" title="典型配置"></a>典型配置</h1><p>在上例中，路由规则的配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span>  </span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span> </span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span>  </span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br></pre></td></tr></table></figure></p><p>实际上，可以将这个配置进行简化</p><h2 id="指定路由的简化"><a href="#指定路由的简化" class="headerlink" title="指定路由的简化"></a>指定路由的简化</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span>  </span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span> <span class="string">/provider/**</span></span><br></pre></td></tr></table></figure><h2 id="默认简化"><a href="#默认简化" class="headerlink" title="默认简化"></a>默认简化</h2><p>默认简化可以不指定路由规则：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span>  </span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br></pre></td></tr></table></figure><p>此时简化配置，相当于：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span>  </span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span> </span><br><span class="line"><span class="attr">      path:</span> <span class="string">/spring-cloud-provider-service-simple/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br></pre></td></tr></table></figure></p><h2 id="多实例路由"><a href="#多实例路由" class="headerlink" title="多实例路由"></a>多实例路由</h2><p>一般情况下，一个服务会有多个实例，此时需要对这个服务进行负载均衡。默认情况下，Zuul 会使用 Eureka 中集成的基本负载均衡功能（轮询）。</p><p>如果需要使用 Ribbon 的负载均衡功能，有两种方式：</p><h3 id="Ribbon-脱离-Eureka-使用"><a href="#Ribbon-脱离-Eureka-使用" class="headerlink" title="Ribbon 脱离 Eureka 使用"></a>Ribbon 脱离 Eureka 使用</h3><p>需要在 <code>routes</code> 配置中指定 <code>serviceId</code>，这个操作需要禁止 Ribbon 使用 Eureka。<br><strong><em>此方式必须指定 serviceId</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span> <span class="comment"># 服务名称，需要和下方配置一致</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/ribbon-route/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span>   <span class="comment"># serviceId，需要和下方配置一致</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span>    <span class="comment"># 禁用掉 Eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring-cloud-provider-service-simple:</span>     <span class="comment"># 服务名称，需要和上方配置一致</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NIWSServerListClassName:</span> <span class="string">com.netflix.loadbalancer.ConfigurationBasedServerList</span>  <span class="comment"># 设置 ServerList 的配置</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span>    <span class="comment"># 设置负载均衡策略</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="attr">http://localhost:8080,http://localhost:8081</span>    <span class="comment"># 负载的 server 列表</span></span><br></pre></td></tr></table></figure></p><h3 id="Ribbon-不脱离-Eureka-使用"><a href="#Ribbon-不脱离-Eureka-使用" class="headerlink" title="Ribbon 不脱离 Eureka 使用"></a>Ribbon 不脱离 Eureka 使用</h3><p>直接使用 ribbon 路由配置即可<br><strong><em>此方式可以不指定 serviceId</em></strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/ribbon-route/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></p><h2 id="Zuul-本地跳转"><a href="#Zuul-本地跳转" class="headerlink" title="Zuul 本地跳转"></a>Zuul 本地跳转</h2><p>如果在 zuul 中做一些逻辑处理，在访问某个接口时，跳转到 zuul 中的这个方法上来处理，就需要用到 zuul 本地跳转</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span>  <span class="comment"># 只有访问 /provider 的时候才会 forward，但凡后面多一个路径就不行了。。。 为啥。。。</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">forward:/client</span></span><br></pre></td></tr></table></figure><p>此时，访问：<a href="http://localhost:8989/client" target="_blank" rel="noopener">http://localhost:8989/client</a> ，可以访问到，访问 <a href="http://localhost:8989/provider" target="_blank" rel="noopener">http://localhost:8989/provider</a> ，也能访问到，如果访问 <a href="http://localhost:8989/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/provider/get-result</a> ，理论上应该也能跳转到 /client，但是实际上会报 404 错误<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T06:50:12.565+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/provider/get-result"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果去掉 <code>url: forward:/client</code>，再访问 <a href="http://localhost:8989/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/provider/get-result</a> ，结果正常：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## Zuul 相同路径加载规则</span><br><span class="line"></span><br><span class="line">```yml</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    spring-cloud-provider-service-simple-a:</span><br><span class="line">      path: /provider/**</span><br><span class="line">      serviceId: spring-cloud-provider-service-simple-a</span><br><span class="line">    spring-cloud-provider-service-simple-b:</span><br><span class="line">      path: /provider/**</span><br><span class="line">      serviceId: spring-cloud-provider-service-simple-b</span><br></pre></td></tr></table></figure></p><p>可以发现，/provider/<strong> 匹配了2个 serviceId，这个匹配结果只会路由到最后一个服务上。即：/provider/</strong> 只会被路由到 simple-b 服务上。<br>yml 解释器在工作时，如果同一个映射路径对应了多个服务，按照加载顺序，后面的规则会把前面的规则覆盖掉。</p><h2 id="路由通配符"><a href="#路由通配符" class="headerlink" title="路由通配符"></a>路由通配符</h2><table><thead><tr><th style="text-align:center">规则</th><th style="text-align:center">解释</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">/**</td><td style="text-align:center">匹配任意数据量的路径与字符</td><td style="text-align:center">/client/aa，/client/aa/bb/cc</td></tr><tr><td style="text-align:center">/*</td><td style="text-align:center">匹配任意数量的字符</td><td style="text-align:center">/client/aa，/client/aaaaaaaaaaaaaa</td></tr><tr><td style="text-align:center">/?</td><td style="text-align:center">匹配单个字符</td><td style="text-align:center">/client/a，/client/b，/client/c</td></tr></tbody></table><hr><h1 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h1><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>在配置路由规则时，可以配置一个统一的前缀<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8989/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/provider/get-result</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T07:16:46.625+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/provider/get-result"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:8989/api/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/api/provider/get-result</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is provider service! this port is: 8081</span><br></pre></td></tr></table></figure></p><p>这样的设置，会将每个访问访问前都加上 prefix 前缀，但是实际上访问的是 <code>path</code> 配置的路径。<br>如果某个服务不需要前缀，访问路径就是 prefix + path，则只需要在对应的服务配置设置 <code>stripPrefix: false</code> 即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br><span class="line"><span class="attr">      stripPrefix:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><p>此时访问： <a href="http://localhost:8989/pre/provider/get-result" target="_blank" rel="noopener">http://localhost:8989/pre/provider/get-result</a> ，返回值为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-02-15T07:24:33.271+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/pre/provider/get-result"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对比两个 404 错误，可以看到，同样是访问 /pre/provider/get-result，没有设置 <code>stripPrefix: false</code> 时，path 为 <code>/provider/get-result</code>，设置 <code>stripPrefix: false</code> 时，path 为 <code>/pre/provider/get-result</code>。即：设置 <code>stripPrefix: false</code> 时，请求路径和实际路径是一致的。</p><h2 id="服务屏蔽、路径屏蔽"><a href="#服务屏蔽、路径屏蔽" class="headerlink" title="服务屏蔽、路径屏蔽"></a>服务屏蔽、路径屏蔽</h2><p>为了避免某些服务、路径被侵入，可以将其屏蔽掉<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">spring-cloud-provider-service-simple</span>    <span class="comment"># 此配置会在 zuul 路由时，忽略掉该服务</span></span><br><span class="line"><span class="attr">  ignored-patterns:</span> <span class="string">/**/get-result/**</span>   <span class="comment"># 此配置会在 zuul 路由时，忽略掉可以匹配的路径</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/pre</span></span><br></pre></td></tr></table></figure></p><h2 id="敏感头信息"><a href="#敏感头信息" class="headerlink" title="敏感头信息"></a>敏感头信息</h2><p>正常访问时，provider-service 接收到的 headers 为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cache-control: no-cache</span><br><span class="line">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span><br><span class="line">postman-token: 43dbfb6e-f529-543e-99d9-5d0a06bf79e6</span><br><span class="line">accept: */*</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=0.9</span><br><span class="line">x-forwarded-host: localhost:8989</span><br><span class="line">x-forwarded-proto: http</span><br><span class="line">x-forwarded-prefix: /provider</span><br><span class="line">x-forwarded-port: 8989</span><br><span class="line">x-forwarded-for: 0:0:0:0:0:0:0:1</span><br><span class="line">content-length: 0</span><br><span class="line">host: 10.10.10.141:8081</span><br><span class="line">connection: Keep-Alive</span><br></pre></td></tr></table></figure></p><p>设置敏感头：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    spring-cloud-provider-service-simple:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/provider/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">spring-cloud-provider-service-simple</span></span><br><span class="line"><span class="attr">      sensitiveHeaders:</span> <span class="string">postman-token,x-forwarded-for,Cookie</span></span><br></pre></td></tr></table></figure></p><p>此时再次访问，获取 headers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cache-control: no-cache</span><br><span class="line">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span><br><span class="line">accept: */*</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=0.9</span><br><span class="line">x-forwarded-host: localhost:8989</span><br><span class="line">x-forwarded-proto: http</span><br><span class="line">x-forwarded-prefix: /provider</span><br><span class="line">x-forwarded-port: 8989</span><br><span class="line">content-length: 0</span><br><span class="line">host: 10.10.10.141:8081</span><br><span class="line">connection: Keep-Alive</span><br></pre></td></tr></table></figure></p><p>对比发现，<code>sensitiveHeaders</code> 配置的 headers 在 provider-service 中已经接收不到了。<br>默认情况下，<code>sensitiveHeaders</code> 会忽略三个 header：<code>Cookie</code>、<code>Set-Cookie</code>、<code>Authorization</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zuul 是由 Netflix 孵化的一个致力于“网关”的解决方案的开源组件。Zuul 在动态路由、监控、弹性、服务治理、安全等方面有着举足轻重的作用。&lt;br&gt;Zuul 底层为 Servlet，本质组件是一系列 Filter 构成的责任链。&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="https://www.laiyy.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（19） --- Actuator(二) &lt;BR&gt; 运行时度量</title>
    <link href="https://www.laiyy.top/spring-cloud/spring-cloud-19.html"/>
    <id>https://www.laiyy.top/spring-cloud/spring-cloud-19.html</id>
    <published>2019-02-13T05:53:28.000Z</published>
    <updated>2019-02-13T05:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>运行时度量端点，包括： /metrics、/trace、/threaddump、/health 等</p><a id="more"></a><hr><h1 id="运行时度量端点"><a href="#运行时度量端点" class="headerlink" title="运行时度量端点"></a>运行时度量端点</h1><h2 id="metrics-端点"><a href="#metrics-端点" class="headerlink" title="metrics 端点"></a>metrics 端点</h2><h3 id="访问结果"><a href="#访问结果" class="headerlink" title="访问结果"></a>访问结果</h3><p>metrics 端点主要用于在项目运行中，查看计数器、度量器等，如：当前可用内存、空闲内存等</p><p>访问：<a href="http://localhost:8080/actuator/metrics" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics</a> ，可用查看所有的计数器、度量器名称， 访问 <a href="http://localhost:8080/actuator/metrics/{name}" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics/{name}</a> 可以查看具体信息</p><p><a href="http://localhost:8080/actuator/metrics" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"names"</span>: [</span><br><span class="line"><span class="string">"jvm.memory.max"</span>,</span><br><span class="line"><span class="string">"jvm.threads.states"</span>,</span><br><span class="line"><span class="string">"jvm.gc.pause"</span>,</span><br><span class="line"><span class="string">"http.server.requests"</span>,</span><br><span class="line"><span class="string">"jvm.gc.memory.promoted"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://localhost:8080/actuator/metrics/jvm.memory.max" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics/jvm.memory.max</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"name": "jvm.memory.max",   // 名称</span><br><span class="line">"description": "The maximum amount of memory in bytes that can be used for memory management",    // 介绍</span><br><span class="line">"baseUnit": "bytes",    // 单位</span><br><span class="line">"measurements": [&#123;</span><br><span class="line">"statistic": "VALUE",</span><br><span class="line">"value": 5579472895     // 大小，单位 bytes</span><br><span class="line">&#125;],</span><br><span class="line">"availableTags": [&#123;</span><br><span class="line">"tag": "area",</span><br><span class="line">"values": [</span><br><span class="line">"heap",</span><br><span class="line"><span class="string">"nonheap"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"id"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [</span><br><span class="line"><span class="string">"Compressed Class Space"</span>,</span><br><span class="line"><span class="string">"PS Survivor Space"</span>,</span><br><span class="line"><span class="string">"PS Old Gen"</span>,</span><br><span class="line"><span class="string">"Metaspace"</span>,</span><br><span class="line"><span class="string">"PS Eden Space"</span>,</span><br><span class="line"><span class="string">"Code Cache"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://localhost:8080/actuator/metrics/http.server.requests" target="_blank" rel="noopener">http://localhost:8080/actuator/metrics/http.server.requests</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"http.server.requests"</span>,</span><br><span class="line"><span class="attr">"description"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"baseUnit"</span>: <span class="string">"seconds"</span>,   </span><br><span class="line"><span class="attr">"measurements"</span>: [&#123;</span><br><span class="line"><span class="attr">"statistic"</span>: <span class="string">"COUNT"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="number">28</span>   // 发起的请求总数</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"statistic"</span>: <span class="string">"TOTAL_TIME"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="number">1.9647074519999999</span>   // 总时长</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"statistic"</span>: <span class="string">"MAX"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="number">0.002769728</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"availableTags"</span>: [&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"exception"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [</span><br><span class="line"><span class="string">"None"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"method"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [</span><br><span class="line"><span class="string">"GET"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"uri"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [     // 访问过的 uri</span><br><span class="line"><span class="string">"/actuator/caches"</span>,</span><br><span class="line"><span class="string">"/**/favicon.ico"</span>,</span><br><span class="line"><span class="string">"/actuator/threaddump"</span>,</span><br><span class="line"><span class="string">"/actuator/env/&#123;toMatch&#125;"</span>,</span><br><span class="line"><span class="string">"/actuator/loggers"</span>,</span><br><span class="line"><span class="string">"/actuator/mappings"</span>,</span><br><span class="line"><span class="string">"/actuator/auditevents"</span>,</span><br><span class="line"><span class="string">"/**"</span>,</span><br><span class="line"><span class="string">"/actuator/env"</span>,</span><br><span class="line"><span class="string">"/actuator/metrics/&#123;requiredMetricName&#125;"</span>,</span><br><span class="line"><span class="string">"/actuator"</span>,</span><br><span class="line"><span class="string">"/actuator/beans"</span>,</span><br><span class="line"><span class="string">"/actuator/httptrace"</span>,</span><br><span class="line"><span class="string">"/actuator/loggers/&#123;name&#125;"</span>,</span><br><span class="line"><span class="string">"/actuator/scheduledtasks"</span>,</span><br><span class="line"><span class="string">"/actuator/conditions"</span>,</span><br><span class="line"><span class="string">"/actuator/heapdump"</span>,</span><br><span class="line"><span class="string">"/actuator/metrics"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"outcome"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [</span><br><span class="line"><span class="string">"CLIENT_ERROR"</span>,</span><br><span class="line"><span class="string">"SUCCESS"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"status"</span>,</span><br><span class="line"><span class="attr">"values"</span>: [</span><br><span class="line"><span class="string">"404"</span>,</span><br><span class="line"><span class="string">"200"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="metrics-端点介绍"><a href="#metrics-端点介绍" class="headerlink" title="metrics 端点介绍"></a>metrics 端点介绍</h3><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">分类</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">jvm.gc.*</td><td style="text-align:center">垃圾收集器</td><td style="text-align:center">已经发生过的垃圾收集次数、消耗时间，使用与标记-请求垃圾收集器和并行垃圾收集器<code>java.lang.management.GarbageCollectorMXBean</code></td></tr><tr><td style="text-align:center">jvm.memory.*</td><td style="text-align:center">内存相关</td><td style="text-align:center">分配给应用程序的内存数量和空闲的内容数量等 <code>java.lang.Runtime</code></td></tr><tr><td style="text-align:center">jvm.classes.*</td><td style="text-align:center">类加载器</td><td style="text-align:center">JVM 类加载器加载与卸载的类的数量 <code>java.lang.management.ClassLoadingMXBean</code></td></tr><tr><td style="text-align:center">process.*、system.cpu</td><td style="text-align:center">系统</td><td style="text-align:center">系统信息，如：处理器数量<code>java.lang.Runtime</code>、运行时间<code>java.lang.management.RuntimeMXBean</code>、平均负载<code>java.lang.management.OperatingSystemMXBean</code></td></tr><tr><td style="text-align:center">jvm.threads.*</td><td style="text-align:center">JVM 线程池</td><td style="text-align:center">JVM 线程、守护线程数量、峰值等 <code>java.lang.management.ThreadMXBean</code></td></tr><tr><td style="text-align:center">tomcat.*</td><td style="text-align:center">tomcat</td><td style="text-align:center">tomcat 相关内容</td></tr><tr><td style="text-align:center">datasource.*</td><td style="text-align:center">数据源</td><td style="text-align:center">数据源链接数据等，仅当 Spring 上下文存在 DataSource 才会有这个信息</td></tr></tbody></table><h2 id="httptrace-端点"><a href="#httptrace-端点" class="headerlink" title="httptrace 端点"></a>httptrace 端点</h2><p>httptrace 端点主要用于报告所有的 web 请求的详细信息，包括：请求方法、路径、时间戳、头信息等。<a href="http://localhost:8080/actuator/httptrace/" target="_blank" rel="noopener">http://localhost:8080/actuator/httptrace/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"traces"</span>: [&#123;</span><br><span class="line">"timestamp": "2019-02-13T06:29:35.039Z",// 时间戳</span><br><span class="line">"principal": null,</span><br><span class="line">"session": null,</span><br><span class="line">"request": &#123;// 请求</span><br><span class="line">"method": "GET",// 请求方式</span><br><span class="line">"uri": "http://localhost:8080/actuator/httptrace/",// 请求路径</span><br><span class="line">"headers": &#123;// 请求 Headers</span><br><span class="line">"cookie": [ </span><br><span class="line"><span class="string">"yfx_c_g_u_id_10000001=_ck19021309350014873926766957773; yfx_f_l_v_t_10000001=f_t_1550021700485__r_t_1550021700485__v_t_1550021700485__r_c_0"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">"remoteAddress": null// 远程地址</span><br><span class="line">&#125;,</span><br><span class="line">"response": &#123;// 响应</span><br><span class="line">"status": 200,// 响应码</span><br><span class="line">"headers": &#123;// 响应 Header</span><br><span class="line">"Content-Type": [</span><br><span class="line"><span class="string">"application/vnd.spring-boot.actuator.v2+json;charset=UTF-8"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"timeTaken": 36// 用时</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意，/httptrace 端点只能显示最近的 100 个请求信息，其中也包含对 /httptrace 端点自己的请求。</p><h2 id="threaddump-端点"><a href="#threaddump-端点" class="headerlink" title="threaddump 端点"></a>threaddump 端点</h2><p>threaddump 端点可以查看的应用程序的每个线程，其中包含线程的阻塞状态、所状态等，<a href="http://localhost:8080/actuator/threaddump/" target="_blank" rel="noopener">http://localhost:8080/actuator/threaddump/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"threads"</span>: [&#123;</span><br><span class="line">"threadName": "DestroyJavaVM",// 线程名称</span><br><span class="line">"threadId": 44,// 线程 id</span><br><span class="line">"blockedTime": -1,</span><br><span class="line">"blockedCount": 0,</span><br><span class="line">"waitedTime": -1,</span><br><span class="line">"waitedCount": 0,</span><br><span class="line">"lockName": null,</span><br><span class="line">"lockOwnerId": -1,</span><br><span class="line">"lockOwnerName": null,</span><br><span class="line">"inNative": false,</span><br><span class="line">"suspended": false,</span><br><span class="line">"threadState": "RUNNABLE",// 线程状态</span><br><span class="line">"stackTrace": [],// 跟踪栈</span><br><span class="line">"lockedMonitors": [],</span><br><span class="line">"lockedSynchronizers": [],</span><br><span class="line">"lockInfo": null</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="health-端点"><a href="#health-端点" class="headerlink" title="health 端点"></a>health 端点</h2><p>health 端点：查看当前应用程序的运行状态。 <a href="http://localhost:8080/actuator/health/" target="_blank" rel="noopener">http://localhost:8080/actuator/health/</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>health 端点在特定情况下，会有额外的信息，如：登录状态、数据库状态等</p><h3 id="Spring-Boot-自带的监控指示器"><a href="#Spring-Boot-自带的监控指示器" class="headerlink" title="Spring Boot 自带的监控指示器"></a>Spring Boot 自带的监控指示器</h3><table><thead><tr><th style="text-align:center">键</th><th style="text-align:center">健康指示器</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">none</td><td style="text-align:center">ApplicationHealthIndicator</td><td style="text-align:center">永远为 UP</td></tr><tr><td style="text-align:center">db</td><td style="text-align:center">DataSourceHealthIndicator</td><td style="text-align:center">如果数据库能连上，则内容为 UP 和数据库类型；否则为 DOWN</td></tr><tr><td style="text-align:center">diskSpace</td><td style="text-align:center">DiskSpaceHealthIndicator</td><td style="text-align:center">如果可用空间大于阈值，则内容为 UP 和可用磁盘内容；否则为 DOWN</td></tr><tr><td style="text-align:center">jms</td><td style="text-align:center">JmsHealthIndicator</td><td style="text-align:center">如果能连上消息代理，则为 UP 和 JMS 提供方名称；否则为 DOWN</td></tr><tr><td style="text-align:center">mail</td><td style="text-align:center">MailHealthIndicator</td><td style="text-align:center">如果能连上邮件服务器，则内容为 UP 个邮件服务器主机、端口；否则为 DOWN</td></tr><tr><td style="text-align:center">mongo</td><td style="text-align:center">MongoHealthIndicator</td><td style="text-align:center">如果能连上 MongoDb 服务器，则内容为 UP 和 MongoDB 服务器版本；否则为 DOWN</td></tr><tr><td style="text-align:center">rabbit</td><td style="text-align:center">RabbitHealthIndicator</td><td style="text-align:center">如果能连上 Rabbit 服务器，则内容为 UP 和 Rabbit 版本号；否则为 DOWN</td></tr><tr><td style="text-align:center">redis</td><td style="text-align:center">RedisHealthIndicator</td><td style="text-align:center">如果能连上 Redis 服务器，则内容为 UP 和 Redis 服务器版本；否则为 DOWN</td></tr><tr><td style="text-align:center">solr</td><td style="text-align:center">SolrHealthIndicator</td><td style="text-align:center">如果能连上 Solr 服务器，则内容为 UP ；否则为 DOWN</td></tr></tbody></table><hr><h1 id="关闭应用程序"><a href="#关闭应用程序" class="headerlink" title="关闭应用程序"></a>关闭应用程序</h1><p>关闭应用程序可以使用 /actuator/shutdown 端点，使用 POST 请求 <a href="http://localhost:8080/actuator/shutdown" target="_blank" rel="noopener">http://localhost:8080/actuator/shutdown</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-02-13T07:46:54.614+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/actuator/shutdown"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是因为为了保护应用程序，shutdown 端点没有打开的原因，需要打开 shutdown 端点<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    shutdown:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>再次请求：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Shutting down, bye..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="获取应用信息"><a href="#获取应用信息" class="headerlink" title="获取应用信息"></a>获取应用信息</h1><p>获取应用信息使用 /actuator/info 端点，默认的响应是：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过带 info 前缀的属性，向 info 端点的响应增加内容，如：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="attr">  contect:</span></span><br><span class="line"><span class="attr">    email:</span> <span class="string">laiyy0728@gmail.com</span></span><br><span class="line"><span class="attr">    phone:</span> <span class="number">18888888888</span></span><br></pre></td></tr></table></figure></p><p>再次请求：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"contect"</span>: &#123;</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"laiyy0728@gmail.com"</span>,</span><br><span class="line">        <span class="attr">"phone"</span>: <span class="number">18888888888</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行时度量端点，包括： /metrics、/trace、/threaddump、/health 等&lt;/p&gt;
    
    </summary>
    
      <category term="spring-cloud" scheme="https://www.laiyy.top/categories/spring-cloud/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="SpringBoot" scheme="https://www.laiyy.top/tags/SpringBoot/"/>
    
      <category term="Actuator" scheme="https://www.laiyy.top/tags/Actuator/"/>
    
  </entry>
  
</feed>
