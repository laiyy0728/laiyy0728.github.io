<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laiyy 的个人小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.laiyy.top/"/>
  <updated>2019-01-25T06:57:14.000Z</updated>
  <id>https://www.laiyy.top/</id>
  
  <author>
    <name>Laiyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud 微服务（11） --- Ribbon(一) &lt;BR&gt; 负载均衡与 Ribbon</title>
    <link href="https://www.laiyy.top/java/2019/01-25/spring-cloud-11.html"/>
    <id>https://www.laiyy.top/java/2019/01-25/spring-cloud-11.html</id>
    <published>2019-01-25T06:57:14.000Z</published>
    <updated>2019-01-25T06:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常所说的负载均衡，一般来说都是在服务器端使用 Ngnix 或 F5 做 Server 的负载均衡策略，在 Ribbon 中提到的负载均衡，一般来说是指的<code>客户端负载均衡</code>，即 ServiceA 调用 ServiceB，有多个 ServiceB 的情况下，由 ServiceA 选择调用哪个 ServiceB。</p><a id="more"></a><h1 id="负载均衡与-Ribbon"><a href="#负载均衡与-Ribbon" class="headerlink" title="负载均衡与 Ribbon"></a>负载均衡与 Ribbon</h1><p>负载均衡(Load Balance)，是一种利用特定方式，将流量分摊到多个操作单元上的手段，它对系统吞吐量、系统处理能力有着质的提升。最常见的负载均衡分类方式有：软负载、硬负载，对应 Ngnix、F5；集中式负载均衡、进程内负载均衡。集中式负载均衡是指位于网络和服务提供者之间，并负责把忘了请求转发到各个提供单位，代表产品有 Ngnix、F5；进程负载均衡是指从一个实例库选取一个实例进行流量导入，在微服务范畴，实例库一般是存储在 Eureka、Consul、Zookeeper 等注册中心，此时的负载均衡器类似 Ribbon 的 IPC（进程间通信）组件，因此进程内负载均衡也叫做客户端负载均衡。</p><p>Ribbon 是一个客户端负载均衡器，赋予了应用一些支配 HTTP 与 TCP 行为的能力，由此可以得知，这里的客户端负载均衡也是进程内负载均衡的一周。 Ribbon 在 SpringCloud 生态内的不可缺少的组件，没有了 Ribbon，服务就不能横向扩展。Feign、Zuul 已经集成了 Ribbon。</p><hr><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>Eureka Server 不再赘述，可以直接使用 <code>spring-cloud-eureka-server-simple</code>。</p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>yml：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-ribbon-consumer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure></p><p>配置类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>@LoadBalanced</code>：对 RestTemplate 启动负载均衡</p><p>Consumer Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsumerController</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/check"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">checkRibbonProvider</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://spring-cloud-ribbon-provider/check"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h2><p>pom 依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-ribbon-provider</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure></p><p>ProviderContr<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/check"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providerPort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Provider Port: "</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>分别启动 Eureka Server、Consumer、Provider，其中，Provider 以 mvn 形式启动，绑定不同的端口号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run -Dserver.port=8080</span><br><span class="line">mvn spring-boot:run -Dserver.port=8081</span><br></pre></td></tr></table></figure></p><p>postman 访问 Consumer<br><img src="/images/spring-cloud/ribbon/ribbon-1.png" alt="第一次请求"><br><img src="/images/spring-cloud/ribbon/ribbon-2.png" alt="第二次请求"></p><p>可以看到，Provider 两次返回值不一样，验证了负载均衡成功。</p><hr><h1 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h1><p>Ribbon 中提供了 <code>七种</code> 负载均衡策略</p><table><thead><tr><th style="text-align:center">策略类</th><th style="text-align:center">命名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">RandomRule</td><td style="text-align:center">随机策略</td><td style="text-align:center">随机选择 Server</td></tr><tr><td style="text-align:center">RoundRobinRule</td><td style="text-align:center">轮询策略</td><td style="text-align:center">按照顺序循环选择 Server</td></tr><tr><td style="text-align:center">RetryRule</td><td style="text-align:center">重试策略</td><td style="text-align:center">在一个配置时间段内，当选择的 Server 不成功，则一直尝试选择一个可用的 Server</td></tr><tr><td style="text-align:center">BestAvailableRule</td><td style="text-align:center">最低并发策略</td><td style="text-align:center">逐个考察 Server，如果 Server 的断路器被打开，则忽略，在不被忽略的 Server 中选择并发连接最低的 Server</td></tr><tr><td style="text-align:center">AvailabilityFilteringRule</td><td style="text-align:center">可用过滤测试</td><td style="text-align:center">过滤掉一直连接失败，并被标记未 circuit tripped（即不可用） 的 Server，过滤掉高并发的 Server</td></tr><tr><td style="text-align:center">ResponseTimeWeightedRule</td><td style="text-align:center">响应时间加权策略</td><td style="text-align:center">根据 Server 的响应时间分配权重，响应时间越长，权重越低，被选择到的几率就越低</td></tr><tr><td style="text-align:center">ZoneAvoidanceRule</td><td style="text-align:center">区域权衡策略</td><td style="text-align:center">综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，并判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server</td></tr></tbody></table><p>Ribbon 默认的负载均衡策略是 <code>轮询策略</code>。</p><h2 id="设置负载均衡策略"><a href="#设置负载均衡策略" class="headerlink" title="设置负载均衡策略"></a>设置负载均衡策略</h2><h3 id="设置全局负载均衡"><a href="#设置全局负载均衡" class="headerlink" title="设置全局负载均衡"></a>设置全局负载均衡</h3><p>创建一个声明式配置，即可实现全局负载均衡配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局负载均衡配置：随机策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Consumer，访问测试</p><h2 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h2><h3 id="空注解"><a href="#空注解" class="headerlink" title="空注解"></a>空注解</h3><p>声明一个空注解，用于使用注解配置 Ribbon 负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RibbonAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡配置类"><a href="#负载均衡配置类" class="headerlink" title="负载均衡配置类"></a>负载均衡配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RibbonAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonAnnoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IClientConfig clientConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RibbonAnnoConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientConfig = clientConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig clientConfig)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"spring-cloud-ribbon-provider"</span>, configuration = RibbonAnnoConfig.class)</span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;<span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, value = RibbonAnnotation.class)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudRibbonConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudRibbonConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RibbonClient</code>：针对 <code>spring-cloud-ribbon-provider</code> 服务，使用负载均衡，配置类是 <code>configuration</code> 标注的类。<br><code>@ComponentScan</code>：让 Spring 不去扫描被 <code>@RibbonAnnotation</code> 类标记的配置类，因为我们的配置对单个服务生效，不能应用于全局，如果不排除，启动就会报错</p><p>如果需要对多个服务进行配置，可以使用 <code>@RibbonClients</code> 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClients</span>(value = &#123;</span><br><span class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"spring-cloud-ribbon-provider"</span>, configuration = RibbonAnnoConfig.class)        </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>重启 Consumer，验证基于注解的负载均衡是否成功</p><h2 id="基于配置文件的负载均衡策略"><a href="#基于配置文件的负载均衡策略" class="headerlink" title="基于配置文件的负载均衡策略"></a>基于配置文件的负载均衡策略</h2><p>语法：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;instance-id&#125;:</span> <span class="comment"># instance-id 即被调用服务名称</span></span><br><span class="line"><span class="attr">    ribbon:</span></span><br><span class="line"><span class="attr">        NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></p><hr><h1 id="Ribbon-配置"><a href="#Ribbon-配置" class="headerlink" title="Ribbon 配置"></a>Ribbon 配置</h1><h2 id="超时与重试"><a href="#超时与重试" class="headerlink" title="超时与重试"></a>超时与重试</h2><p>HTTP 请求难免会出现请求超时，此时对调用进行时限的控制以及在时限之后的重试尤为重要。对于超时重试的配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;instance-id&#125;:</span> <span class="comment"># instance-id 指的是被调用者的服务名称</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    ConnectTimeout:</span> <span class="number">30000</span> <span class="comment"># 链接超时时间</span></span><br><span class="line"><span class="attr">    ReadTimeout:</span> <span class="number">30000</span> <span class="comment"># 读超时时间</span></span><br><span class="line"><span class="attr">    MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 对第一次请求的服务的重试次数</span></span><br><span class="line"><span class="attr">    MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 要重试的下一个服务的最大数量（不包括第一个服务）</span></span><br><span class="line"><span class="attr">    OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 是否对 连接超时、读超时、写超时 都进行重试</span></span><br></pre></td></tr></table></figure></p><h2 id="Ribbon-饥饿加载"><a href="#Ribbon-饥饿加载" class="headerlink" title="Ribbon 饥饿加载"></a>Ribbon 饥饿加载</h2><p>Ribbon 在进行负载均衡时，并不是启动时就加载上线文，而是在实际的请求发送时，才去请求上下文信息，获取被调用者的 ip、端口，这种方式在网络环境较差时，往往会使得第一次引起超时，导致调用失败。此时需要指定 Ribbon 客户端，进行<code>饥饿加载</code>，即：在启动时就加载好上下文。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  eager-load:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    clients:</span> <span class="string">spring-cloid-ribbon-provider</span></span><br></pre></td></tr></table></figure><p>此时启动 consumer，会看到控制打印信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Client: spring-cloid-ribbon-provider instantiated a LoadBalancer: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=spring-cloid-ribbon-provider,current list of Servers=[],Load balancer stats=Zone stats: &#123;&#125;,Server stats: []&#125;ServerList:null</span><br><span class="line">Using serverListUpdater PollingServerListUpdater</span><br><span class="line">DynamicServerListLoadBalancer for client spring-cloid-ribbon-provider initialized: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=spring-cloid-ribbon-provider,current list of Servers=[],Load balancer stats=Zone stats: &#123;&#125;,Server stats: []&#125;ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@79e7188e</span><br></pre></td></tr></table></figure></p><p>可以看到启动时就加载了 <code>spring-cloid-ribbon-provider</code>，并绑定了<code>LoadBalancer</code></p><h2 id="Ribbon-常用配置"><a href="#Ribbon-常用配置" class="headerlink" title="Ribbon 常用配置"></a>Ribbon 常用配置</h2><table><thead><tr><th style="text-align:center">配置项</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">{instance-id}:ribbon.NFLoadBalancerClassName</td><td style="text-align:center">指负载均衡器类路径</td></tr><tr><td style="text-align:center">{instance-id}:ribbon:NFLoadBalancerRuleClassName</td><td style="text-align:center">指定负载均衡算法类路径</td></tr><tr><td style="text-align:center">{instance-id}:ribbom:NFLoadBalancerPingClassName</td><td style="text-align:center">指定检测服务存活的类路径</td></tr><tr><td style="text-align:center">{instance-id}:ribbon:NIWSServerListClassName</td><td style="text-align:center">指定获取服务列表的实现类路径</td></tr><tr><td style="text-align:center">{instance-id}:ribbon:NIWSServerListFilterClassName</td><td style="text-align:center">指定服务的 Filter 实现类路径</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常所说的负载均衡，一般来说都是在服务器端使用 Ngnix 或 F5 做 Server 的负载均衡策略，在 Ribbon 中提到的负载均衡，一般来说是指的&lt;code&gt;客户端负载均衡&lt;/code&gt;，即 ServiceA 调用 ServiceB，有多个 ServiceB 的情况下，由 ServiceA 选择调用哪个 ServiceB。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Ribbon" scheme="https://www.laiyy.top/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务 （10） --- Feign(四)  &lt;BR&gt; 文件上传、首次调用失败问题</title>
    <link href="https://www.laiyy.top/java/2019/01-24/spring-cloud-10.html"/>
    <id>https://www.laiyy.top/java/2019/01-24/spring-cloud-10.html</id>
    <published>2019-01-24T09:05:01.000Z</published>
    <updated>2019-01-24T09:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Feign 在远程调用时，除了 GET 方式传递 POJO 外，还有几个很重要的功能：<code>文件上传</code>、<code>调用返回图片流</code>、<code>传递 Token</code> 等</p><a id="more"></a><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>Feign 的子项目 feign-form(<a href="https://github.com/OpenFeign/feign-form" target="_blank" rel="noopener">https://github.com/OpenFeign/feign-form</a>) 支持文件上传，其中实现了上传所需要的 Encoder</p><p>模拟文件上传：<code>spring-cloud-feign-file-server</code>、<code>spring-cloud-feign-file-client</code>，其中 server 模拟文件服务器，作为服务提供者；client 模拟文件上传，通过 FeignClient 发送文件到文件服务器</p><h2 id="FileClient"><a href="#FileClient" class="headerlink" title="FileClient"></a>FileClient</h2><h3 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- feign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Feign文件上传依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign.form<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-form-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-feign-file-client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h3 id="启动类、FeignClient、配置、Controller"><a href="#启动类、FeignClient、配置、Controller" class="headerlink" title="启动类、FeignClient、配置、Controller"></a>启动类、FeignClient、配置、Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignFileClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignFileClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FeignClient</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"spring-cloud-feign-file-server"</span>, configuration = FeignMultipartConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileUploadFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * feign 上传图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * produces、consumes 必填</span></span><br><span class="line"><span class="comment">     * 不要将 <span class="doctag">@RequestPart</span> 写成 <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 上传的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 上传的文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/upload-file"</span>, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function">String <span class="title">fileUpload</span><span class="params">(@RequestPart(value = <span class="string">"file"</span>)</span>MultipartFile file)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// configuration</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignMultipartConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign Spring 表单编码器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表单编码器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">multipartEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringFormEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FileUploadFeignClient feignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileUploadController</span><span class="params">(FileUploadFeignClient feignClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.feignClient = feignClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignClient.fileUpload(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileServer"><a href="#FileServer" class="headerlink" title="FileServer"></a>FileServer</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-feign-file-server</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8889</span></span><br></pre></td></tr></table></figure><h3 id="启动类、Controller"><a href="#启动类、Controller" class="headerlink" title="启动类、Controller"></a>启动类、Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignFileServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignFileServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller 模拟文件上传的处理</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/upload-file"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证文件上传"><a href="#验证文件上传" class="headerlink" title="验证文件上传"></a>验证文件上传</h2><p>POST MAN 调用 client 上传接口</p><p><img src="/images/spring-cloud/feign/file-upload.png" alt="file upload"></p><hr><h1 id="图片流"><a href="#图片流" class="headerlink" title="图片流"></a>图片流</h1><p>通过 Feign 返回图片，一般是字节数组</p><p>在<code>文件上传</code>代码的基础上，再加上图片获取</p><h2 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取图片</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 图片</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/get-img"</span>)</span><br><span class="line">ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; getImage();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/get-img"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; getImage()&#123;</span><br><span class="line">    <span class="keyword">return</span> feignClient.getImage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FeignServer"><a href="#FeignServer" class="headerlink" title="FeignServer"></a>FeignServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/get-img"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; getImages() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    FileSystemResource resource = <span class="keyword">new</span> FileSystemResource(getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"Spring-Cloud.png"</span>);</span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">"Content-Type"</span>, MediaType.APPLICATION_OCTET_STREAM_VALUE);</span><br><span class="line">    headers.add(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename=Spring-Cloud.png"</span>);</span><br><span class="line">    <span class="keyword">return</span>  ResponseEntity.status(HttpStatus.OK).headers(headers).body(FileCopyUtils.copyToByteArray(resource.getInputStream()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>在浏览器访问：<a href="http://localhost:8888/get-img" target="_blank" rel="noopener">http://localhost:8888/get-img</a> ，实现图片流下载</p><hr><h1 id="Feign-传递-Headers"><a href="#Feign-传递-Headers" class="headerlink" title="Feign 传递 Headers"></a>Feign 传递 Headers</h1><p>在认证、鉴权中，无论是哪种权限控制框架，都需要传递 header，但在使用 Feign 的时候，会发现外部请求 ServiceA 时，可以获取到 header，但是在 ServiceA 调用 ServiceB 时，ServiceB 无法获取到 Header，导致 Header 丢失。</p><p>在 <code>spring-cloud-feign-multi-params</code> 基础上，实现传递 Header。</p><h2 id="验证-Header-无法传递问题"><a href="#验证-Header-无法传递问题" class="headerlink" title="验证 Header 无法传递问题"></a>验证 Header 无法传递问题</h2><p><img src="/images/spring-cloud/feign/post-man-header1.png" alt="post man 传递 header1"></p><p>consumer 打印 header<br><img src="/images/spring-cloud/feign/consumer-header.png" alt="Consumer 打印 header"></p><p>provider 打印 header<br><img src="/images/spring-cloud/feign/provider-header.png" alt="Provider 打印 header"></p><h2 id="HeaderInterceptor"><a href="#HeaderInterceptor" class="headerlink" title="HeaderInterceptor"></a>HeaderInterceptor</h2><p>在 Consumer 增加 HeaderInterceptor，做 header 传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignHeaderInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == getRequest())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        template.header(<span class="string">"oauth-token"</span>, getHeaders(getRequest()).get(<span class="string">"oauth-token"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpServletRequest <span class="title">getRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">            String key = headerNames.nextElement();</span><br><span class="line">            String value = request.getHeader(key);</span><br><span class="line">            headers.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证-header"><a href="#验证-header" class="headerlink" title="验证 header"></a>验证 header</h2><p>用 postman 重新请求一遍，查看 provider 控制台打印：</p><p><img src="/images/spring-cloud/feign/provider-header-success.png" alt="provider header"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Feign 在远程调用时，除了 GET 方式传递 POJO 外，还有几个很重要的功能：&lt;code&gt;文件上传&lt;/code&gt;、&lt;code&gt;调用返回图片流&lt;/code&gt;、&lt;code&gt;传递 Token&lt;/code&gt; 等&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="https://www.laiyy.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（9） --- Feign(三) &lt;BR&gt; http client 替换、GET 方式传递 POJO等</title>
    <link href="https://www.laiyy.top/java/2019/01-23/spring-cloud-9.html"/>
    <id>https://www.laiyy.top/java/2019/01-23/spring-cloud-9.html</id>
    <published>2019-01-23T08:46:48.000Z</published>
    <updated>2019-01-23T08:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了 FeignClient 的配置、请求响应的压缩后，基本的调用已经没有问题。<br>接下来就需要了解 Feign 多参数传递、文件上传、header 传递 token、请求失败、图片流 等问题的解决，以及 HTTP Client 替换的问题。</p><a id="more"></a><h1 id="Http-Client-替换"><a href="#Http-Client-替换" class="headerlink" title="Http Client 替换"></a>Http Client 替换</h1><p>Feign 默认情况下使用的是 JDK 原生的 URLConnection 发送 HTTP 请求，没有连接池，但是对每个地址都会保持一个长连接。可以利用 Apache HTTP Client 替换原始的 URLConnection，通过设置连接池、超时时间等，对服务调用进行调优。</p><p>在类 <code>feign/Client$Default.java</code> 中，可以看到，默认执行 http 请求的是 URLConnection<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Default</span> <span class="keyword">implements</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      HttpURLConnection connection = convertAndSend(request, options);</span><br><span class="line">      <span class="keyword">return</span> convertResponse(connection).toBuilder().request(request).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在类 <code>org/springframework/cloud/openfeign/ribbon/FeignRibbonClientAutoConfiguration.java</code> 中，可以看到引入了三个类：<code>HttpClientFeignLoadBalancedConfiguration</code>、<code>OkHttpFeignLoadBalancedConfiguration</code>、<code>DefaultFeignLoadBalancedConfiguration</code></p><p>可以看到在 <code>DefaultFeignLoadBalancedConfiguration</code> 中，使用的是 <code>Client.Default</code>，即使用 URLConnection</p><h2 id="使用-Apache-Http-Client-替换-URLConnection"><a href="#使用-Apache-Http-Client-替换-URLConnection" class="headerlink" title="使用 Apache Http Client 替换 URLConnection"></a>使用 Apache Http Client 替换 URLConnection</h2><h3 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入 feign 对 httpclient 的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.feign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  httpclient:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="查看验证配置"><a href="#查看验证配置" class="headerlink" title="查看验证配置"></a>查看验证配置</h3><p>在类 <code>HttpClientFeignLoadBalancedConfiguration</code> 上，有注解：<code>@ConditionalOnClass(ApacheHttpClient.class)</code>、<code>@ConditionalOnProperty(value = &quot;feign.httpclient.enabled&quot;, matchIfMissing = true)</code>：在 <code>ApacheHttpClient</code> 类存在且 <code>feign.httpclient.enabled</code> 为 true 时启用配置。</p><p>在 <code>HttpClientFeignLoadBalancedConfiguration</code> 123 行打上断点，重新启动项目，可以看到确实进行了 ApacheHttpClient 的声明。在将 <code>feign.httpclient.enabled</code> 设置为 false 后，断点就进不来了。由此可以验证 ApacheHttpClient 替换成功。</p><h2 id="使用-OkHttp-替换-URLConnection"><a href="#使用-OkHttp-替换-URLConnection" class="headerlink" title="使用 OkHttp 替换 URLConnection"></a>使用 OkHttp 替换 URLConnection</h2><h3 id="pom-依赖-1"><a href="#pom-依赖-1" class="headerlink" title="pom 依赖"></a>pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  httpclient:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  okhttp:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>在 <code>OkHttpFeignLoadBalancedConfiguration</code> 第 84 行打断点，重新启动项目，可以看到成功进入断点；当把 <code>feign.okhttp.enabled</code> 设置为 false 后，重新启动项目，没进入断点。证明 OkHttp 替换成功。</p><hr><h1 id="GET-方式传递-POJO等"><a href="#GET-方式传递-POJO等" class="headerlink" title="GET 方式传递 POJO等"></a>GET 方式传递 POJO等</h1><p>SpringMVC 是支持 GET 方法直接绑定 POJI 的，但是 Feign 的实现并未覆盖所有 SpringMVC 的功能，常用的解决方式：</p><ul><li>把 POJO 拆散成一个一个单独的属性放在方法参数里</li><li>把方法参数变成 Map 传递</li><li>使用 GET 传递 @RequestBody，这种方式有违 RESTFul。</li></ul><p>实现 Feign 的 RequestInterceptor 中的 apply 方法，统一拦截转换处理 Feign 中 GET 方法传递 POJO 问题。而 Feign 进行 POST 多参数传递要比 Get 简单。</p><h2 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h2><p>provider 用于模拟用户查询、修改操作，作为服务生产者</p><h3 id="pom-依赖："><a href="#pom-依赖：" class="headerlink" title="pom 依赖："></a>pom 依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-feign-multi-params-provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><h3 id="实体、启动类、Controller"><a href="#实体、启动类、Controller" class="headerlink" title="实体、启动类、Controller"></a>实体、启动类、Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignMultiParamsProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignMultiParamsProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello!"</span> + user.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello! modifying "</span> + user.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><p>consumer 用于模拟服务调用，属于服务消费者，调用 provider 的具体实现</p><h3 id="pom-依赖：-1"><a href="#pom-依赖：-1" class="headerlink" title="pom 依赖："></a>pom 依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件：-1"><a href="#配置文件：-1" class="headerlink" title="配置文件："></a>配置文件：</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-feign-multi-params-consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8889</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      spring-cloud-feign-multi-params-provider:</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.laiyy.gitee.feign.multi.params.springcloudfeignmultiparamscomsumer.MultiParamsProviderFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="实体、启动类、Controller、FeignClient"><a href="#实体、启动类、Controller、FeignClient" class="headerlink" title="实体、启动类、Controller、FeignClient"></a>实体、启动类、Controller、FeignClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 实体与 provider 一致，不再赘述</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignMultiParamsComsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignMultiParamsComsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MultiParamsProviderFeignClient feignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(MultiParamsProviderFeignClient feignClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.feignClient = feignClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"add-user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignClient.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"update-user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignClient.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FeignClient</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"spring-cloud-feign-multi-params-provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultiParamsProviderFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GET 方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/add"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST 方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/update"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function">String <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证调用"><a href="#验证调用" class="headerlink" title="验证调用"></a>验证调用</h2><p>使用 POST MAN 测试工具，调用 consumer 接口，利用 Feign 进行远程调用</p><p>调用 <code>update-user</code>，验证调用成功</p><p><img src="/images/spring-cloud/feign/feign-multi-params-update.png" alt="POST 方式调用 update"></p><p>调用 <code>add-user</code>，验证调用失败</p><p><img src="/images/spring-cloud/feign/feign-multi-params-get-user.png" alt="GET 方式调用 add"></p><p>控制台报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;timestamp&quot;:&quot;2019-01-24T08:24:42.887+0000&quot;,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;message&quot;:&quot;Request method &apos;POST&apos; not supported&quot;,&quot;path&quot;:&quot;/user/add&quot;&#125;] with root cause</span><br><span class="line"></span><br><span class="line">feign.FeignException: status 405 reading MultiParamsProviderFeignClient#addUser(User); content:</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2019-01-24T08:24:42.887+0000&quot;,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;message&quot;:&quot;Request method &apos;POST&apos; not supported&quot;,&quot;path&quot;:&quot;/user/add&quot;&#125;</span><br><span class="line">at feign.FeignException.errorStatus(FeignException.java:62) ~[feign-core-9.5.1.jar:na]</span><br><span class="line">at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:91) ~[feign-core-9.5.1.jar:na]</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:138) ~[feign-core-9.5.1.jar:na]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>命名是 GET 调用，为什么到底层就变成了 POST 调用？</p><h2 id="GET-传递-POJO-解决方案"><a href="#GET-传递-POJO-解决方案" class="headerlink" title="GET 传递 POJO 解决方案"></a>GET 传递 POJO 解决方案</h2><p>Feign 的远程调用中，GET 是不能传递 POJO 的，否则就是 POST，为了解决这个错误，可以实现 RequestInterceptor，解析 POJO，传递 Map 即可解决</p><p>在 consumer 中，增加一个实体类，用于解析 POJO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> laiyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/24 10:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实现 Feign Request 拦截器，实现 GET 传递 POJO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignRequestInterceptor</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"GET"</span>.equals(template.method()) &amp;&amp; template.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JsonNode jsonNode = objectMapper.readTree(template.body());</span><br><span class="line">                template.body(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Collection&lt;String&gt;&gt; queries = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 构建 Map</span></span><br><span class="line">                buildQuery(jsonNode, <span class="string">""</span>, queries);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// queries 就是 POJO 解析为 Map 后的数据</span></span><br><span class="line">                template.queries(queries);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildQuery</span><span class="params">(JsonNode jsonNode, String path, Map&lt;String, Collection&lt;String&gt;&gt; queries)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!jsonNode.isContainerNode()) &#123;</span><br><span class="line">            <span class="comment">// 如果是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (jsonNode.isNull()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Collection&lt;String&gt; values = queries.get(path);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(values)) &#123;</span><br><span class="line">                values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                queries.put(path, values);</span><br><span class="line">            &#125;</span><br><span class="line">            values.add(jsonNode.asText());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (jsonNode.isArray())&#123;</span><br><span class="line">            <span class="comment">// 如果是数组节点</span></span><br><span class="line">            Iterator&lt;JsonNode&gt; elements = jsonNode.elements();</span><br><span class="line">            <span class="keyword">while</span> (elements.hasNext()) &#123;</span><br><span class="line">                buildQuery(elements.next(), path, queries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, JsonNode&gt;&gt; fields = jsonNode.fields();</span><br><span class="line">            <span class="keyword">while</span> (fields.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;String, JsonNode&gt; entry = fields.next();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(path)) &#123;</span><br><span class="line">                    buildQuery(entry.getValue(), path + <span class="string">"."</span> + entry.getKey(), queries);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 根节点</span></span><br><span class="line">                    buildQuery(entry.getValue(), entry.getKey(), queries);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动 consumer，再次调用 <code>add-user</code>，验证结果：</p><p><img src="/images/spring-cloud/feign/feign-multi-params-get-user-success.png" alt="GET 成功调用远程接口"></p><p>由此验证，GET 方式传递 POJO 成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了 FeignClient 的配置、请求响应的压缩后，基本的调用已经没有问题。&lt;br&gt;接下来就需要了解 Feign 多参数传递、文件上传、header 传递 token、请求失败、图片流 等问题的解决，以及 HTTP Client 替换的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="https://www.laiyy.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（8） --- Feign(二) &lt;br&gt; GZIP、配置</title>
    <link href="https://www.laiyy.top/java/2019/01-23/spring-cloud-8.html"/>
    <id>https://www.laiyy.top/java/2019/01-23/spring-cloud-8.html</id>
    <published>2019-01-23T05:40:18.000Z</published>
    <updated>2019-01-23T05:40:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在理解了 Feign 的运行原理之后，可以很轻松的搭建起一个基于 Feign 的微服务调用。</p><p>Feign 是通过 http 调用的，那么就牵扯到一个数据大小的问题。如果不经过压缩就发送请求、获取响应，那么会因为流量过大导致浪费流量，这时就需要使用数据压缩，将大流量压缩成小流量。</p><a id="more"></a><h1 id="Feign-GZIP-压缩"><a href="#Feign-GZIP-压缩" class="headerlink" title="Feign GZIP 压缩"></a>Feign GZIP 压缩</h1><p>Spring Cloud Feign 支持对请求和响应进行 GZIP 压缩，以调高通信效率。</p><h2 id="开启-gzip-压缩"><a href="#开启-gzip-压缩" class="headerlink" title="开启 gzip 压缩"></a>开启 gzip 压缩</h2><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  compression:</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      mime-type:</span> <span class="string">text/html,application/xml,application/json</span></span><br><span class="line"><span class="attr">      min-request-size:</span> <span class="number">2048</span></span><br><span class="line"><span class="attr">    response:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.laiyy.gitee.feign.springcloudfeigngzip.feign.GiteeFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>由于使用 gzip 压缩，压缩后的数据是二进制，那么在获取 Response 的时候，就不能和之前一样直接使用 String 来接收了，需要使用 ResponseEntity&lt;byte[]&gt; 接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"gitee-client"</span>, url = <span class="string">"https://www.gitee.com/"</span>, configuration = GiteeFeignConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiteeFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>, method = RequestMethod.GET)</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; searchRepo(<span class="meta">@RequestParam</span>(<span class="string">"q"</span>) String query);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 Controller 也需要改为 ResponseEntity&lt;byte[]&gt;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"feign-gitee"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; feign(String query)&#123;</span><br><span class="line">    <span class="keyword">return</span> giteeFeignClient.searchRepo(query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="验证-gzip-压缩"><a href="#验证-gzip-压缩" class="headerlink" title="验证 gzip 压缩"></a>验证 gzip 压缩</h2><p>开启 FeignClient 日志</p><h3 id="没有使用-GZIP-压缩"><a href="#没有使用-GZIP-压缩" class="headerlink" title="没有使用 GZIP 压缩"></a>没有使用 GZIP 压缩</h3><p>在 <code>spring-cloud-feign-simple</code> 项目中，开启日志：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.laiyy.gitee.feign.springcloudfeignsimple.feign.GiteeFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/feign-gitee?query=spring-cloud-openfeign" target="_blank" rel="noopener">http://localhost:8080/feign-gitee?query=spring-cloud-openfeign</a> ，可以看到，在控制台中打印了日志信息：</p><p><img src="/images/spring-cloud/feign/no-gzip-console.png" alt="no-gzip"></p><h3 id="使用了-GZIP-压缩"><a href="#使用了-GZIP-压缩" class="headerlink" title="使用了 GZIP 压缩"></a>使用了 GZIP 压缩</h3><p>在 <code>spring-cloud-feign-gzip</code> 中开启日志：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.laiyy.gitee.feign.springcloudfeigngzip.feign.GiteeFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></p><p>访问：<a href="http://localhost:8080/feign-gitee?query=spring-cloud-openfeign" target="_blank" rel="noopener">http://localhost:8080/feign-gitee?query=spring-cloud-openfeign</a> ，可以看到，在控制台中打印了日志信息：</p><p><img src="/images/spring-cloud/feign/gzip-console.png" alt="gzip"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><h3 id="Request-对比"><a href="#Request-对比" class="headerlink" title="Request 对比"></a>Request 对比</h3><p>经过对比，可以看到在没有开启 gzip 之前，request 是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---&gt; GET https://www.gitee.com/search?q=spring-cloud-openfeign HTTP/1.1</span><br><span class="line">---&gt; END HTTP (0-byte body)</span><br></pre></td></tr></table></figure></p><p>开启 gzip 之后，request 是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---&gt; GET https://www.gitee.com/search?q=spring-cloud-openfeign HTTP/1.1</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Accept-Encoding: deflate</span><br><span class="line">---&gt; END HTTP (0-byte body)</span><br></pre></td></tr></table></figure></p><p>可以看到，request 中增加了 <code>Accept-Encoding: gzip</code>，证明 request 开启了 gzip 压缩。</p><h3 id="Response-对比"><a href="#Response-对比" class="headerlink" title="Response 对比"></a>Response 对比</h3><p>在没有开启 gzip 之前，response 是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cache-control: no-cache</span><br><span class="line">connection: keep-alive</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">date: Wed, 23 Jan 2019 07:22:45 GMT</span><br><span class="line">expires: Sun, 1 Jan 2000 01:00:00 GMT</span><br><span class="line">pragma: must-revalidate, no-cache, private</span><br><span class="line">server: nginx</span><br><span class="line">set-cookie: gitee-session-n=BAh7CEkiD3Nlc3Npb25faWQGOgZFVEkiJTIyM2VlNjhkMWVmZGJlMWY5YmIxN2M5MGVlODEzY2Q5BjsAVEkiF21vYnlsZXR0ZV9vdmVycmlkZQY7AEY6CG5pbEkiEF9jc3JmX3Rva2VuBjsARkkiMTlsSDZmQk1CWXpWWVFTSTFtbkwzb0VJTjZjbVdVKzhYZjE0ako0djIvRUk9BjsARg%3D%3D--97ef4dc9c69d79b8f6ca42b9d0b6eaeb121d8048; domain=.gitee.com; path=/; HttpOnly</span><br><span class="line">set-cookie: oschina_new_user=false; path=/; expires=Sun, 23-Jan-2039 07:22:44 GMT</span><br><span class="line">set-cookie: user_locale=; path=/; expires=Sun, 23-Jan-2039 07:22:44 GMT</span><br><span class="line">set-cookie: aliyungf_tc=AQAAAAq0GH/W3wsAygAc2kkmdVRPGWZs; Path=/; HttpOnly</span><br><span class="line">status: 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">x-rack-cache: miss</span><br><span class="line">x-request-id: 437df6eccbd8a2b93912a7b84644b33d</span><br><span class="line">x-runtime: 0.646640</span><br><span class="line">x-ua-compatible: IE=Edge,chrome=1</span><br><span class="line">x-xss-protection: 1; mode=block</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&apos;zh-CN&apos;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;spring-cloud-openfeign · Search - Gitee&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;https://assets.gitee.com/assets/favicon-e87ded4710611ed62adc859698277663.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/vnd.microsoft.icon&quot; /&gt;</span><br><span class="line">&lt;meta charset=&apos;utf-8&apos;&gt;</span><br><span class="line">&lt;meta content=&apos;always&apos; name=&apos;referrer&apos;&gt;</span><br><span class="line">&lt;meta content=&apos;Gitee&apos; property=&apos;og:site_name&apos;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;--- END HTTP (48623-byte body)</span><br></pre></td></tr></table></figure></p><p>在开启 gzip 之后，response 是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;--- HTTP/1.1 200 OK (987ms)</span><br><span class="line">cache-control: no-cache</span><br><span class="line">connection: keep-alive</span><br><span class="line">content-encoding: gzip    ----------------------------- 第一处不同</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">date: Wed, 23 Jan 2019 07:20:59 GMT</span><br><span class="line">expires: Sun, 1 Jan 2000 01:00:00 GMT</span><br><span class="line">pragma: must-revalidate, no-cache, private</span><br><span class="line">server: nginx</span><br><span class="line">set-cookie: gitee-session-n=BAh7CEkiD3Nlc3Npb25faWQGOgZFVEkiJTVmYmMwNTQyNWU4OGMzMmYyN2M3MDQ1ZmZiNjY5ZDIzBjsAVEkiF21vYnlsZXR0ZV9vdmVycmlkZQY7AEY6CG5pbEkiEF9jc3JmX3Rva2VuBjsARkkiMVdaQ2tqYTVuTjd6WU1UKzU5R1hNbnRlbUNQaXhoSzRLRmJreXduTU51cUU9BjsARg%3D%3D--8843239d46616524d58af2611f2db9614b8518b1; domain=.gitee.com; path=/; HttpOnly</span><br><span class="line">set-cookie: oschina_new_user=false; path=/; expires=Sun, 23-Jan-2039 07:20:58 GMT</span><br><span class="line">set-cookie: user_locale=; path=/; expires=Sun, 23-Jan-2039 07:20:58 GMT</span><br><span class="line">set-cookie: aliyungf_tc=AQAAAHojVAEggQsAygAc2ugaNNgiXCKR; Path=/; HttpOnly</span><br><span class="line">status: 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">x-rack-cache: miss</span><br><span class="line">x-request-id: 53b45c93d5062be2c5643d9402d0a6de</span><br><span class="line">x-runtime: 0.412080</span><br><span class="line">x-ua-compatible: IE=Edge,chrome=1</span><br><span class="line">x-xss-protection: 1; mode=block</span><br><span class="line"></span><br><span class="line">Binary data              -------------------------------- 第二处不同</span><br><span class="line">&lt;--- END HTTP (11913-byte body)          ---------------------------- 第三处不同</span><br></pre></td></tr></table></figure></p><p>对比可以发现：</p><ul><li>在 response 的 <code>content-type</code> 上面多了一个 <code>content-encoding: gzip</code></li><li>在没有开启 gzip 之前控制台打印了 html 信息，开启后没有打印，换成了 <code>Binary data</code> 二进制</li><li>END HTTP 在没开启 gzip 之前为 48623 byte，开启后为 11913 byte</li></ul><p>由此可以证明，response 开启 gzip 成功</p><hr><h1 id="Feign-配置"><a href="#Feign-配置" class="headerlink" title="Feign 配置"></a>Feign 配置</h1><h2 id="对单个指定特定名称的-Feign-进行配置"><a href="#对单个指定特定名称的-Feign-进行配置" class="headerlink" title="对单个指定特定名称的 Feign 进行配置"></a>对单个指定特定名称的 Feign 进行配置</h2><p>在之前的例子中，在对 FeignClient 的配置中，使用的是 <code>@FeignClient</code> 的 <code>configuration</code> 属性指定的配置类，也可以使用配置文件对 <code>@FeignClient</code> 注解的接口进行配置</p><h3 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"gitee-client"</span>, url = <span class="string">"https://www.gitee.com"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiteeFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>, method = RequestMethod.GET)</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; searchRepo(<span class="meta">@RequestParam</span>(<span class="string">"q"</span>) String query);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      gitee-client:</span>  <span class="comment"># 这里指定的是 @FeignClient 的 name/value 属性的值</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span>  <span class="comment"># 链接超时时间</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span> <span class="comment"># 读超时</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">none</span> <span class="comment"># 日志级别</span></span><br><span class="line">        <span class="comment"># errorDecoder: # 错误解码器（类路径）</span></span><br><span class="line">        <span class="comment"># retryer: # 重试机制（类路径）</span></span><br><span class="line">        <span class="comment"># requestInterceptors: 拦截器配置方式 一：多个拦截器， 需要注意如果有多个拦截器，"-" 不能少</span></span><br><span class="line">          <span class="comment"># - Intecerptor1 类路径，</span></span><br><span class="line">          <span class="comment"># - Interceptpt2 类路径</span></span><br><span class="line">        <span class="comment"># requestInterceptors: 拦截器配置方式 二：多个拦截器，用 [Interceptor, Interceptor] 配置，需要配置类路径</span></span><br><span class="line">        <span class="comment"># decode404: false 是否 404 解码</span></span><br><span class="line">        <span class="comment"># encoder： 编码器（类路径）</span></span><br><span class="line">        <span class="comment"># decoder： 解码器（类路径）</span></span><br><span class="line">        <span class="comment"># contract： 契约（类路径）</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.laiyy.gitee.feign.springcloudfeignconfig.feign.GiteeFeignClient:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>此时配置的 loggerLevel 为 none，不打印日志，访问： <a href="http://localhost:8080/feign-gitee?query=spring-cloud-openfeign" target="_blank" rel="noopener">http://localhost:8080/feign-gitee?query=spring-cloud-openfeign</a> ，可以看到控制台没有任何消息</p><p>将 loggerLevel 改为 full，再次访问可以看到打印日志消息。</p><p>将 loggerLevel 改为 feign.Logger.Level 中没有的级别，再次测试：loggerLevel: haha，可以看到控制启动报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to bind properties under &apos;feign.client.config.gitee-client.logger-level&apos; to feign.Logger$Level:</span><br><span class="line"></span><br><span class="line">    Property: feign.client.config.gitee-client.loggerlevel</span><br><span class="line">    Value: haha</span><br><span class="line">    Origin: class path resource [application.yml]:7:22</span><br><span class="line">    Reason: failed to convert java.lang.String to feign.Logger$Level</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your application&apos;s configuration. The following values are valid:</span><br><span class="line"></span><br><span class="line">    BASIC</span><br><span class="line">    FULL</span><br><span class="line">    HEADERS</span><br><span class="line">    NONE</span><br></pre></td></tr></table></figure><p>可以验证此配置是正确的。</p><h2 id="对全部-FeignClient-配置"><a href="#对全部-FeignClient-配置" class="headerlink" title="对全部 FeignClient 配置"></a>对全部 FeignClient 配置</h2><p>对全部 FeignClient 启用配置的方法也有两种：1、<code>@EnableFeignClients</code> 注解有一个 <code>defaultConfiguration</code> 属性，可以指定全局 FeignClient 的配置。2、使用配置文件对全局 FeignClient 进行配置</p><p>application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      defautl:</span>  <span class="comment"># 全局的配置需要把 client-name 指定为 default</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">5000</span>  <span class="comment"># 链接超时时间</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span> <span class="comment"># 读超时</span></span><br><span class="line"><span class="attr">        loggerLevel:</span> <span class="string">full</span> <span class="comment"># 日志级别</span></span><br></pre></td></tr></table></figure></p><p>如果有多个 FeignClient，每个 FeignClient 都需要单独配置，如果有一样的配置，可以提取到全局配置中，需要注意：全局配置需要放在最后一位。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在理解了 Feign 的运行原理之后，可以很轻松的搭建起一个基于 Feign 的微服务调用。&lt;/p&gt;
&lt;p&gt;Feign 是通过 http 调用的，那么就牵扯到一个数据大小的问题。如果不经过压缩就发送请求、获取响应，那么会因为流量过大导致浪费流量，这时就需要使用数据压缩，将大流量压缩成小流量。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="https://www.laiyy.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务 (7) --- Feign(一) &lt;br&gt; 远程调用、RestTemplate、Feign</title>
    <link href="https://www.laiyy.top/java/2019/01-22/spring-cloud-7.html"/>
    <id>https://www.laiyy.top/java/2019/01-22/spring-cloud-7.html</id>
    <published>2019-01-22T07:48:53.000Z</published>
    <updated>2019-01-22T07:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 SpringCloud 时，远程服务都是以 HTTP 接口形式对外提供服务，因此服务消费者在调用服务时，需要使用 HTTP Client 方式访问。在通常进行远程 HTTP 调用时，可以使用 RestTemplate、HttpClient、URLConnection、OkHttp 等，也可以使用 SpringCloud Feign 进行远程调用</p><a id="more"></a><h1 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h1><h2 id="脱离-Eureka-的使用"><a href="#脱离-Eureka-的使用" class="headerlink" title="脱离 Eureka 的使用"></a>脱离 Eureka 的使用</h2><p>在脱离 Eureka 使用 RestTemplate 调用远程接口时，只需要引入 web 依赖即可。</p><p>在使用 RestTemplate 时，需要先将 RestTemplate 交给 Spring 管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个 Controller，注入 RestTemplate，调用远程接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RestTemplateController</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"rest-get"</span>, produces = <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">restTemplateGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"https://gitee.com"</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8080/rest-get" target="_blank" rel="noopener">http://localhost:8080/rest-get</a></p><p><img src="/images/spring-cloud/feign/rest-template-simple.png" alt="RestTemplate Simple"></p><h2 id="关联-Eureka-使用"><a href="#关联-Eureka-使用" class="headerlink" title="关联 Eureka 使用"></a>关联 Eureka 使用</h2><p>将服务注册到 Eureka Server，并使用 RestTemplate 调用远程 Eureka Client 服务</p><p>此时，只需要按照一个标准的 Eureka Client 编写步骤，将项目改造成一个 Eureka Client，并编写另外一个 Client。将要使用 RestTemplate 的 Client 当做服务消费者，另外一个当做服务提供者。在进行远程调用时，只需要将 <code>getForObject</code> 的 url，改为 <a href="http://service-id" target="_blank" rel="noopener">http://service-id</a> 即可，具体传入参数使用 <code>?</code>、<code>&amp;</code>、<code>=</code> 拼接即可。</p><p>在注册到 Eureka Server 后，进行 RestTemplate 远程调用时，service-id 会被 Eureka Client 解析为 Server 中注册的 ip、端口，以此进行远程调用。</p><h2 id="Rest-Template"><a href="#Rest-Template" class="headerlink" title="Rest Template"></a>Rest Template</h2><p>RestTemplate 提供了 11 个独立的方法，这 11 个方法对应了各种远程调用请求</p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">http 动作</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">getForEntity()</td><td style="text-align:center">GET</td><td style="text-align:center">发送 GET 请求，返回的 ResponseEntity 包含了响应体所映射成的对象</td></tr><tr><td style="text-align:center">getForObject()</td><td style="text-align:center">GET</td><td style="text-align:center">发送 GET 请求，返回的请求体将映射为一个对象</td></tr><tr><td style="text-align:center">postForEntity()</td><td style="text-align:center">POST</td><td style="text-align:center">发送 POST 请求，返回包含一个对象的 ResponseEntity，这个对象是从响应体中映射得到的</td></tr><tr><td style="text-align:center">postForObject()</td><td style="text-align:center">POST</td><td style="text-align:center">发送 POST 请求，返回根据响应体匹配形成的对象</td></tr><tr><td style="text-align:center">postForLocation()</td><td style="text-align:center">POST</td><td style="text-align:center">发送 POST 请求，返回新创建资源的 URL</td></tr><tr><td style="text-align:center">put()</td><td style="text-align:center">PUT</td><td style="text-align:center">PUT 资源到指定 URL</td></tr><tr><td style="text-align:center">delete()</td><td style="text-align:center">DELETE</td><td style="text-align:center">发送 DELETE 请求，执行删除操作</td></tr><tr><td style="text-align:center">headForHeaders()</td><td style="text-align:center">HEAD</td><td style="text-align:center">发送 HEAD 请求，返回包含指定资源 URL 的 HTTP 头</td></tr><tr><td style="text-align:center">optionsFOrAllow()</td><td style="text-align:center">OPTIONS</td><td style="text-align:center">发送 OPTIONS 请求，返回指定 URL 的 Allow 头信息</td></tr><tr><td style="text-align:center">execute()</td><td style="text-align:center"></td><td style="text-align:center">执行非响应 ResponseEntity 的请求</td></tr><tr><td style="text-align:center">exchange()</td><td style="text-align:center"></td><td style="text-align:center">执行响应 ResponseEntity 的请求</td></tr></tbody></table><hr><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p>使用 RestTemplate 进行远程调用，非常方便，但是也有一个致命的问题：硬编码。 在 RestTemplate 调用中，我们每个调用远程接口的方法，都将远程接口对应的 ip、端口，或 service-id 硬编码到了 URL 中，如果远程接口的 ip、端口、service-id 有修改的话，需要将所有的调用都修改一遍，这样难免会出现漏改、错改等问题，且代码不便于维护。为了解决这个问题，Netflix 推出了 Feign 来统一管理远程调用。</p><h2 id="什么是-Feign"><a href="#什么是-Feign" class="headerlink" title="什么是 Feign"></a>什么是 Feign</h2><p>Feign 是一个声明式的 Web Service 客户端，只需要创建一个接口，并加上对应的 Feign Client 注解，即可进行远程调用。Feign 也支持编码器、解码器，Spring Cloud Open Feign 也对 Feign 进行了增强，支持了 SpringMVC 注解，可以像 SpringMVC 一样进行远程调用。</p><p>Feign 是一种声明式、模版化的 HTTP 客户端，在 Spring Cloud 中使用 Feign，可以做到使用 HTTP 请求访问远程方法就像调用本地方法一样简单，开发者完全感知不到是在进行远程调用。</p><p>Feign 的特性：</p><ul><li>可插拔的注解支持</li><li>可插拔的 HTTP 编码器、解码器</li><li>支持 Hystrix  断路器、Fallback</li><li>支持 Ribbon 负载均衡</li><li>支持 HTTP 请求、响应压缩</li></ul><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>使用 Feign 进行 github 接口调用</p><h3 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>只是进行一个简单的远程调用，不需要注册 Eureka、不需要配置文件。</p><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignSimpleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignSimpleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Feign-Client-配置"><a href="#Feign-Client-配置" class="headerlink" title="Feign Client 配置"></a>Feign Client 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiteeFeignConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Feign 日志级别</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * NONE：没有日志</span></span><br><span class="line"><span class="comment">     * BASIC：基本日志</span></span><br><span class="line"><span class="comment">     * HEADERS：header</span></span><br><span class="line"><span class="comment">     * FULL：全部</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 配置为打印全部日志，可以更方便的查看 Feign 的调用信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Feign 日志级别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FeignClient"><a href="#FeignClient" class="headerlink" title="FeignClient"></a>FeignClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"gitee-client"</span>, url = <span class="string">"https://www.gitee.com/"</span>, configuration = GiteeFeignConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiteeFeignClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">searchRepo</span><span class="params">(@RequestParam(<span class="string">"q"</span>)</span> String query)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@FeignClient</code>：声明为一个 Feign 远程调用<br><code>name</code>：给远程调用起个名字<br><code>url</code>：指定要调用哪个 url<br><code>configuration</code>：指定配置信息</p><p><code>@RequestMapping</code>：如同 SpringMVC 一样调用。</p><h3 id="Feign-Controller"><a href="#Feign-Controller" class="headerlink" title="Feign Controller"></a>Feign Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GiteeFeignClient giteeFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FeignController</span><span class="params">(GiteeFeignClient giteeFeignClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.giteeFeignClient = giteeFeignClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"feign-gitee"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">feign</span><span class="params">(String query)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> giteeFeignClient.searchRepo(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证调用结果"><a href="#验证调用结果" class="headerlink" title="验证调用结果"></a>验证调用结果</h3><p>在浏览器中访问： <a href="http://localhost:8080/feign-gitee?query=spring-cloud-openfeign" target="_blank" rel="noopener">http://localhost:8080/feign-gitee?query=spring-cloud-openfeign</a></p><p><img src="/images/spring-cloud/feign/feign-connect-to-gitee.png" alt="Feign To Gitee"></p><hr><h1 id="FeignClient、-RequestMapping"><a href="#FeignClient、-RequestMapping" class="headerlink" title="@FeignClient、@RequestMapping"></a>@FeignClient、@RequestMapping</h1><h2 id="在-Feign-中使用-MVC-注解的注意事项"><a href="#在-Feign-中使用-MVC-注解的注意事项" class="headerlink" title="在 Feign 中使用 MVC 注解的注意事项"></a>在 Feign 中使用 MVC 注解的注意事项</h2><p>在 FeignClient 中使用 <code>@RequestMapping</code> 注解调用远程接口，需要注意：</p><ul><li>注解必须为 <code>@RequestMapping</code>，不能为组合注解 <code>@GetMapping</code> 等，否则解析不到</li><li>必须指定 method，否则会出问题</li><li>value 必须指定被调用方的 url，不能包含域名、ip 等</li></ul><h2 id="使用-FeignClient-的注意事项"><a href="#使用-FeignClient-的注意事项" class="headerlink" title="使用 @FeignClient 的注意事项"></a>使用 @FeignClient 的注意事项</h2><ul><li>在启动类上必须加上 <code>@FeignClients</code> 注解，开启扫描</li><li>在 FeignClient 接口上必须指定 <code>@FeignClient</code> 注解，声明是一个 Feign 远程调用</li></ul><h2 id="FeignClient-1"><a href="#FeignClient-1" class="headerlink" title="@FeignClient"></a>@FeignClient</h2><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FeignClient &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">String <span class="title">serviceId</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">qualifier</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">url</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">decode404</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] configuration() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; fallback() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; fallbackFactory() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">primary</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">指定 FeignClient 的名称，如果使用到了 Eureka，且使用了 Ribbon 负载均衡，则 name 为被调用者的微服务名称，用于服务发现</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">一般用于调试，可以手动指定 feign 调用的地址</td></tr><tr><td style="text-align:center">decode404</td><td style="text-align:center">当 404 时，如果该字段为 true，会调用 decoder 进行解码，否则会抛出 FeignException</td></tr><tr><td style="text-align:center">configuration</td><td style="text-align:center">Feign 配置类，可以自定义 Feign 的 Encoder、Decoder、LogLevel、Contract 等</td></tr><tr><td style="text-align:center">fallback</td><td style="text-align:center">容错处理类，当远程调用失败、超时时，会调用对应接口的容错逻辑。Fallback 指定的类，必须实现 @FeignClient 标记的接口</td></tr><tr><td style="text-align:center">fallbackFactory</td><td style="text-align:center">工厂类，用于生成 fallback 类的示例，可以实现每个接口通用的容错逻辑，减少重复代码</td></tr><tr><td style="text-align:center">path</td><td style="text-align:center">定义当前 FeignClient 的统一前缀</td></tr></tbody></table><hr><h1 id="Feign-的运行原理"><a href="#Feign-的运行原理" class="headerlink" title="Feign 的运行原理"></a>Feign 的运行原理</h1><ul><li>在启动类上加上 <code>@EnableFeignClients</code> 注解，开启对 Feign Client 扫描加载</li><li>在启用时，会进行包扫描，扫描所有的 <code>@FeignClient</code> 的注解的类，并将这些信息注入 Spring IOC 容器，当定义的 Feign 接口中的方法被调用时，通过 JDK 的代理方式，来生成具体的 <code>RestTemplate</code>。当生成代理时，Feign 会为每个接口方法创建一个 <code>RestTemplate</code> 对象，该对象封装了 HTTP 请求需要的全部信息，如：参数名、请求方法、header等</li><li>然后由 <code>RestTemplate</code> 生成 Request，然后把 Request 交给 Client 处理，这里指的 Client 可以是 JDK 原生的 <code>URLConnection</code>、Apache 的 <code>HTTP Client</code>、<code>OkHttp</code>。最后 Client 被封装到 LoadBalanceClient 类，结合 Ribbon 负载均衡发起服务间的调用。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 SpringCloud 时，远程服务都是以 HTTP 接口形式对外提供服务，因此服务消费者在调用服务时，需要使用 HTTP Client 方式访问。在通常进行远程 HTTP 调用时，可以使用 RestTemplate、HttpClient、URLConnection、OkHttp 等，也可以使用 SpringCloud Feign 进行远程调用&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="https://www.laiyy.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（6） --- Eureka(四) &lt;br&gt; Https</title>
    <link href="https://www.laiyy.top/java/2019/01-20/spring-cloud-6.html"/>
    <id>https://www.laiyy.top/java/2019/01-20/spring-cloud-6.html</id>
    <published>2019-01-20T06:45:20.000Z</published>
    <updated>2019-01-20T06:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在生产环境下，一般来说都是 https 协议访问，现在的 http 协议访问可能会出现问题，在 Eureka Server、Client 中开启 Https 访问。</p><a id="more"></a><p>HTTP Basic 基于 base64 编码，容易被抓包，如果暴露在公网会非常不安全，可以通过开启 https 达到保护数据的目的。</p><h2 id="Server-证书生成"><a href="#Server-证书生成" class="headerlink" title="Server 证书生成"></a>Server 证书生成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias server -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore server.p12 -validity 3650</span><br></pre></td></tr></table></figure><p>密码为：123456</p><p><img src="/images/spring-cloud/eureka/key-gen-server.png" alt="GenKey Server"></p><p>在当前目录生成了一个 server.p12 文件</p><h2 id="Client-证书生成"><a href="#Client-证书生成" class="headerlink" title="Client 证书生成"></a>Client 证书生成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias client -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore client.p12 -validity 3650</span><br></pre></td></tr></table></figure><p>密码为：654321</p><p><img src="/images/spring-cloud/eureka/key-gen-client.png" alt="GenKey Client"></p><p>在当前目录生成了一个 client.p12 文件</p><p><img src="/images/spring-cloud/eureka/p12.png" alt="P12 文件"></p><h2 id="导出-p12-文件"><a href="#导出-p12-文件" class="headerlink" title="导出 p12 文件"></a>导出 p12 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias server -file server.crt --keystore server.p12</span><br><span class="line">keytool -export -alias client -file client.crt --keystore client.p12</span><br></pre></td></tr></table></figure><p><img src="/images/spring-cloud/eureka/export-p12.png" alt="Export p12"><br><img src="/images/spring-cloud/eureka/crt.png" alt="crt file"></p><h2 id="信任证书"><a href="#信任证书" class="headerlink" title="信任证书"></a>信任证书</h2><h3 id="Client-信任-Server-证书"><a href="#Client-信任-Server-证书" class="headerlink" title="Client 信任 Server 证书"></a>Client 信任 Server 证书</h3><p>将 server.crt 导入 client.p12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias server -file server.crt -keystore client.p12</span><br></pre></td></tr></table></figure><p>秘钥口令是 client.p12 的口令</p><p><img src="/images/spring-cloud/eureka/server-crt-to-client-p12.png" alt="client 信任 server"></p><h3 id="Server-信任-Client-证书"><a href="#Server-信任-Client-证书" class="headerlink" title="Server 信任 Client 证书"></a>Server 信任 Client 证书</h3><p>将 client.crt 导入 server.p12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias client -file client.crt -keystore server.p12</span><br></pre></td></tr></table></figure><p>秘钥口令是 server.p12 的口令</p><p><img src="/images/spring-cloud/eureka/client-crt-to-server-p12.png" alt="Server 信任 Client"></p><h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><p>将生成的最后的 server.p12 文件放在 resources 下</p><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">  ssl:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    key-store-type:</span> <span class="string">PKCS12</span> <span class="comment"># type 与 keytool 的 storetype 一致</span></span><br><span class="line"><span class="attr">    key-alias:</span> <span class="string">server</span> <span class="comment"># 与 keytool 的 alias 一致</span></span><br><span class="line"><span class="attr">    key-store:</span> <span class="attr">classpath:server.p12</span> <span class="comment"># p12 文件地址</span></span><br><span class="line"><span class="attr">    key-store-password:</span> <span class="number">123456</span> <span class="comment"># server.p12 口令</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    secure-port:</span> <span class="string">$&#123;server.port&#125;</span> <span class="comment"># https 端口</span></span><br><span class="line"><span class="attr">    secure-port-enabled:</span> <span class="literal">true</span> <span class="comment"># 是否开启 https port</span></span><br><span class="line"><span class="attr">    non-secure-port-enabled:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">    home-page-url:</span> <span class="attr">https://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;</span> <span class="comment"># https 协议</span></span><br><span class="line"><span class="attr">    status-page-url:</span> <span class="attr">https://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;</span> <span class="comment"># https 协议</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">https://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># https 协议</span></span><br></pre></td></tr></table></figure><h3 id="验证-Eureka-Server"><a href="#验证-Eureka-Server" class="headerlink" title="验证 Eureka Server"></a>验证 Eureka Server</h3><p>访问 <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></p><p><img src="/images/spring-cloud/eureka/http-server.png" alt="Http 协议"></p><p>访问 <a href="https://localhost:8761" target="_blank" rel="noopener">https://localhost:8761</a></p><p><img src="/images/spring-cloud/eureka/https-server.png" alt="Https 协议"></p><h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><p>Client 只在连接 Eureka Server 的时候使用 https 协议，如果要全局都使用 https，则和 Server 的 https 配置一致，只需要将配置换成 client.p12 的配置即可。</p><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">client1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    securePortEnabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    ssl:</span></span><br><span class="line"><span class="attr">      key-store:</span> <span class="string">client.p12</span></span><br><span class="line"><span class="attr">      key-store-password:</span> <span class="number">654321</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">https://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="Https-连接配置"><a href="#Https-连接配置" class="headerlink" title="Https 连接配置"></a>Https 连接配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaHttpsClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;eureka.client.ssl.key-store&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String ketStoreFileName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;eureka.client.ssl.key-store-password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String ketStorePassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DiscoveryClient.<span class="function">DiscoveryClientOptionalArgs <span class="title">discoveryClientOptionalArgs</span><span class="params">()</span> <span class="keyword">throws</span> CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, KeyManagementException </span>&#123;</span><br><span class="line">        EurekaJerseyClientImpl.EurekaJerseyClientBuilder builder = <span class="keyword">new</span> EurekaJerseyClientImpl.EurekaJerseyClientBuilder();</span><br><span class="line">        builder.withClientName(<span class="string">"eureka-https-client"</span>);</span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(ketStoreFileName);</span><br><span class="line">        SSLContext sslContext = <span class="keyword">new</span> SSLContextBuilder()</span><br><span class="line">                .loadTrustMaterial(url, ketStorePassword.toCharArray()).build();</span><br><span class="line">        builder.withCustomSSL(sslContext);</span><br><span class="line">        builder.withMaxTotalConnections(<span class="number">10</span>);</span><br><span class="line">        builder.withMaxConnectionsPerHost(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        DiscoveryClient.DiscoveryClientOptionalArgs optionalArgs = <span class="keyword">new</span> DiscoveryClient.DiscoveryClientOptionalArgs();</span><br><span class="line">        optionalArgs.setEurekaJerseyClient(builder.build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> optionalArgs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证-Client"><a href="#验证-Client" class="headerlink" title="验证 Client"></a>验证 Client</h3><p>访问 <a href="https://localhost:8761" target="_blank" rel="noopener">https://localhost:8761</a></p><p><img src="/images/spring-cloud/eureka/check-client-connect-server.png" alt="验证 client"></p><h3 id="使用-http-注册"><a href="#使用-http-注册" class="headerlink" title="使用 http 注册"></a>使用 http 注册</h3><p><img src="/images/spring-cloud/eureka/client-http-connect-server.png" alt="Client 使用 Http 访问 Server"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在生产环境下，一般来说都是 https 协议访问，现在的 http 协议访问可能会出现问题，在 Eureka Server、Client 中开启 Https 访问。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://www.laiyy.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（5） --- Eureka(三) &lt;br&gt; 集群、Region Zone、Http Basic</title>
    <link href="https://www.laiyy.top/java/2019/01-19/spring-cloud-5.html"/>
    <id>https://www.laiyy.top/java/2019/01-19/spring-cloud-5.html</id>
    <published>2019-01-19T08:47:24.000Z</published>
    <updated>2019-01-19T08:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在了解了 Euerka 的 <code>REST API</code>、<code>核心类</code>、<code>核心操作</code>、<code>参数调优</code>等概念之后，在实际的项目中来验证这些概念。</p><a id="more"></a><h1 id="Eureka-Server-集群扩展"><a href="#Eureka-Server-集群扩展" class="headerlink" title="Eureka Server 集群扩展"></a>Eureka Server 集群扩展</h1><p>在之前的例子中，和 SpringCloud 中文社区的公益 Eureka Server 都是单节点的，如果 Server 挂掉了，那么整个微服务的注册将不在可用。在这时，就需要搭建 Eureka Server 高可用集群，保证整个微服务不会因为一个 Server 挂掉而导致整个微服务不可用。</p><h2 id="使用-profile，搭建高可用集群"><a href="#使用-profile，搭建高可用集群" class="headerlink" title="使用 profile，搭建高可用集群"></a>使用 profile，搭建高可用集群</h2><p>有两种常用的方式启动多个 eureka server</p><h3 id="在一个配置文件中，指定多个配置"><a href="#在一个配置文件中，指定多个配置" class="headerlink" title="在一个配置文件中，指定多个配置"></a>在一个配置文件中，指定多个配置</h3><p>可以使用如下配置，在一个 application.yml 文件中，配置多个 Eureka Server，相互注册指定 defaultZone，并使用 profile 区别每个 Server 的配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka-server-ha</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8762/eureka,http://localhost:8763/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka,http://localhost:8763/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8763</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka,http://localhost:8762/eureka</span></span><br></pre></td></tr></table></figure><h3 id="验证多-Server-启动"><a href="#验证多-Server-启动" class="headerlink" title="验证多 Server 启动"></a>验证多 Server 启动</h3><p>使用 mvn spring-boot:run -Dspring.profiles.active=peer1<br><em>peer1</em> 可以换为 peer2、peer3，启动其他的 profile</p><p><img src="/images/spring-cloud/eureka/eureka-peer1.png" alt="Eureka Server Peer1"><br><img src="/images/spring-cloud/eureka/eureka-peer2.png" alt="Eureka Server Peer2"><br><img src="/images/spring-cloud/eureka/eureka-peer3.png" alt="Eureka Server Peer3"></p><p>在浏览器中输入： <a href="http://localhost:8761、http://localhost:8762、http://localhost:8763，都可以访问到" target="_blank" rel="noopener">http://localhost:8761、http://localhost:8762、http://localhost:8763，都可以访问到</a> Eureka Server</p><p>使用这种方式启动存在的问题：</p><blockquote><p>在一个配置文件中存在多个 Server 的配置，太过杂乱无章，不好管理<br>如果 Server 在不同的机器上，由于 ip 地址不同，在第一个 Server 启动时由于找不到注册中心，必报错，当第二个 Server 启动后正常</p></blockquote><h3 id="使用多配置文件"><a href="#使用多配置文件" class="headerlink" title="使用多配置文件"></a>使用多配置文件</h3><p>将 application.yml 复制多份，改名为 <code>application-peer1.yml</code>、<code>application-peer2.yml</code>、<code>application-peer3.yml</code>，然后使用 mvn spring-boot:run -Dspring.profiles.active=peer1 启动项目。</p><p>为验证此种配置方式可用，将 peer3 的端口该为 8764，启动测试</p><p><img src="/images/spring-cloud/eureka/eureka-peer4.png" alt="Eureka Server Peer4"></p><p>使用这种方式的问题：</p><blockquote><p>可能存在同样的配置在多个配置文件都存在，需要修改时需要修改每个文件，太过冗余<br>Server 在不同机器上的时候，出现的问题和 <a href="#在一个配置文件中，指定多个配置">在一个配置文件中，指定多个配置</a> 的问题一致</p></blockquote><h3 id="接口验证"><a href="#接口验证" class="headerlink" title="接口验证"></a>接口验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServerHaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaServerHaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EurekaClientConfigBean eurekaClientConfigBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"eureka-service-url"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getEurekaServerUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> eurekaClientConfigBean.getServiceUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 3 个Server，浏览器访问 <a href="http://localhost:8764/eureka-service-url" target="_blank" rel="noopener">http://localhost:8764/eureka-service-url</a></p><p><img src="/images/spring-cloud/eureka/service-url.png" alt="Service Urls"></p><p>可以看到，peer3 中注册了两个 eureka server。</p><h3 id="Eureka-Client-注册到多-Server"><a href="#Eureka-Client-注册到多-Server" class="headerlink" title="Eureka Client 注册到多 Server"></a>Eureka Client 注册到多 Server</h3><p>Client 注册到多 Server，只需要在配置文件中指定对应 Server 的 defauleZone 即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-client</span> </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> </span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8764/eureka/,</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><h1 id="使用-Region、Zone-搭建高可用集群"><a href="#使用-Region、Zone-搭建高可用集群" class="headerlink" title="使用 Region、Zone 搭建高可用集群"></a>使用 Region、Zone 搭建高可用集群</h1><p>配置文件 application-zone1a.yml：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka-server-region-zone</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      zone1:</span> <span class="attr">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">      zone2:</span> <span class="attr">http://localhost:8763/eureka/,http://localhost:8764/eureka/</span></span><br><span class="line"><span class="attr">    region:</span> <span class="string">region-east</span> <span class="comment"># 设置 region</span></span><br><span class="line"><span class="attr">    availability-zones:</span></span><br><span class="line"><span class="attr">      region-east:</span> <span class="string">zone1,zone2</span> <span class="comment"># 设置可用 region-zone</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      zone:</span> <span class="string">zone1</span> <span class="comment"># 设置 zone</span></span><br></pre></td></tr></table></figure></p><p>application-zone1b.yml： 将 server.port 修改为 8762<br>application-zone2a.yml： 将 server.port 修改为 8763，eureka.instance.metadata-map.zone 修改为 zone2<br>application-zone2b.yml： 将 server.port 修改为 8764，eureka.instance.metadata-map.zone 修改为 zone2</p><h2 id="验证-Eureka-Server"><a href="#验证-Eureka-Server" class="headerlink" title="验证 Eureka Server"></a>验证 Eureka Server</h2><p>在浏览器访问 <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></p><p><img src="/images/spring-cloud/eureka/region-zone-server.png" alt="Region Zone Server"></p><h2 id="创建-Eureka-Client"><a href="#创建-Eureka-Client" class="headerlink" title="创建 Eureka Client"></a>创建 Eureka Client</h2><p>创建两个 Eureka Client，分别对应两个 Zone</p><h3 id="application-zone1-yml"><a href="#application-zone1-yml" class="headerlink" title="application-zone1.yml"></a>application-zone1.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka-client-region-zone</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    metadata-map:</span></span><br><span class="line"><span class="attr">      zone:</span> <span class="string">zone1</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    region:</span> <span class="string">region-east</span></span><br><span class="line"><span class="attr">    availability-zones:</span></span><br><span class="line"><span class="attr">      region-east:</span> <span class="string">zone1,zone2</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      zone1:</span> <span class="attr">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">      zone2:</span> <span class="attr">http://localhost:8763/eureka/,http://localhost:8764/eureka/</span></span><br></pre></td></tr></table></figure><p>application-zone2.yml：修改 server.port=8082，eureka.instance.metadata-map.zone=zone2</p><p>暴露服务端点<br>application.yml：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure></p><h3 id="引入-pom-依赖："><a href="#引入-pom-依赖：" class="headerlink" title="引入 pom 依赖："></a>引入 pom 依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 暴露端点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="验证-region、zone"><a href="#验证-region、zone" class="headerlink" title="验证 region、zone"></a>验证 region、zone</h3><p>访问 client 暴露的环境端点，验证 region、zone</p><p><a href="http://localhost:8081/actuator/env、http://localhost:8082/actuator/env" target="_blank" rel="noopener">http://localhost:8081/actuator/env、http://localhost:8082/actuator/env</a></p><p><img src="/images/spring-cloud/eureka/client-zone1.png" alt="Client Zone1"><br><img src="/images/spring-cloud/eureka/client-zone2.png" alt="Client Zone2"></p><p>由此，可以验证 client1、client2 的 zone 是指定的 zone。</p><hr><h1 id="开启-Http-Basic"><a href="#开启-Http-Basic" class="headerlink" title="开启 Http Basic"></a>开启 Http Basic</h1><p>现在的实例中，访问 Eureka Server 是不需要用户名、密码的，不需要安全验证。为了防止微服务暴露，可以开启 Http Basic 安全教研。</p><h2 id="Eureka-Server-开启-Http-Basic"><a href="#Eureka-Server-开启-Http-Basic" class="headerlink" title="Eureka Server 开启 Http Basic"></a>Eureka Server 开启 Http Basic</h2><h3 id="引入-pom-依赖"><a href="#引入-pom-依赖" class="headerlink" title="引入 pom 依赖"></a>引入 pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">laiyy</span>  <span class="comment"># 访问 Eureka Server 的用户名</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span> <span class="comment"># 访问 Eureka Server 的密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:$&#123;server.port:8761&#125;/eureka/</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="访问-http-localhost-8761"><a href="#访问-http-localhost-8761" class="headerlink" title="访问 http://localhost:8761"></a>访问 <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a></h3><p><img src="/images/spring-cloud/eureka/http-basic.png" alt="HTTP Basic"></p><h2 id="Eureka-Client-开启-Http-Basic"><a href="#Eureka-Client-开启-Http-Basic" class="headerlink" title="Eureka Client 开启 Http Basic"></a>Eureka Client 开启 Http Basic</h2><h3 id="引入-pom-依赖-1"><a href="#引入-pom-依赖-1" class="headerlink" title="引入 pom 依赖"></a>引入 pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka-client-http-basic</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    security:</span></span><br><span class="line"><span class="attr">      basic:</span></span><br><span class="line"><span class="attr">        user:</span> <span class="string">laiyy</span></span><br><span class="line"><span class="attr">        password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.client.security.basic.user&#125;:$&#123;eureka.client.security.basic.password&#125;@localhost:8761/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>需要注意，defaultZone 需要设置为： <a href="http://user:password@ip:port/eureka/" target="_blank" rel="noopener">http://user:password@ip:port/eureka/</a></p><h3 id="启动-Eureka-Client，验证-Http-Basic"><a href="#启动-Eureka-Client，验证-Http-Basic" class="headerlink" title="启动 Eureka Client，验证 Http Basic"></a>启动 Eureka Client，验证 Http Basic</h3><p>在启动 Client 后，观察日志，可以看到出现了 403 错误：<br><img src="/images/spring-cloud/eureka/eureka-client-http-basic-error.png" alt="Eureka Client Http Basic Error"></p><p>明明已经指定了 Eureka Server 的用户名、密码、ip、端口，为什么还是注册失败？<br>是因为 Http Basic 默认是同源的，而 client、server 的 ip、端口不一致，会出现跨域访问请求，导致 403.</p><p>解决办法：在 Eureka Server 端关闭 csrf 访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpBasicConfiguration</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动 Server、Client，访问 Server，可以看到 Client 注册成功</p><p><img src="/images/spring-cloud/eureka/client-http-basic.png" alt="Eureka Client Http Basic"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解了 Euerka 的 &lt;code&gt;REST API&lt;/code&gt;、&lt;code&gt;核心类&lt;/code&gt;、&lt;code&gt;核心操作&lt;/code&gt;、&lt;code&gt;参数调优&lt;/code&gt;等概念之后，在实际的项目中来验证这些概念。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://www.laiyy.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（4） --- Eureka(二) &lt;br&gt;  REST API、核心类、调优</title>
    <link href="https://www.laiyy.top/java/2019/01-18/spring-cloud-4.html"/>
    <id>https://www.laiyy.top/java/2019/01-18/spring-cloud-4.html</id>
    <published>2019-01-18T08:13:34.000Z</published>
    <updated>2019-01-18T08:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇已经了解到了<code>服务注册与发现</code>、<code>Eureka</code>、<code>Eureka 简单示例</code>、<code>Eureka Server 中查看 Client 状态</code>等。接下来需要了解 Eureka 的 <code>REST API</code>、<code>核心类</code>、<code>调优</code>等惭怍。</p><a id="more"></a><h1 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h1><p>在 Eureka Server 的可视化页面中，我们可以看到每个微服务的注册信息。在 Server、Client 的配置文件中，都指定了一个 <code>defaultZone: ip:port/eureka/</code>，那么这个配置的作用是什么？为什么在 ip、端口 后面要加上一个 /eureka ？</p><p><code>/eureka</code> 就是 Eureka 的 REST API 的端点地址。</p><h2 id="eureka-端点"><a href="#eureka-端点" class="headerlink" title="/eureka/ 端点"></a>/eureka/ 端点</h2><p>启动 Eureka Server、Client，在浏览器中输入： <a href="http://localhost:8761/eureka/apps" target="_blank" rel="noopener">http://localhost:8761/eureka/apps</a> ，可以看到如下信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所有工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applications</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">versions__delta</span>&gt;</span>1<span class="tag">&lt;/<span class="name">versions__delta</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">apps__hashcode</span>&gt;</span>UP_1_<span class="tag">&lt;/<span class="name">apps__hashcode</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 单个实例的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>SPRING-CLOUD-EUREKA-CLIENT-SIMPLE<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">         <span class="tag">&lt;<span class="name">instance</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 单个实例的 instance-id --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">instanceId</span>&gt;</span>spring-cloud-eureka-client-simple:8081<span class="tag">&lt;/<span class="name">instanceId</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 实例的 hostname，没有指定时用 ip --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hostName</span>&gt;</span>10.10.10.141<span class="tag">&lt;/<span class="name">hostName</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">app</span>&gt;</span>SPRING-CLOUD-EUREKA-CLIENT-SIMPLE<span class="tag">&lt;/<span class="name">app</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 实例的ip --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ipAddr</span>&gt;</span>10.10.10.141<span class="tag">&lt;/<span class="name">ipAddr</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 实例状态 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">status</span>&gt;</span>UP<span class="tag">&lt;/<span class="name">status</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">overriddenstatus</span>&gt;</span>UNKNOWN<span class="tag">&lt;/<span class="name">overriddenstatus</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 端口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- https --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">securePort</span> <span class="attr">enabled</span>=<span class="string">"false"</span>&gt;</span>443<span class="tag">&lt;/<span class="name">securePort</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">countryId</span>&gt;</span>1<span class="tag">&lt;/<span class="name">countryId</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataCenterInfo</span> <span class="attr">class</span>=<span class="string">"com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyOwn<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataCenterInfo</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">leaseInfo</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 每多长时间续约一次，单位 秒 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">renewalIntervalInSecs</span>&gt;</span>30<span class="tag">&lt;/<span class="name">renewalIntervalInSecs</span>&gt;</span>    </span><br><span class="line">                <span class="comment">&lt;!-- 续约过期时间，单位秒。规定时间内没有续约会剔除 Eureka Server --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">durationInSecs</span>&gt;</span>90<span class="tag">&lt;/<span class="name">durationInSecs</span>&gt;</span>    </span><br><span class="line">                <span class="comment">&lt;!-- 注册时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">registrationTimestamp</span>&gt;</span>1547800471059<span class="tag">&lt;/<span class="name">registrationTimestamp</span>&gt;</span>    </span><br><span class="line">                <span class="comment">&lt;!-- 上一次续约时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lastRenewalTimestamp</span>&gt;</span>1547800471059<span class="tag">&lt;/<span class="name">lastRenewalTimestamp</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">evictionTimestamp</span>&gt;</span>0<span class="tag">&lt;/<span class="name">evictionTimestamp</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">serviceUpTimestamp</span>&gt;</span>1547800471059<span class="tag">&lt;/<span class="name">serviceUpTimestamp</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">leaseInfo</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">management.port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">management.port</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">jmx.port</span>&gt;</span>10235<span class="tag">&lt;/<span class="name">jmx.port</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 主页面 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">homePageUrl</span>&gt;</span>http://10.10.10.141:8081/<span class="tag">&lt;/<span class="name">homePageUrl</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 实例信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">statusPageUrl</span>&gt;</span>http://10.10.10.141:8081/actuator/info<span class="tag">&lt;/<span class="name">statusPageUrl</span>&gt;</span>    </span><br><span class="line">            <span class="comment">&lt;!-- 实例健康检查 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">healthCheckUrl</span>&gt;</span>http://10.10.10.141:8081/actuator/health<span class="tag">&lt;/<span class="name">healthCheckUrl</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">vipAddress</span>&gt;</span>spring-cloud-eureka-client-simple<span class="tag">&lt;/<span class="name">vipAddress</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">secureVipAddress</span>&gt;</span>spring-cloud-eureka-client-simple<span class="tag">&lt;/<span class="name">secureVipAddress</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">isCoordinatingDiscoveryServer</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isCoordinatingDiscoveryServer</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">lastUpdatedTimestamp</span>&gt;</span>1547800471059<span class="tag">&lt;/<span class="name">lastUpdatedTimestamp</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">lastDirtyTimestamp</span>&gt;</span>1547800470997<span class="tag">&lt;/<span class="name">lastDirtyTimestamp</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">actionType</span>&gt;</span>ADDED<span class="tag">&lt;/<span class="name">actionType</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">instance</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时看到的信息，是在 Eureka Server 中注册的所有Client 的信息。如果想要查询单个 Client 的信息，可以访问 <a href="http://localhost:8761/eureka/apps/{application.name}" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/{application.name}</a> ，如：<a href="http://localhost:8761/eureka/apps/SPRING-CLOUD-EUREKA-CLIENT-SIMPLE" target="_blank" rel="noopener">http://localhost:8761/eureka/apps/SPRING-CLOUD-EUREKA-CLIENT-SIMPLE</a></p><h2 id="常用的-REST-API"><a href="#常用的-REST-API" class="headerlink" title="常用的 REST API"></a>常用的 REST API</h2><p>常用的 Eureka REST API 除了 /eureka/apps 之外，还有如下接口</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">http 动作</th><th style="text-align:center">接口</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">注册新的应用实例</td><td style="text-align:center">POST</td><td style="text-align:center">/eureka/apps/{appId}</td><td style="text-align:center">可以输入 json 或者 xml 格式的 body，成功返回 204</td></tr><tr><td style="text-align:center">注销实例</td><td style="text-align:center">DELETE</td><td style="text-align:center">/eureka/apps/{appId}/{instanceId}</td><td style="text-align:center">成功返回 200</td></tr><tr><td style="text-align:center">发送心跳</td><td style="text-align:center">PUT</td><td style="text-align:center">/eureka/apps/{appId}/{instanceId}</td><td style="text-align:center">成功返回 200，instanceId 不存在返回 404</td></tr><tr><td style="text-align:center">查询所有实例</td><td style="text-align:center">GET</td><td style="text-align:center">/eureka/apps</td><td style="text-align:center">成功返回 200，输出 json 或 xml 格式的 body</td></tr><tr><td style="text-align:center">查询单个实例</td><td style="text-align:center">GET</td><td style="text-align:center">/eureka/apps/{appId}</td><td style="text-align:center">成功返回 200，输出json 或 xml 格式的 body</td></tr><tr><td style="text-align:center">根据 appId、instanceId 查询</td><td style="text-align:center">GET</td><td style="text-align:center">/eureka/apps/{appId}/{instanceId}</td><td style="text-align:center">成功返回 200，输出 json 或 xml 格式的 body</td></tr><tr><td style="text-align:center">暂停某个实例</td><td style="text-align:center">PUT</td><td style="text-align:center">/eureka/apps/{appId}/{instanceId}/status?value=OUT_OF_SERVICE</td><td style="text-align:center">成功返回 200，失败返回 500</td></tr><tr><td style="text-align:center">恢复某个实例</td><td style="text-align:center">DELETE</td><td style="text-align:center">/eureka/apps/{appId}/{instanceId}/status?vlaue=UP(value 可不传)</td><td style="text-align:center">成功返回 200，失败返回 500</td></tr><tr><td style="text-align:center">更新元数据</td><td style="text-align:center">PUT</td><td style="text-align:center">/euerka/apps/{appId}/{instanceId}/metadata?key=value</td><td style="text-align:center">成功返回 200，失败返回 500</td></tr><tr><td style="text-align:center">根据虚拟 ip 查询</td><td style="text-align:center">GET</td><td style="text-align:center">/eureka/vip/{vipAddr}</td><td style="text-align:center">成功返回 200，输出 json 或 xml 格式的 body</td></tr><tr><td style="text-align:center">根据基于 htpps 的虚拟 ip 查询</td><td style="text-align:center">GET</td><td style="text-align:center">/eureka/svip/{svipAddr}</td><td style="text-align:center">成功返回 200，输出 json 或 xml 格式的 body</td></tr></tbody></table><p>在进行新实例的注册时，传入的 json、xml 的格式需要与调用<code>获取单个实例</code>所返回的数据格式一致。具体的数据需要自己指定，需要注意的是，如果要注册的实例的ip、端口已经存在的话，不会再次注册，需要修改 instanceId。</p><hr><h1 id="Eureka-核心类"><a href="#Eureka-核心类" class="headerlink" title="Eureka 核心类"></a>Eureka 核心类</h1><p>Eureka 提供了一些核心的类，这些类中保存了 Eureka Server、Client 的注册信息、运行时的信息等。</p><h2 id="InstanceInfo"><a href="#InstanceInfo" class="headerlink" title="InstanceInfo"></a>InstanceInfo</h2><p>InstanceInfo 代表了注册的服务实例(位置： com/netflix/appinfo/InstanceInfo.java)</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">app</td><td style="text-align:center">应用名称</td></tr><tr><td style="text-align:center">appGroupName</td><td style="text-align:center">应用所属群组</td></tr><tr><td style="text-align:center">ipAddr</td><td style="text-align:center">ip 地址</td></tr><tr><td style="text-align:center">sid</td><td style="text-align:center">已废弃，默认 na</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">端口号</td></tr><tr><td style="text-align:center">securePort</td><td style="text-align:center">https 端口</td></tr><tr><td style="text-align:center">homePageUrl</td><td style="text-align:center">应用实例的首页 url</td></tr><tr><td style="text-align:center">statusPageUrl</td><td style="text-align:center">应用实例的状态页 url</td></tr><tr><td style="text-align:center">healthPageUrl</td><td style="text-align:center">应用实例的健康检查 url</td></tr><tr><td style="text-align:center">secureHealthPageUrl</td><td style="text-align:center">应用实例的健康检查 https url</td></tr><tr><td style="text-align:center">vipAddress</td><td style="text-align:center">虚拟 ip 地址</td></tr><tr><td style="text-align:center">secureVipAddress</td><td style="text-align:center">https 的虚拟 ip 地址</td></tr><tr><td style="text-align:center">countryId</td><td style="text-align:center">已废弃，默认 1，代表 US</td></tr><tr><td style="text-align:center">dataCenterI</td><td style="text-align:center">dataCenter 信息，Netflix、Amazon、MyOwen</td></tr><tr><td style="text-align:center">hostName</td><td style="text-align:center">主机名称（默认 ip</td></tr><tr><td style="text-align:center">status</td><td style="text-align:center">状态，如：UP、DOWN、STATING、OUT_OF_SERVICE、UNKNOWN</td></tr><tr><td style="text-align:center">overrideenstatus</td><td style="text-align:center">外界需要强制覆盖的状态，默认为 UNKNOWN</td></tr><tr><td style="text-align:center">leaseInfo</td><td style="text-align:center">租约信息</td></tr><tr><td style="text-align:center">isCorrdinatindDiscoveryServer</td><td style="text-align:center">首先标示是否是 DiscoveryServer，其次标示该 DiscoveryServer 是否是响应你请求的实例</td></tr><tr><td style="text-align:center">metadata</td><td style="text-align:center">应用实例的元数据信息</td></tr><tr><td style="text-align:center">lastUpdateTimestamp</td><td style="text-align:center">状态信息最后更新时间</td></tr><tr><td style="text-align:center">lastDirtyTimestamp</td><td style="text-align:center">实例信息的最新过期时间，在 Client 端用于标志该实例信息是否与 Eureka Server 一致，在 Server 端则与多个 Server 之间进行信息同步</td></tr><tr><td style="text-align:center">actionType</td><td style="text-align:center">标示 Server 对该实例进行的操作，包括：ADDED、MODIFIED、DELETED</td></tr><tr><td style="text-align:center">args</td><td style="text-align:center">在 AWS 的 autoscaling group 名称</td></tr></tbody></table><p>可以看出，整个 InstanceInfo 的返回值信息，就是访问 <code>/eureka/apps/{appId}</code> 的返回值，也是通过 REST API 向 Eureka Server 注册时的 body。</p><h2 id="LeaseInfo"><a href="#LeaseInfo" class="headerlink" title="LeaseInfo"></a>LeaseInfo</h2><p>LeaseInfo 标识应用实例的租约信息(位置： com/netflix/appinfo/LeaseInfo.java)</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">renewalIntervalInSecs</td><td style="text-align:center">Client 续约时间间隔(秒)</td></tr><tr><td style="text-align:center">durationInSecs</td><td style="text-align:center">Client 的租约有效时间长(秒)</td></tr><tr><td style="text-align:center">registreationTimestamp</td><td style="text-align:center">第一次注册时间(毫秒时间戳)</td></tr><tr><td style="text-align:center">laseRenewalTimestamp</td><td style="text-align:center">最后一次续约时间(毫秒时间戳)</td></tr><tr><td style="text-align:center">evicationTimestamp</td><td style="text-align:center">租约被剔除时间(毫秒时间戳)</td></tr><tr><td style="text-align:center">serviceUpTimestamp</td><td style="text-align:center">Client 被标记为 UP 状态的时间(毫秒时间戳)</td></tr></tbody></table><h2 id="ServiceInstanceInfo"><a href="#ServiceInstanceInfo" class="headerlink" title="ServiceInstanceInfo"></a>ServiceInstanceInfo</h2><p>ServiceInstanceInfo 是一个标识一个应用实例的接口，约定了服务的发现的实例应用有哪些通用信息(位置： org/springframework/cloud/client/ServiceInstanceInfo.java)</p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">getSercieId()</td><td style="text-align:center">获取服务 id</td></tr><tr><td style="text-align:center">getHost()</td><td style="text-align:center">获取实例的 HOST</td></tr><tr><td style="text-align:center">getPort()</td><td style="text-align:center">获取实例的端口</td></tr><tr><td style="text-align:center">isSecure()</td><td style="text-align:center">是否开启 https</td></tr><tr><td style="text-align:center">getUri()</td><td style="text-align:center">实例的 uri 地址</td></tr><tr><td style="text-align:center">getMetadata()</td><td style="text-align:center">实例的元数据信息</td></tr><tr><td style="text-align:center">getScheme()</td><td style="text-align:center">实例的 scheme</td></tr></tbody></table><p>对于 ServiceInstanceInfo 接口的实现为：EurekaRegistration(位置：org/springframework/cloud/netflix/eureka/serviceregistry/EurekaRegistration.java)，EurekaRegistration 同时还实现了 Closeable 接口，这个接口的作用之一是在 close 的时候调用 eurekaClient.shutdown() 方法，实现优雅关闭 Eureka Client。</p><h2 id="InstanceStatus"><a href="#InstanceStatus" class="headerlink" title="InstanceStatus"></a>InstanceStatus</h2><p>InstanceStatus 是一个枚举类型，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> InstanceStatus &#123;</span><br><span class="line">    UP,</span><br><span class="line">    DOWN,</span><br><span class="line">    STARTING,</span><br><span class="line">    OUT_OF_SERVICE,</span><br><span class="line">    UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InstanceStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InstanceInfo.<span class="function">InstanceStatus <span class="title">toEnum</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> valueOf(s.toUpperCase());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException var2) &#123;</span><br><span class="line">                InstanceInfo.logger.debug(<span class="string">"illegal argument supplied to InstanceStatus.valueOf: &#123;&#125;, defaulting to &#123;&#125;"</span>, s, UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中定义了 5 种状态，对应 Client 的 5 种状态。</p><hr><h1 id="服务的核心操作"><a href="#服务的核心操作" class="headerlink" title="服务的核心操作"></a>服务的核心操作</h1><p>对于服务发现来说，一般都是围绕几个核心的概念进行设计：</p><blockquote><p>服务发现（register）<br>服务下线（cancel）<br>服务租约（renew）<br>服务剔除（evict）</p></blockquote><p>围绕这几个概念，Eureka 设计了一些核心的操作类：</p><ul><li>com/netflix/eureka/lease/LeaseManager.java</li><li>com/netflix/discovery/shared/LookupService.java</li><li>com/netflix/eureka/registry/InstanceRegistry.java</li><li>com/netflix/eureka/registry/AbstractInstanceRegistry.java</li><li>com/netflix/eureka/registry/PeerAwareInstanceRegistry.java</li></ul><p>在 Netflix Eureka 的基础上，Spring Cloud 抽象或定义了几个核心类:</p><ul><li>org/springframewor/cloud/netflix/eureka/server/InstanceRegistry.java</li><li>org/springframewor/cloud/client/serviceregistry/ServiceRegistry.kava</li><li>org/springframewor/cloud/netflix/eureka/serviceregistry/EurekaServiceRegistry.java</li><li>org/springframewor/cloud/netflix/eureka/serviceregistry/EurekaRegistration.java</li><li>org/springframewor/cloud/netflix/eureka/EurekaClientAutoConfiguration.java</li><li>org/springframewor/cloud/netflix/eureka/EurekaClientConfigBean.java</li><li>org/springframewor/cloud/netflix/eureka/EurekaInstanceConfigBean.java</li></ul><p>其中：<code>LeaseManager</code>、<code>LookupService</code> 是 Eureka 关于服务发现相关操作操作定义的接口类，<code>LeaseManager</code> 定义了服务写操作相关方法，<code>LookupService</code> 定义查询操作的相关方法。</p><h2 id="LeaseManager"><a href="#LeaseManager" class="headerlink" title="LeaseManager"></a>LeaseManager</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LeaseManager</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(T r, <span class="keyword">int</span> leaseDuration, <span class="keyword">boolean</span> isReplication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(String appName, String id, <span class="keyword">boolean</span> isReplication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">renew</span><span class="params">(String appName, String id, <span class="keyword">boolean</span> isReplication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">evict</span><span class="params">()</span></span>;</span><br><span class="line">&#125;、</span><br></pre></td></tr></table></figure><ul><li>register：用于注册服务实例信息</li><li>cancel：用于删除服务实例信息</li><li>renew：用于和 Eureka Server 进行心跳操作，维持租约</li><li>evict：Server 端的方法，用于剔除租约过期的服务实例。</li></ul><h2 id="LoopupService"><a href="#LoopupService" class="headerlink" title="LoopupService"></a>LoopupService</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LookupService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">(String appName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Applications <span class="title">getApplications</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;InstanceInfo&gt; <span class="title">getInstancesById</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">InstanceInfo <span class="title">getNextServerFromEureka</span><span class="params">(String virtualHostname, <span class="keyword">boolean</span> secure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getApplication：根据 appName 获取服务信息</li><li>getApplications：获取所有注册的服务信息</li><li>getInstancesById：根据 appid，获取所有实例</li><li>getNextServerFromEureka：根据虚拟hostname、是否是 https，获取下一个服务实例方法（默认轮训获取）</li></ul><hr><h1 id="Eureka-参数调优"><a href="#Eureka-参数调优" class="headerlink" title="Eureka 参数调优"></a>Eureka 参数调优</h1><h2 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h2><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.client.avaliability-zones</td><td style="text-align:center"></td><td style="text-align:center">告知 Client 有哪些 regin 和 zone，支持配置修改运行时生效</td></tr><tr><td style="text-align:center">eureka.client.filter-only-up-instances</td><td style="text-align:center">true</td><td style="text-align:center">是否滤出 InstanceStatus 为 UP 的实例</td></tr><tr><td style="text-align:center">eureka.clint.region</td><td style="text-align:center">us-east-1</td><td style="text-align:center">指定 region，当 datacenters 为 AWS 时适用</td></tr><tr><td style="text-align:center">eureka.client.register-with-eureka</td><td style="text-align:center">true</td><td style="text-align:center">是否将实例注册到 Eureka Server</td></tr><tr><td style="text-align:center">eureka.client.prefer-same-zone-eureka</td><td style="text-align:center">true</td><td style="text-align:center">是否优先使用和该应用实例处于相同 Zone 的 Eureka Server</td></tr><tr><td style="text-align:center">eureka.client.on-demand-update-status-change</td><td style="text-align:center">trye</td><td style="text-align:center">是否将本地实例状态的更新，通过 ApplicationInfoManager 实时同步到 Eureka Server(这个同步请求有流量限制)</td></tr><tr><td style="text-align:center">eureka.instance.matadata-map</td><td style="text-align:center"></td><td style="text-align:center">指定实例的元数据信息</td></tr><tr><td style="text-align:center">eureka.instance.prefer-ip-address</td><td style="text-align:center">false</td><td style="text-align:center">是否优先使用 ip 地址来代替 hostname 作为实例的 hostname 字段值</td></tr><tr><td style="text-align:center">eureka.instance.lease-exporation-duration-in-seconds</td><td style="text-align:center">90</td><td style="text-align:center">指定 Eureka Client 间隔多久向 Server 发送心跳</td></tr></tbody></table><h3 id="定时任务参数"><a href="#定时任务参数" class="headerlink" title="定时任务参数"></a>定时任务参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值(时间单位：秒，非时间单位：个)</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.client.cache-refresh-executor-thread-pool-size</td><td style="text-align:center">2</td><td style="text-align:center">刷新缓存的 CacheRefreshThread 线程池大小</td></tr><tr><td style="text-align:center">eureka.client.cache-refresh-executor-exponential-back-off-bound</td><td style="text-align:center">10</td><td style="text-align:center">调度任务执行时，下次调度的延迟时间</td></tr><tr><td style="text-align:center">eureka.client.heartbeat-executor-thread-pool-size</td><td style="text-align:center">2</td><td style="text-align:center">执行心跳 HeartbeatThread 的线程池大小</td></tr><tr><td style="text-align:center">eureka.client.heartbeat-executor-exponential-back-off-bound</td><td style="text-align:center">10</td><td style="text-align:center">调度任务执行时，下次调度的延迟时间</td></tr><tr><td style="text-align:center">eureka.client.registry-fetch-interval-seconds</td><td style="text-align:center">30</td><td style="text-align:center">CachaRefreshThread 线程调度频率</td></tr><tr><td style="text-align:center">eureka.client.eureka-service-url-poll-interval-seconds</td><td style="text-align:center">5*60</td><td style="text-align:center">AsyncResolver.updateTask 刷新 Eureka Server 地址的时间间隔</td></tr><tr><td style="text-align:center">eureka.client.initial-instance-info-replication-interval-seconds</td><td style="text-align:center">40</td><td style="text-align:center">InstanceInfoReplicator 将实例信息变更同步到 Eureka Server 的初始延时时间</td></tr><tr><td style="text-align:center">eureka.client.instance-infi-replication-interval-seconds</td><td style="text-align:center">30</td><td style="text-align:center">InstanceInfiReplicator 将实例信息变更同步到 Eureka Server 的时间间隔</td></tr><tr><td style="text-align:center">eureka.client.lease-renewal-interval-in-seconds</td><td style="text-align:center">30</td><td style="text-align:center">Eureka Client 向 Eureka Server 发送心跳的时间间隔</td></tr></tbody></table><h3 id="http-参数"><a href="#http-参数" class="headerlink" title="http 参数"></a>http 参数</h3><p>Eureka Client 底层使用 HttpClient 与 Eureka Server 通信。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.client.eureka-server-connect-timeout-seconds</td><td style="text-align:center">5</td><td style="text-align:center">连接超时时间</td></tr><tr><td style="text-align:center">eureka.client.eureka-server-read-timeout-seconds</td><td style="text-align:center">8</td><td style="text-align:center">读超时时间</td></tr><tr><td style="text-align:center">eureka.client.eureka-server-total-connections</td><td style="text-align:center">200</td><td style="text-align:center">连接池最大连接数</td></tr><tr><td style="text-align:center">eureka.client.eureka-server-total-connections-per-host</td><td style="text-align:center">50</td><td style="text-align:center">每个 host 能使用的最大链接数</td></tr><tr><td style="text-align:center">eureka.client.eureka-connection-idle-timeout-seconds</td><td style="text-align:center">30</td><td style="text-align:center">连接池空闲连接时间</td></tr></tbody></table><h2 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h2><p>Server 端的参数调优分为：基本参数，Response Cache、Peer、Http 等</p><h3 id="基本参数-1"><a href="#基本参数-1" class="headerlink" title="基本参数"></a>基本参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.server.enable-self-preservation</td><td style="text-align:center">true</td><td style="text-align:center">是否开启自我保护模式</td></tr><tr><td style="text-align:center">eureka.server.renewal-percent-threshold</td><td style="text-align:center">0.85</td><td style="text-align:center">每分钟需要收到的续约次数阈值(心跳数/client实例数)</td></tr><tr><td style="text-align:center">eureka.instance.registry.expected-number-of-renews-per-min</td><td style="text-align:center">1</td><td style="text-align:center">指定每分钟需要收到的续约次数，实际上，在源码中被写死为 count * 2</td></tr><tr><td style="text-align:center">eureka.server-renrewal-threshold-update-interval-ms</td><td style="text-align:center">15 分钟</td><td style="text-align:center">指定 updateRenewalThreshold 定时任务的调度频率，动态更新 expectedNumberOfRenewsMin 以及 numberOfNewsPerMinThreshold 的值</td></tr><tr><td style="text-align:center">eureka.server.evication-interval-timer-in-ms</td><td style="text-align:center">60*1000</td><td style="text-align:center">指定 EvicationTask 定时任务调度频率，用于剔除过期的实例</td></tr></tbody></table><h3 id="Response-Cache-参数"><a href="#Response-Cache-参数" class="headerlink" title="Response Cache 参数"></a>Response Cache 参数</h3><p>Eureka Server 为了提升自身 REST API 接口的性能，提供了两个缓存：一个是基于 <code>ContioncurrentMap</code> 的 <code>readOnlyCacheMap</code>，一个是基于 <code>Guava Chahe</code> 的 <code>readWriteCacheMap</code>。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.server.use-read-only-response-cache</td><td style="text-align:center">true</td><td style="text-align:center">是否使用只读的 Response Cache</td></tr><tr><td style="text-align:center">eureka.server.response-cache-update-interval-ms</td><td style="text-align:center">30 * 1000</td><td style="text-align:center">设置 CacheUpdateTask 的调度时间间隔，用于从 readWriteCacheMap 更新数据到 readOnlyCacheMap。仅在 <code>eureka.server.use-read-only-response-cache</code> 为 true 时生效</td></tr><tr><td style="text-align:center">eureka.server.response-cache-auto-expiration-in-seconds</td><td style="text-align:center">180</td><td style="text-align:center">设置 <code>readWriteCacheMap</code> 的过期时间</td></tr></tbody></table><h3 id="peer-参数"><a href="#peer-参数" class="headerlink" title="peer 参数"></a>peer 参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.server.peer.eureka-nodes-update-interval-ms</td><td style="text-align:center">10分钟</td><td style="text-align:center">指定 peersUpdateTask 调度的时间间隔，用于配置文件刷新 <code>peerEurekaNodes</code> 节点的配置信息</td></tr><tr><td style="text-align:center">eureka.server.peer-eureka-status-refresh-time-interval-ms</td><td style="text-align:center">30*1000</td><td style="text-align:center">指定更新 Peer nodes 状态的时间间隔</td></tr></tbody></table><h3 id="http-参数-1"><a href="#http-参数-1" class="headerlink" title="http 参数"></a>http 参数</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">默认值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eureka.server.peer-node-connect-timeout-ms</td><td style="text-align:center">200</td><td style="text-align:center">链接超时时间</td></tr><tr><td style="text-align:center">eureka.server.peer-node-read-timeout-ms</td><td style="text-align:center">200</td><td style="text-align:center">读超时时间</td></tr><tr><td style="text-align:center">eureka.server.peer-node-total-connections</td><td style="text-align:center">1000</td><td style="text-align:center">连接池最大连接数</td></tr><tr><td style="text-align:center">eureka.server.peer-node-total-connections-per-host</td><td style="text-align:center">500</td><td style="text-align:center">每个 host 能使用的最大连接数</td></tr><tr><td style="text-align:center">eureka.server.peer-node-connection-idle-timeout-seconds</td><td style="text-align:center">30</td><td style="text-align:center">连接池中链接的空闲时间</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇已经了解到了&lt;code&gt;服务注册与发现&lt;/code&gt;、&lt;code&gt;Eureka&lt;/code&gt;、&lt;code&gt;Eureka 简单示例&lt;/code&gt;、&lt;code&gt;Eureka Server 中查看 Client 状态&lt;/code&gt;等。接下来需要了解 Eureka 的 &lt;code&gt;REST API&lt;/code&gt;、&lt;code&gt;核心类&lt;/code&gt;、&lt;code&gt;调优&lt;/code&gt;等惭怍。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://www.laiyy.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（3） --- Eureka(一) &lt;BR&gt; 注册中心与 Eureka</title>
    <link href="https://www.laiyy.top/java/2019/01-17/spring-cloud-3.html"/>
    <id>https://www.laiyy.top/java/2019/01-17/spring-cloud-3.html</id>
    <published>2019-01-17T03:41:30.000Z</published>
    <updated>2019-01-17T03:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Eureka 最初是针对 AWS 不提供中间服务层的负载均衡的限制开发的。 Eureka 一方面给内部服务做服务发现，另一方面可以结合 Ribbon 组件提供各种个性化的负载均衡算法。</p><a id="more"></a><h1 id="Spring-Cloud-微服务系列版本"><a href="#Spring-Cloud-微服务系列版本" class="headerlink" title="Spring Cloud 微服务系列版本"></a>Spring Cloud 微服务系列版本</h1><blockquote><p>Spring Boot 版本： 2.1.0.RELEASE<br>Spring Cloud 版本：Finchley.RELEASE</p></blockquote><hr><h1 id="服务发现的技术选型方案"><a href="#服务发现的技术选型方案" class="headerlink" title="服务发现的技术选型方案"></a>服务发现的技术选型方案</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th style="text-align:center">CAP</th><th style="text-align:center">语言</th><th style="text-align:center">依赖</th><th style="text-align:center">集成</th><th style="text-align:center">一致性算法</th></tr></thead><tbody><tr><td style="text-align:center">Zookeeper</td><td style="text-align:center">General</td><td style="text-align:center">CP</td><td style="text-align:center">Java</td><td style="text-align:center">JVM</td><td style="text-align:center">Client Binding</td><td style="text-align:center">Paxos</td></tr><tr><td style="text-align:center">Doozer</td><td style="text-align:center">General</td><td style="text-align:center">CP</td><td style="text-align:center">Go</td><td style="text-align:center"></td><td style="text-align:center">Client Binding</td><td style="text-align:center">Paxos</td></tr><tr><td style="text-align:center">Consul</td><td style="text-align:center">General</td><td style="text-align:center">CP</td><td style="text-align:center">GO</td><td style="text-align:center"></td><td style="text-align:center">HTTP/DNS Library</td><td style="text-align:center">Raft</td></tr><tr><td style="text-align:center">Etcd</td><td style="text-align:center">General</td><td style="text-align:center">CP or Mixed(1)</td><td style="text-align:center">Go</td><td style="text-align:center"></td><td style="text-align:center">Client Binding/HTTP</td><td style="text-align:center">Raft</td></tr><tr><td style="text-align:center">SmartStack</td><td style="text-align:center">Dedicated</td><td style="text-align:center">AP</td><td style="text-align:center">Ruby</td><td style="text-align:center">Haproxy/Zookeeper</td><td style="text-align:center">Sidekick(nerve/synapse)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Eureka</td><td style="text-align:center">Dedicated</td><td style="text-align:center">AP</td><td style="text-align:center">Java</td><td style="text-align:center">JVM</td><td style="text-align:center">Java Client</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">NSQ(lookupd)</td><td style="text-align:center">Dedicated</td><td style="text-align:center">AP</td><td style="text-align:center">Go</td><td style="text-align:center"></td><td style="text-align:center">Client Binding</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Serf</td><td style="text-align:center">Dedicated</td><td style="text-align:center">AP</td><td style="text-align:center">Go</td><td style="text-align:center"></td><td style="text-align:center">Local CLI</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Spotify(DNS)</td><td style="text-align:center">15973840029</td><td style="text-align:center">AP</td><td style="text-align:center">N/A</td><td style="text-align:center">Bind</td><td style="text-align:center">DNS Library</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">SkyDNS</td><td style="text-align:center">808376</td><td style="text-align:center">Mixed(2)</td><td style="text-align:center">Go</td><td style="text-align:center"></td><td style="text-align:center">HTTP/DNS Library</td></tr></tbody></table><hr><h1 id="Eureka-的设计理念"><a href="#Eureka-的设计理念" class="headerlink" title="Eureka 的设计理念"></a>Eureka 的设计理念</h1><h2 id="服务实例注册到服务中心"><a href="#服务实例注册到服务中心" class="headerlink" title="服务实例注册到服务中心"></a>服务实例注册到服务中心</h2><p>服务的注册，本质上就是在服务启动的时候，调用 Eureka Server 的 REST API 的 Registrer 方法，注册应用实例的信息。对于 Java 应用，可以使用 Netflix 的 Eureka Client 封装 API 调用；对于 Spring Cloud 应用，可以使用 <code>spring-cloud-starter-netflix-eureka-client</code> 基于 Spring Boot 自动配置，自动注册服务。</p><h2 id="服务实体从服务中心剔除"><a href="#服务实体从服务中心剔除" class="headerlink" title="服务实体从服务中心剔除"></a>服务实体从服务中心剔除</h2><p>正常情况下，服务实例在关闭应用的时候，应该通过钩子方法或其他生命周期回调方法，调用 Eureka Server 的 REST API 的 de-register 方法，来删除自身服务实例的信息。另外，为了解决服务挂掉，或网络中断等其他异常情况没有及时删除自身信息的问题，Eureka Server 要求 Client 定时进行续约，也就是发送心跳，来证明自己是存活的、健康的、可调用的。如果超过一定时间没有续约，则认为 Client 停掉了，Server 端会主动剔除。</p><h2 id="服务实例一致性问题"><a href="#服务实例一致性问题" class="headerlink" title="服务实例一致性问题"></a>服务实例一致性问题</h2><p>由于注册中心（Eureka Server）通常来说是一个集群，就需要 Client 在集群中保持一致。Eureka 通过 <code>CAP</code>、<code>Peer to Peer</code>、<code>Zone + Region</code>、<code>SELF PRESERVATION</code> 四个方面保证一致性。</p><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p>在 <a href="/java/2019/01-16/spring-cloud-2.html#注册中心对比">微服务与 Spring Cloud</a>、 <a href="#服务发现的技术选型方案">服务发现技术选型</a>、<a href="#服务实例一致性问题">服务一致性</a> 都提到了 <code>CAP</code>、<code>CP</code>、<code>AP</code>，那么 <code>CAP</code> 到底是个啥</p><ul><li>C：Consistency，数据一致性。即数据在存在多个副本的情况下，可能由于网络、机器故障、软件系统等问题早上数据写入部分副本成功，副本副本失败，进而造成副本之间数据不一致，存在冲突。满足一致性则要求对数据的更新操作成功后，多副本的数据保持一致。</li><li>A：Availablility，服务可用性。在任何时候，客户端对集群进行读写操作时，请求能够正常响应，即，在一定的时间内完成。</li><li>P：Partition Tolerance，分区容忍性，即发生通信故障的时候，整个集群被分隔成多个无法相互通信的分区时，集群仍然可用。</li></ul><p>在分布式系统中，网络条件一般是不可控的，网络分区是不可避免的，因此分布式系统必须满足<code>分区容忍性</code>，所以分布式系统的设计需要在 AP、CP 之间进行选择。</p><p><strong>Zookeeper</strong> 是 “C”P 的，C 之所以加引号，是因为 Zookeeper 默认并不说严格的强一致性。如：A 进行写操作，Zookeeper 在过半节点数操作成功就返回，此时如果 B 读取到的是 A 写操作没有同步到的节点，那么就读取不到 A 写入的数据。如果需要在使用的时候强一致，需要在读取的时候先执行 sync 操作，与 leader 节点先同步数据，才能保证强一致。</p><p><strong>Eureka</strong> 在大规模部署的情况下，失败是不可避免的，可能会因为 Eureka 自身部署的失败，导致注册的服务不可用，或者由于网络分区，导致服务不可用。Eureka 服务注册、发现中心，保留了可用及过期的数据，以此来实现在网络分区的时候，还能正常提供服务注册发现功能。</p><h3 id="Peer-to-Peer"><a href="#Peer-to-Peer" class="headerlink" title="Peer to Peer"></a>Peer to Peer</h3><p>分布式系统的数据在多个副本直接的复制方式，可分为：主从复制、对等复制</p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>主从复制，就是 Master-Slave 模式，有一个主副本，其他为从副本。所有的对数据的写操作，都提交到<code>主副本</code>，然后由主副本更新到其他的从副本。具体的更新方式有：同步更新、异步更新、同步异步混合更新。<br>对于主从复制的模式，写操作都要经过主副本，所有主副本的压力会很大。但是，从副本会分担主副本的读请求，而一个系统最大的请求都是读请求，所有可以一般情况下都是<code>一主多从</code>的架构。</p><h4 id="对等复制"><a href="#对等复制" class="headerlink" title="对等复制"></a>对等复制</h4><p>即 Peer to Peer 模式。副本之间不分主从，任何副本都能接收写操作，然后每个副本之间相互进行数据更新。对于对等复制模式来说，由于任何副本都可以接收到写操作，所以不存在写操作的压力瓶颈。但是由于每个副本都能进行写操作，各个副本之间的数据同步及冲突处理是一个比较棘手的问题。</p><p>Eureka 采用的就是 <code>Peer to Peer</code></p><h3 id="Zone-及-Region"><a href="#Zone-及-Region" class="headerlink" title="Zone 及 Region"></a>Zone 及 Region</h3><p>Netflix 的服务大部分在 Amazon Video 上，因此 Eureka 的设计有一部分也是基于 Amazon 的 Zone、Region 基础上托管。</p><p><img src="/images/spring-cloud/eureka/region.png" alt="Region 列表"></p><p>每个 Region 下，还分了几个 Zone，一个 Region 对应多个 Zone，每个 Region 之间是相互独立及隔离的，默认情况下，资源只在单个 Region 之间的 Zone 进行复制，跨 Region 之间不会进行资源复制。</p><p><img src="/images/spring-cloud/eureka/region-zone.png" alt="Region-Zone"></p><h3 id="SELF-PRESERVATION"><a href="#SELF-PRESERVATION" class="headerlink" title="SELF PRESERVATION"></a>SELF PRESERVATION</h3><p>在分布式系统中，通常需要对应用实例的存活进行健康检查，需要处理好网络抖动或短暂的不可用造成的误判；另外，Eureka Server 和 Client 之间如果存在网络分区，在极端情况下可能会导致 Eureka Server 情况部分服务的实例列表，这个将严重影响到 Eureka Server 的高可用。因此，Eureka 引入了自我保护机制(SELF PRESERVATION)。</p><p>Client 与 Server 之间有租约，Client 需要定时发送心跳维持租约，表示自己存活。Eureka 通过当前注册的实例数，计算每分钟应该从应用实例接收到的心跳数，如果最近一分钟接收到的续约次数小于指定的阈值的话，则<code>关闭租约失效剔除</code>，进制定时任务剔除失效的实例，从而保护注册信息。</p><hr><h1 id="Eureka-入门案例"><a href="#Eureka-入门案例" class="headerlink" title="Eureka 入门案例"></a>Eureka 入门案例</h1><h2 id="父-pom"><a href="#父-pom" class="headerlink" title="父 pom"></a>父 pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父工程是 2.1.0.RELEASE 版本的 boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置全局 SpringCloud 依赖版本为 F.RELEASE --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置全局依赖 SpringBoot、Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="建立-Eureka-Server-子项目"><a href="#建立-Eureka-Server-子项目" class="headerlink" title="建立 Eureka Server 子项目"></a>建立 Eureka Server 子项目</h2><p>在<code>父pom</code>中建立 Eureka Server 子项目 module：<code>spring-cloud-eureka-server</code></p><h3 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.laiyy.gitee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 eureka server 依赖，注意不能少了 starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>     <span class="comment">// 开启 Eureka Server </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span> <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span> <span class="comment"># 服务端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> <span class="comment"># host name</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 是否获取注册表</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:$&#123;server.port:8761&#125;/eureka/</span> <span class="comment"># 默认 Zone</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否注册自己</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 是否开启自我保护，默认 true。在本机测试可以使用 false，但是在生产环境下必须为 true</span></span><br></pre></td></tr></table></figure><h3 id="验证-Eureka-Server-启动结果"><a href="#验证-Eureka-Server-启动结果" class="headerlink" title="验证 Eureka Server 启动结果"></a>验证 Eureka Server 启动结果</h3><p>在浏览器输入： <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a> ，进入 Eureka Server 可视化页面</p><p><img src="/images/spring-cloud/eureka/eureka.png" alt="Eureka Server UI"></p><h2 id="Eureka-Server-UI-提示信息"><a href="#Eureka-Server-UI-提示信息" class="headerlink" title="Eureka Server UI 提示信息"></a>Eureka Server UI 提示信息</h2><p>在 Eureka Server 检测到异常时，会在中间以<strong>红色加粗</strong>字体提示信息。</p><p>在没有 Eureka Client 或 Eureka Server 检测心跳的阈值小于指定阈值，且关闭自我保护时：</p><blockquote><p><strong>RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</strong><br>提示说明了：1、eureka client 的心跳发送次数小于阈值(没有client，肯定小于)；2、自我保护被关闭了</p></blockquote><p>在有 Eureka Client，且关闭了自我保护时：</p><blockquote><p><strong>THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</strong></p></blockquote><p>在没有 Eureka Client 或 Eureka Server 检测心跳的阈值小于指定阈值，且开启了自我保护时：</p><blockquote><p><strong>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</strong></p></blockquote><p>在有 Eureka Client 且 Eureka Server 检测心跳的阈值大于指定阈值，且开启了自我保护时，Eureka Server 会认为整个服务正常，不会有任何信息提示。</p><h2 id="建立-Eureka-Client-项目"><a href="#建立-Eureka-Client-项目" class="headerlink" title="建立 Eureka Client 项目"></a>建立 Eureka Client 项目</h2><p>在 在<code>父pom</code>中建立 Eureka Server 子项目 module：<code>spring-cloud-eureka-client-simple</code>，建立一个简单的 eureka client 工程</p><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent 都和 Eureka Server 一致，不再赘述 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EurekaClient、DiscoveryClient 本质上都是注册到服务中心的实现，EurekaClient 只针对 Eureka 使用，</span></span><br><span class="line"><span class="comment">// DiscoveryClient 针对不同的注册中心都可以使用。可以说 DiscoveryClient 的 EurekaClient 的一个抽象</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//@EnableEurekaClient </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaClientSimpleApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaClientSimpleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka-client-simple</span> <span class="comment"># 工程名称，也是注册到 server 后的实例名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span>      <span class="comment"># 指定 Zone，需要与 Eureka Server 一样</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 使用 ip 注册，默认为 false。为 false 时是 机器名</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="comment"># 注册到 server 后显示的名字，默认是 机器名:name:端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span> <span class="comment"># 端口</span></span><br></pre></td></tr></table></figure><h3 id="在-Eureka-Server-验证服务注册"><a href="#在-Eureka-Server-验证服务注册" class="headerlink" title="在 Eureka Server 验证服务注册"></a>在 Eureka Server 验证服务注册</h3><p><img src="/images/spring-cloud/eureka/eureka-client.png" alt="Eureka Client"></p><p>可以看到，eureka client 已经注册成功。 status 大致有 5 个状态：UP(正常运行)、DOWN(停机)、STATING(正在启动)、OUT_OF_SERVICE(下线)、UNKNOWN(为止)</p><hr><h1 id="公益-Eureka-Server"><a href="#公益-Eureka-Server" class="headerlink" title="公益 Eureka Server"></a>公益 Eureka Server</h1><p>如果不想在本机启动 Eureka Server，SpringCloud 中文社区提供了一个公益的 Eureka Server：<a href="http://eureka.springcloud.cn/" target="_blank" rel="noopener">http://eureka.springcloud.cn/</a>，在使用时只需要将 defaultZone 替换为 <a href="http://eureka.springcloud.cn/eureka" target="_blank" rel="noopener">http://eureka.springcloud.cn/eureka</a> 即可。</p><p>不过需要注意的是，虽然省去了启动 Eureka Server 的时间，节省了维护 Eureka Server 的资源，但是这个 Eureka Server 是一个单节点的，如果想要测试 Eureka Server 的集群高可用，还是需要在本机启动多个 Eureka Server。</p><p>公益的 Eureka Server 只能使用在本机测试中，禁止在测试环境、成产环境上使用，否则将暴露 ip、端口，造成严重的安全隐患。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Eureka 最初是针对 AWS 不提供中间服务层的负载均衡的限制开发的。 Eureka 一方面给内部服务做服务发现，另一方面可以结合 Ribbon 组件提供各种个性化的负载均衡算法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="https://www.laiyy.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（2）                 &lt;BR&gt; 微服务与 Spring Cloud</title>
    <link href="https://www.laiyy.top/java/2019/01-16/spring-cloud-2.html"/>
    <id>https://www.laiyy.top/java/2019/01-16/spring-cloud-2.html</id>
    <published>2019-01-16T06:32:19.000Z</published>
    <updated>2019-01-16T06:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用是可以独立运行的程序代码，提供相对完善的业务功能。<br>架构分为：业务架构、应用架构、技术架构。业务架构决定应用架构，技术架构支撑应用架构。<br>架构的发展历程：<code>单体架构 --&gt; 分布式架构 --&gt; SOA 架构 --&gt; 微服务架构</code></p><a id="more"></a><h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><h2 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h2><p>单体架构可以理解为一个 Java Web 工程，包含：表现成、业务层、数据访问层。从 Controller 到 Service 到 Dao，没有任何应用拆分，开发完毕后打包成一个大型的 war 部署。</p><p><img src="/images/spring-cloud/infomation/single.png" alt="单体应用架构"></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>便于发开：开发人员使用当前开发工具在短时间内就可以完成开发</li><li>便于测试：不需要依赖其他接口，节约时间</li><li>便于部署：只需将 war 部署到运行环境即可</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>灵活度不够：如果程序有任何修改，需要自上而下全部修改，测试的时候也不要整个程序部署完才能看到效果。在开发过程中，可能会需要等待其他开发人员开发完成才能进行自己开发的内容。</li><li>降低系统性能：原本可以直接访问数据库，但多出了一个 Service 层</li><li>启动慢：一个进程中包含了所以的业务逻辑，涉及的模块过多</li><li>扩展性差：增加新的功能不能针对单个点增加，要全局性的增加，牵一发动全身</li></ul><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p>按照业务垂直切分，每个应用都是单体架构，通过 API 互相调用</p><p><img src="/images/spring-cloud/infomation/api.png" alt="分布式架构"></p><h2 id="面向服务的-SOA-架构"><a href="#面向服务的-SOA-架构" class="headerlink" title="面向服务的 SOA 架构"></a>面向服务的 SOA 架构</h2><p>SOA 架构有两个主要角色：服务的提供者（provider）、服务的消费者（consumer）。阿里的 Dubbo 的 SOA 的一个典型实现</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>模块拆分，使用接口通信，降低了模块之间的耦合度</li><li>把一个大项目拆分成多个子项目，可以并行开发</li><li>增加功能时只需要增加一个子项目，调用其他系统接口即可</li><li>可以灵活分布式部署</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>系统之间需要远程通信，增加了开发的工作量</li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>微服务架构是一种架构风格，对于大型复杂的业务系统，可以将业务功能拆分成多个相互独立的微服务，各个微服务之间是松耦合的，通过各种远程协议进行<code>同步/异步</code>通信，各个微服务可<code>单独部署</code>，<code>扩容/缩容</code>以及<code>升级/降级</code>。</p><h3 id="微服务技术选型对比"><a href="#微服务技术选型对比" class="headerlink" title="微服务技术选型对比"></a>微服务技术选型对比</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Spring Cloud</th><th style="text-align:center">Dubbo</th><th style="text-align:center">Motan</th><th style="text-align:center">MSEC</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:center">微服务完整方案</td><td style="text-align:center">服务治理框架</td><td style="text-align:center">服务治理框架</td><td style="text-align:center">服务开发运营框架</td><td style="text-align:center">略</td></tr><tr><td style="text-align:center">通信方式</td><td style="text-align:center">REST / http</td><td style="text-align:center">RPC 协议</td><td style="text-align:center">RPC / Hessian2</td><td style="text-align:center">Protocol Buffers</td><td style="text-align:center">gRPC、thrift</td></tr><tr><td style="text-align:center">服务发现 / 注册</td><td style="text-align:center">Eureka（AP）</td><td style="text-align:center">ZK、Nacos</td><td style="text-align:center">ZK / Consul</td><td style="text-align:center">只有服务发现</td><td style="text-align:center">Etcd</td></tr><tr><td style="text-align:center">负载均衡</td><td style="text-align:center">Ribbon</td><td style="text-align:center">客户端负载</td><td style="text-align:center">客户端负载</td><td style="text-align:center">客户端负载</td><td style="text-align:center">Ngnix + Lua</td></tr><tr><td style="text-align:center">容错机制</td><td style="text-align:center">6 种</td><td style="text-align:center">6 种</td><td style="text-align:center">2 种</td><td style="text-align:center">自动容错</td><td style="text-align:center">keepalived、heartbeat</td></tr><tr><td style="text-align:center">熔断机制</td><td style="text-align:center">Hystrix</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">过载保护</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">配置中心</td><td style="text-align:center">Spring Cloud Config</td><td style="text-align:center">Nacos</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">Apollo、Nacos</td></tr><tr><td style="text-align:center">网关</td><td style="text-align:center">Zuul、Gateway</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">Kong、自研</td></tr><tr><td style="text-align:center">服务监控</td><td style="text-align:center">Hystrix + Turbine</td><td style="text-align:center">Dubbo + Monitor</td><td style="text-align:center">无</td><td style="text-align:center">Monitor</td><td style="text-align:center">ELK</td></tr><tr><td style="text-align:center">链路监控</td><td style="text-align:center">Sleuth + Zipkik</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">Pinpoint</td></tr><tr><td style="text-align:center">多语言</td><td style="text-align:center">REST 支持多语言</td><td style="text-align:center">Java</td><td style="text-align:center">Java</td><td style="text-align:center">Java、C++、PHP</td><td style="text-align:center">Java、PHP、Node.js</td></tr><tr><td style="text-align:center">社区活跃度</td><td style="text-align:center">高（Spring）</td><td style="text-align:center">高（阿里）</td><td style="text-align:center">一般</td><td style="text-align:center">未知</td><td style="text-align:center">略</td></tr></tbody></table><h2 id="基于-Spring-Cloud-的微服务解决方案"><a href="#基于-Spring-Cloud-的微服务解决方案" class="headerlink" title="基于 Spring Cloud 的微服务解决方案"></a>基于 Spring Cloud 的微服务解决方案</h2><!--     markdown 语法不能合并单元格，只能用 table    但是 markdown 不支持 <table>标签，会多出很多 <br>，解决办法：将整个 table 整合到一行 --><table><thead><th style="text-align:center">组件</th><th style="text-align:center">方案1</th><th style="text-align:center">方案2</th><th style="text-align:center">方案3</th></thead><tbody><tr><td style="text-align:center">服务发现</td><td style="text-align:center">Eureka</td><td style="text-align:center">Consul</td><td style="text-align:center">etcd、Nacos</td></tr><tr><td style="text-align:center">共用组件</td><td style="text-align:center" colspan="3">服务调用：Feign、负载均衡：Ribbon、熔断器：Hystrix</td></tr><tr><td style="text-align:center">网关</td><td style="text-align:center" colspan="2">Zuul：性能低，SpringCloud Gateway：性能高</td><td style="text-align:center">自研</td></tr><tr><td style="text-align:center">配置中心</td><td style="text-align:center" colspan="3">SpringCloud Config、携程 Apollo、阿里 Nacos</td></tr><tr><td style="text-align:center">全链路监控</td><td style="text-align:center" colspan="3">Zipkin、Pinpoint、SkyWalking（推荐）</td></tr><tr><td style="text-align:center">其他</td><td style="text-align:center" colspan="3">分布式事务、Docker、gRPC、领域驱动 Halo</td></tr></tbody></table><p>基于 Dubbo 的解决方案使用 <code>Dubbo + Nacos</code>。Nacos 是阿里开源的一个构建云原生应用的动态服务发现、配置、服务管理平台。</p><hr><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="Spring-Cloud-介绍"><a href="#Spring-Cloud-介绍" class="headerlink" title="Spring Cloud 介绍"></a>Spring Cloud 介绍</h2><p>中间件：中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。中间件位于客户机/ 服务器的操作系统之上，管理计算机资源和网络通讯。是连接两个独立应用程序或独立系统的软件。<br>常见的中间件分别是：<code>服务治理(如 RPC)</code>、<code>配置中心</code>、<code>全链路监控</code>、<code>分布式事务</code>、<code>分布式定时任务</code>、<code>消息中间件</code>、<code>API 网关</code>、<code>分布式缓存</code>、<code>数据库中间件</code>等。</p><p>Spring Cloud 像是一个中间件，基于 <code>Spring Boot</code> 开发，提供一套完整的微服务解决方案。包括<code>服务注册与发现</code>、<code>配置中心</code>、<code>全链路监控</code>、<code>API 网关</code>、<code>熔断器</code> 等选型的中立的开源组件，可以随需扩展和替换组装。</p><h2 id="Spring-Cloud-项目模块"><a href="#Spring-Cloud-项目模块" class="headerlink" title="Spring Cloud 项目模块"></a>Spring Cloud 项目模块</h2><table><thead><tr><th style="text-align:center">组件名称</th><th style="text-align:center">所属项目</th><th style="text-align:center">组件分类</th></tr></thead><tbody><tr><td style="text-align:center">Eureka</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">注册中心</td></tr><tr><td style="text-align:center">Zuul</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">第一代网关</td></tr><tr><td style="text-align:center">Sidecar</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">多语言支持</td></tr><tr><td style="text-align:center">Ribbon</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">负载均衡</td></tr><tr><td style="text-align:center">Hystrix</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">熔断器</td></tr><tr><td style="text-align:center">Turbine</td><td style="text-align:center">spring-cloud-netflix</td><td style="text-align:center">集群监控</td></tr><tr><td style="text-align:center">Feign</td><td style="text-align:center">spring-cloud-openfeign</td><td style="text-align:center">声明式的 HTTP 客户端</td></tr><tr><td style="text-align:center">Consul</td><td style="text-align:center">spring-cloud-consul</td><td style="text-align:center">注册中心</td></tr><tr><td style="text-align:center">Gateway</td><td style="text-align:center">spring-cloud-gateway</td><td style="text-align:center">第二代网关</td></tr><tr><td style="text-align:center">Sleuth</td><td style="text-align:center">spring-cloud-sleuth</td><td style="text-align:center">链路监控</td></tr><tr><td style="text-align:center">Config</td><td style="text-align:center">spring-cloud-config</td><td style="text-align:center">配置中心</td></tr><tr><td style="text-align:center">Bus</td><td style="text-align:center">spring-cloud-bus</td><td style="text-align:center">总线</td></tr><tr><td style="text-align:center">Pipeline</td><td style="text-align:center">spring-cloud-pipelines</td><td style="text-align:center">部署管道</td></tr><tr><td style="text-align:center">Dataflow</td><td style="text-align:center">spring-cloud-dataflow</td><td style="text-align:center">数据处理</td></tr><tr><td style="text-align:center">Stream</td><td style="text-align:center">spring-cloud-stream</td><td style="text-align:center">消息驱动</td></tr></tbody></table><h2 id="服务治理中间件"><a href="#服务治理中间件" class="headerlink" title="服务治理中间件"></a>服务治理中间件</h2><p>服务治理中间件包含：<code>服务注册与发现</code>、<code>服务路由</code>、<code>负载均衡</code>、<code>自我保护</code>、<code>管理机制</code>等。<br>其中，服务路由包含：<code>服务上下线</code>、<code>在线测试</code>、<code>机房就近选择</code>、<code>AB测试</code>、<code>灰度发布</code>等。<br>负载均衡包含：支持根据目标状态和目标权重进行负载均衡。<br>自我保护包含：<code>服务降级</code>、<code>优雅降级</code>、<code>流量控制</code></p><h2 id="注册中心对比"><a href="#注册中心对比" class="headerlink" title="注册中心对比"></a>注册中心对比</h2><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">Consul</th><th style="text-align:center">Zookeeper</th><th style="text-align:center">etcd</th><th style="text-align:center">Eureka</th></tr></thead><tbody><tr><td style="text-align:center">服务健康检查</td><td style="text-align:center">服务状态、内存、硬盘等</td><td style="text-align:center">(弱)长连接、keepalive</td><td style="text-align:center">连接心跳</td><td style="text-align:center">可配置支持</td></tr><tr><td style="text-align:center">多数据中心</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">kv 存储服务</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">一致性</td><td style="text-align:center">raft</td><td style="text-align:center">paxos</td><td style="text-align:center">raft</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">CAP</td><td style="text-align:center">CA</td><td style="text-align:center">CP</td><td style="text-align:center">CP</td><td style="text-align:center">AP</td></tr><tr><td style="text-align:center">多语言支持</td><td style="text-align:center">https、dns</td><td style="text-align:center">客户端</td><td style="text-align:center">http/grpc</td><td style="text-align:center">http(sidecar)</td></tr><tr><td style="text-align:center">watch支持</td><td style="text-align:center">全量/支持long polling</td><td style="text-align:center">支持</td><td style="text-align:center">支持long polling</td><td style="text-align:center">支持 long polling/大部分增量</td></tr><tr><td style="text-align:center">自身健康</td><td style="text-align:center">metrics</td><td style="text-align:center">-</td><td style="text-align:center">metrics</td><td style="text-align:center">metrics</td></tr><tr><td style="text-align:center">安全</td><td style="text-align:center">acl/https</td><td style="text-align:center">acl</td><td style="text-align:center">https支持(弱)</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Spring Cloud 集成</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr></tbody></table><h2 id="Spring-Cloud-配置中心功能需求"><a href="#Spring-Cloud-配置中心功能需求" class="headerlink" title="Spring Cloud 配置中心功能需求"></a>Spring Cloud 配置中心功能需求</h2><p>场景支持：</p><blockquote><p>面向全公司，充分考虑各部门需求，支持不同语言接入，充分考虑兼容性</p></blockquote><p>运维集成：</p><blockquote><p>统一数据源<br>标准化运维流程</p></blockquote><p>权限管理：</p><blockquote><p>接入权限、审核权限、下发权限…</p></blockquote><h2 id="Spring-Cloud-API-网关"><a href="#Spring-Cloud-API-网关" class="headerlink" title="Spring Cloud API 网关"></a>Spring Cloud API 网关</h2><p>API 网关是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，可以理解为应用的防火墙，主要起<code>隔离外部访问与内部系统</code>的作用。主要为了解决<code>访问认证</code>、<code>报文转发</code>、<code>访问统计</code>等问题。</p><p>API 网关需要提供的功能：</p><blockquote><p>统一接入功能：为各种服务提供统一接入服务，提供三高(高可用、高并发、高可靠)的网关服务，还需要支持负载均衡、容灾切换、异地多活<br>协议适配：对外提供 HTTP、HTTPS 访问，对内提供各种协议，如：HTTP、HTTPS、RPC、REST 等<br>流量监控：当大流量请求时，进行<code>流量监控</code>、<code>流量挑拨</code>；当后端出现异常时，需要进行<code>服务熔断</code>、<code>服务降级</code>；在异地多活中，需要进行<code>流量分片</code>等。<br>网关防护：所有请求进行安全过滤，对 IP 黑名单、URL 黑名单封禁、风控防刷、防恶意攻击等。</p></blockquote><p>Zuul、Gateway 的比较<br>||Zuul|Gateway|<br>|:-:|:-:|:-:|<br>|实现难度|低|高|<br>|底层|http、https、rest|Netty|<br>|灰度、降级、标签路由、限流、WAF封禁|需要自定义 Filter|配置|<br>|安全、监控/埋点|自定义 Intercepter|自定义配置|</p><h2 id="Spring-Cloud-全链路监控"><a href="#Spring-Cloud-全链路监控" class="headerlink" title="Spring Cloud 全链路监控"></a>Spring Cloud 全链路监控</h2><p>全链路监控需要包含的功能：</p><blockquote><p>定位慢调用：慢 web 服务、慢 rest/rpc 服务、慢 SQL<br>定位错误：4XX、5XX、Service Error<br>定位异常：Error Exception、Fatal Exception<br>展现依赖和拓扑：域拓扑、服务拓扑、trace 拓扑<br>trace 调用链：将端到端的调用以及附加的上下文信息、异常日志信息、每个调用点的耗时都进行展示<br>应用警告：根据设置的警告规则，扫描指标数据，并进行信息上报</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用是可以独立运行的程序代码，提供相对完善的业务功能。&lt;br&gt;架构分为：业务架构、应用架构、技术架构。业务架构决定应用架构，技术架构支撑应用架构。&lt;br&gt;架构的发展历程：&lt;code&gt;单体架构 --&amp;gt; 分布式架构 --&amp;gt; SOA 架构 --&amp;gt; 微服务架构&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务（1）                  &lt;BR/&gt; 思维导图</title>
    <link href="https://www.laiyy.top/java/2019/01-16/spring-cloud-1.html"/>
    <id>https://www.laiyy.top/java/2019/01-16/spring-cloud-1.html</id>
    <published>2019-01-16T03:35:53.000Z</published>
    <updated>2019-01-16T03:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud 微服务系列脑图：<a href="https://www.processon.com/view/link/5c3ec3cce4b0641c83ddee05" target="_blank" rel="noopener">点此查看</a></p><a id="more"></a><p><img src="/images/spring-cloud/spring-cloud.png" alt="Spring Cloud 微服务脑图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud 微服务系列脑图：&lt;a href=&quot;https://www.processon.com/view/link/5c3ec3cce4b0641c83ddee05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点此查看&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="https://www.laiyy.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch 学习（8） &lt;br /&gt;  JobLauncher、JobOperator、事务处理</title>
    <link href="https://www.laiyy.top/java/2018/12-24/spring-batch-study-8.html"/>
    <id>https://www.laiyy.top/java/2018/12-24/spring-batch-study-8.html</id>
    <published>2018-12-24T06:15:11.000Z</published>
    <updated>2018-12-24T06:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在是所有实例，都是在 SpringBoot 中，在启动项目的同时，进行任务、步骤的构建，任务的启动。但是有时需要在一个 Controoler、或者一个 Scheduler 中进行任务的调度，这时使用现在的方式就不合适了。</p><a id="more"></a><h1 id="在-SpringBoot-中禁用-batch-自启动"><a href="#在-SpringBoot-中禁用-batch-自启动" class="headerlink" title="在 SpringBoot 中禁用 batch 自启动"></a>在 SpringBoot 中禁用 batch 自启动</h1><p>在 application.yml 文件中，将 <code>spring.batch.job.enabked</code> 设置为 false，即可禁用自启动 SpringBatch，但是任务仍然会构造，只是不会自动执行。</p><hr><h1 id="JobLauncher"><a href="#JobLauncher" class="headerlink" title="JobLauncher"></a>JobLauncher</h1><p><code>JobLaunch</code> 是手动启动 SpringBatch 任务的启动类。需要参数：任务实例、任务执行中的参数<code>(JobParameters)</code></p><h2 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h2><p>在需要启动任务的地方，如：Controoler 中注入 JobLauncher，构建 JobParameters，启动指定的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/job/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jobRun1</span><span class="params">(@PathVariable String msg)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 构建 JobParameters</span></span><br><span class="line">        JobParameters jobParameters = <span class="keyword">new</span> JobParametersBuilder()</span><br><span class="line">                .addString(<span class="string">"msg"</span>, msg)</span><br><span class="line">                .toJobParameters();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动任务，并把参数传给任务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jobLauncher.run(jobLauncherDemoJob, jobParameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"job success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的点：</p><blockquote><ol><li>构建的 JobParameters 会在调用 jobLauncher.run 时，实例化到数据库中，如果执行过一次之后，再次执行需要保证参数不一样，否则会任务该任务已经执行过，不能再次执行。</li><li>如果有多个 Job，需要使用 @Qualifier 指定要注入的 Job</li><li>这种方式启动任务，任务的运行是 <strong>同步</strong> 的，不是异步的。</li></ol></blockquote><h2 id="异步-JobLauncher："><a href="#异步-JobLauncher：" class="headerlink" title="异步 JobLauncher："></a>异步 JobLauncher：</h2><p>异步的 JobLauncher 需要手动设置线程池、任务执行的 repository 持久化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JobRepository jobRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobLauncher <span class="title">jobLauncher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SimpleJobLauncher jobLauncher = <span class="keyword">new</span> SimpleJobLauncher();</span><br><span class="line">    <span class="comment">// jobRepository 需要注入</span></span><br><span class="line">    jobLauncher.setJobRepository(jobRepository);</span><br><span class="line">    <span class="comment">// 使用 Spring 线程池，可以自定义</span></span><br><span class="line">    jobLauncher.setTaskExecutor(<span class="keyword">new</span> SimpleAsyncTaskExecutor());</span><br><span class="line">    <span class="keyword">return</span> jobLauncher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义线程池：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">    executor.setCorePoolSize(<span class="number">20</span>);</span><br><span class="line">    executor.setMaxPoolSize(<span class="number">100</span>);</span><br><span class="line">    executor.setQueueCapacity(<span class="number">150</span>);</span><br><span class="line">    executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">    executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">"batch-"</span>);</span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> DiscardOldestPolicy());</span><br><span class="line">    executor.initialize();</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="JobOperator"><a href="#JobOperator" class="headerlink" title="JobOperator"></a>JobOperator</h1><p>JobOperator 可以任务是对 JobLauncher 的再次封装，所有在 JobOperator 中需要注入 JobLauncher</p><h2 id="构建-JobOperator"><a href="#构建-JobOperator" class="headerlink" title="构建 JobOperator"></a>构建 JobOperator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JobRepository jobRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JobExplorer jobExplorer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JobRegistry jobRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JobOperator <span class="title">jobOperator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SimpleJobOperator jobOperator = <span class="keyword">new</span> SimpleJobOperator();</span><br><span class="line">    <span class="comment">// 注入 JobLauncher</span></span><br><span class="line">    jobOperator.setJobLauncher(jobLauncher);</span><br><span class="line">    <span class="comment">// 设置参数转换器</span></span><br><span class="line">    jobOperator.setJobParametersConverter(<span class="keyword">new</span> DefaultJobParametersConverter());</span><br><span class="line">    <span class="comment">// 注入 jobRepository 持久化</span></span><br><span class="line">    jobOperator.setJobRepository(jobRepository);</span><br><span class="line">    <span class="comment">// 注入 任务注册器</span></span><br><span class="line">    jobOperator.setJobRegistry(jobRegistry);</span><br><span class="line">    <span class="comment">// 注入任务探测器</span></span><br><span class="line">    jobOperator.setJobExplorer(jobExplorer);</span><br><span class="line">    <span class="keyword">return</span> jobOperator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建-jobRegistry-Processor"><a href="#构建-jobRegistry-Processor" class="headerlink" title="构建 jobRegistry Processor"></a>构建 jobRegistry Processor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobOperatorConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobRegistryBeanPostProcessor <span class="title">jobRegistry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JobRegistryBeanPostProcessor processor = <span class="keyword">new</span> JobRegistryBeanPostProcessor();</span><br><span class="line">        processor.setJobRegistry(jobRegistry);</span><br><span class="line">        processor.setBeanFactory(applicationContext.getAutowireCapableBeanFactory());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processor.afterPropertiesSet();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> processor;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jobOperator.start(<span class="string">"jobName"</span>, <span class="string">"msg="</span>+msg);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchJobException | JobInstanceAlreadyExistsException | JobParametersInvalidException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JobLauncher-与-JobOperator-的比较"><a href="#JobLauncher-与-JobOperator-的比较" class="headerlink" title="JobLauncher 与 JobOperator 的比较"></a>JobLauncher 与 JobOperator 的比较</h2><blockquote><p>执行方法： JobLauncher 使用 run 方法执行，JobOperator 使用 start 方法执行<br>任务注入： JobLauncher 使用 Job 实例注入，JobOperator 使用任务名称注入<br>参数传递： JobLauncher 使用 JobParameters 传递，JobOperator 使用字符串传递、且参数传递方式为 key1=value1&amp;key2=value2…<br>参数转换： JobLauncher 不需要转换，JobOperator 需要设置参数转换器才能转换为 JobParameters</p></blockquote><hr><h1 id="事务处理-–-重中之重"><a href="#事务处理-–-重中之重" class="headerlink" title="事务处理 – 重中之重"></a>事务处理 – 重中之重</h1><p>在一些批处理任务重，可能会需要用到数据库。如果用到了数据库的读、写操作，就一定会牵扯到事务问题。</p><h2 id="在-SpringBoot-中的事务处理"><a href="#在-SpringBoot-中的事务处理" class="headerlink" title="在 SpringBoot 中的事务处理"></a>在 SpringBoot 中的事务处理</h2><p>在构建 Job 时，需要显式注入需要使用的事务处理器，并传入 Step。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Job <span class="title">jobDemo</span><span class="params">(PlatformTransactionManager transactionManager)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"jobDemo"</span>)</span><br><span class="line">            .start(steoDemo(transactionManager))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">steoDemo</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"steoDemo"</span>)</span><br><span class="line">            .transactionManager(transactionManager)</span><br><span class="line">            .tasklet(<span class="keyword">new</span> Tasklet() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> RepeatStatus <span class="title">execute</span><span class="params">(StepContribution stepContribution, ChunkContext chunkContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"childJobStep1"</span>);</span><br><span class="line">                    <span class="keyword">return</span> RepeatStatus.FINISHED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是使用 SpringBatch 的自带事务处理器进行事务处理，但是在一些集成了 Hibernate、MyBatis 的系统中，需要用到 Hibernate、MyBatis 的事务处理器。如果此时，使用的是 SpringBoot 项目，且事务处理器没有自定义的话，是没有用问题的。<br>如果是使用的 SpringMVC 进行任务调用，且自定义了事务处理器，这时可能出现问题。</p><h2 id="在-SpringMVC-自定义事务处理器的问题"><a href="#在-SpringMVC-自定义事务处理器的问题" class="headerlink" title="在 SpringMVC 自定义事务处理器的问题"></a>在 SpringMVC 自定义事务处理器的问题</h2><p>自定义事务处理器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txAdvice"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 拦截器方式配置事物  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"transactionAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"edit*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"repair*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>  <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在批处理任务中，没有显示注入事务处理器，此时在执行批处理时，会有如下问题：</p><h3 id="控制台错误打印"><a href="#控制台错误打印" class="headerlink" title="控制台错误打印"></a>控制台错误打印</h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">2018-12-24 15:05:11.809 WARN [NettyClientWorkerThread_1][NettyRemotingAbstract.java:258] - RemotingCommand [code=17, language=JAVA, version=252, opaque=10, flag(B)=1, remark=No topic route info in name server for the topic: TBW102</span><br><span class="line">See http://rocketmq.apache.org/docs/faq/ for further details., extFields=null, serializeTypeCurrentRPC=JSON]</span><br><span class="line">2018-12-24 15:05:11.811 ERROR [SimpleAsyncTaskExecutor-2][AbstractStep.java:229] - Encountered an error executing step firstStepOfFindSite in job batchGenerateChannelJob</span><br><span class="line">org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@76ce6385] for key [&#123;</span><br><span class="line">CreateTime:"2018-12-24 15:01:21",</span><br><span class="line">ActiveCount:2,</span><br><span class="line">PoolingCount:18,</span><br><span class="line">CreateCount:20,</span><br><span class="line">DestroyCount:0,</span><br><span class="line">CloseCount:30,</span><br><span class="line">ConnectCount:32,</span><br><span class="line">Connections:[</span><br><span class="line">&#123;ID:428371115, ConnectTime:"2018-12-24 15:01:21", UseCount:0, LastActiveTime:"2018-12-24 15:01:21"&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;ID:1832136599, ConnectTime:"2018-12-24 15:01:22", UseCount:0, LastActiveTime:"2018-12-24 15:01:22"&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">ID:428371115, </span><br><span class="line">poolStatements:[</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">ID:1832136599, </span><br><span class="line">poolStatements:[</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]] bound to thread [SimpleAsyncTaskExecutor-2]</span><br><span class="line">at org.springframework.orm.hibernate5.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:542) ~[spring-orm-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:377) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:461) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:277) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at com.alibaba.druid.support.spring.stat.DruidStatInterceptor.invoke(DruidStatInterceptor.java:72) ~[druid-1.1.6.jar:1.1.6]</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at com.sun.proxy.$Proxy79.getOne(Unknown Source) ~[?:?]</span><br><span class="line">at com.dahe.wang.batch.BatchGenerateConfig$2.execute(BatchGenerateConfig.java:195) ~[classes/:?]</span><br><span class="line">at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406) ~[spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330) ~[spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:272) ~[spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:81) ~[spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:374) ~[spring-batch-infrastructure-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215) ~[spring-batch-infrastructure-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144) ~[spring-batch-infrastructure-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257) ~[spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:200) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:392) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:135) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:306) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:135) [spring-batch-core-3.0.9.RELEASE.jar:3.0.9.RELEASE]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) [?:1.8.0_171]</span><br><span class="line">Caused by: java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@76ce6385] for key [&#123;</span><br><span class="line">CreateTime:"2018-12-24 15:01:21",</span><br><span class="line">ActiveCount:2,</span><br><span class="line">PoolingCount:18,</span><br><span class="line">CreateCount:20,</span><br><span class="line">DestroyCount:0,</span><br><span class="line">CloseCount:30,</span><br><span class="line">ConnectCount:32,</span><br><span class="line">Connections:[</span><br><span class="line">&#123;ID:428371115, ConnectTime:"2018-12-24 15:01:21", UseCount:0, LastActiveTime:"2018-12-24 15:01:21"&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;ID:1832136599, ConnectTime:"2018-12-24 15:01:22", UseCount:0, LastActiveTime:"2018-12-24 15:01:22"&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">ID:428371115, </span><br><span class="line">poolStatements:[</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">ID:1832136599, </span><br><span class="line">poolStatements:[</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]] bound to thread [SimpleAsyncTaskExecutor-2]</span><br><span class="line">at org.springframework.transaction.support.TransactionSynchronizationManager.bindResource(TransactionSynchronizationManager.java:190) ~[spring-tx-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">at org.springframework.orm.hibernate5.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:516) ~[spring-orm-4.3.18.RELEASE.jar:4.3.18.RELEASE]</span><br><span class="line">... 26 more</span><br></pre></td></tr></table></figure><h3 id="使用-debeug，在第一个进行数据库操作的位置打断点，可以看到-debugger-下的如下错误："><a href="#使用-debeug，在第一个进行数据库操作的位置打断点，可以看到-debugger-下的如下错误：" class="headerlink" title="使用 debeug，在第一个进行数据库操作的位置打断点，可以看到 debugger 下的如下错误："></a>使用 debeug，在第一个进行数据库操作的位置打断点，可以看到 debugger 下的如下错误：</h3><p><img src="/images/spring-batch/transaction_manager.png" alt="debugger"></p><p>debugger 显示：不能创建事务。</p><p>错误原因： SpringBatch 默认使用 jdbc 的事务管理器，而没有使用自定义的 Hibernate 事务管理器。这时，在整个项目中，同时存在 Hibernate 和 Jdbc 的事务管理器，SpringBatch 无法判断使用哪个事务管理器，导致事务嵌套，从而抛出异常。</p><p>SpringBatch 会使用名为 <code>transactionManager</code> 的事务管理器，而在本例中， xml 设置的事务管理器，名为 <code>txAdvice</code>，从而导致出现多事务。</p><p>解决办法： 将声明式事务 <code>txAdvice</code> 名称修改为 <code>transactionManager</code> 即可。</p><p><strong><em> 在 Spring + SpringBatch 项目中，要严防出现事务嵌套！！！ </em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在是所有实例，都是在 SpringBoot 中，在启动项目的同时，进行任务、步骤的构建，任务的启动。但是有时需要在一个 Controoler、或者一个 Scheduler 中进行任务的调度，这时使用现在的方式就不合适了。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringBatch" scheme="https://www.laiyy.top/tags/SpringBatch/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（7）  &lt;br /&gt; 流程分支、排他网关、动态处理人</title>
    <link href="https://www.laiyy.top/java/2018/12-17/activiti-7.html"/>
    <id>https://www.laiyy.top/java/2018/12-17/activiti-7.html</id>
    <published>2018-12-17T01:52:28.000Z</published>
    <updated>2018-12-17T01:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>除了一个流程进行到底的工作流之外，还有一些有分支的工作流。如：下属在申报审批一条信息的时候，如果这条信息不算太重要，可以由经理审批；如果这条信息重要，需要由老板进行审批。</p><a id="more"></a><p><img src="/images/activiti/sequence.png" alt="分支流程"></p><p>这时，就需要有流程分支。流程分支的作用就是处理一个流程中存在多个子分支时，根据不同的子分支条件，进行不同的子分支处理。</p><hr><h1 id="在流程图连线中确定条件"><a href="#在流程图连线中确定条件" class="headerlink" title="在流程图连线中确定条件"></a>在流程图连线中确定条件</h1><p>依照上图做出一个有分支的流程，在这个流程中，处理当天信息有 2 个分支，一个是 <em>不重要</em> 的信息交给<code>经理</code>处理，而 <em>重要</em> 的分支交给<code>老板</code>处理。无论谁处理过，这个流程都结束。</p><h2 id="流程图中确定条件"><a href="#流程图中确定条件" class="headerlink" title="流程图中确定条件"></a>流程图中确定条件</h2><p>点击分支流程：<em>处理当天信息</em> —&gt; <em>经理(老板)</em> 的<code>连线</code>， 在<code>Name</code>中填入备注信息，在<code>Condition</code>中填入条件信息。需要注意：</p><blockquote><p>1、<code>Condition</code>必须为<code>布尔</code>类型；<br>2、判断条件必须作为参数在执行中传入；<br>3、尽量不使用中文</p></blockquote><p><img src="/images/activiti/condition.png" alt="分支条件"></p><p><code>Condition</code>：满足这个条件的时候，走这一步流程。即：满足 <code>${message==&#39;no&#39;}</code> 走<em>经理</em>流程；满足<code>${message==&#39;yes&#39;}</code>走<em>老板</em>流程。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>流程部署、启动不再示例。直接从流程分支开始。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String taskId = <span class="string">"85005"</span>;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"message"</span>, <span class="string">"yes"</span>);</span><br><span class="line">processEngine.getTaskService().complete(taskId, params);</span><br><span class="line">System.out.println(<span class="string">"执行“老板”分支，执行完毕"</span>);</span><br></pre></td></tr></table></figure></p><p>在执行任务时，直接传入 <code>message</code>，需要保证 <code>message</code> 与 <code>Condition</code> 一致。<br>如果在传入<code>message</code>时，指定的值与<code>Contidition</code>不一致，在本例中即<code>message</code>传入值不是 yes/no，这时在执行时，由于判断条件错误，会导致后台报错，但流程不会进行。</p><p>错误信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: No outgoing sequence flow of element <span class="string">'_4'</span> could be selected <span class="keyword">for</span> continuing the process</span><br><span class="line">at org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation.leaveFlowNode(TakeOutgoingSequenceFlowsOperation.java:<span class="number">172</span>)</span><br><span class="line">at org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation.handleFlowNode(TakeOutgoingSequenceFlowsOperation.java:<span class="number">87</span>)</span><br><span class="line">at org.activiti.engine.impl.agenda.TakeOutgoingSequenceFlowsOperation.run(TakeOutgoingSequenceFlowsOperation.java:<span class="number">75</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperation(CommandInvoker.java:<span class="number">73</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.CommandInvoker.executeOperations(CommandInvoker.java:<span class="number">57</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.CommandInvoker.execute(CommandInvoker.java:<span class="number">42</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.TransactionContextInterceptor.execute(TransactionContextInterceptor.java:<span class="number">48</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.CommandContextInterceptor.execute(CommandContextInterceptor.java:<span class="number">63</span>)</span><br><span class="line">at org.activiti.engine.impl.interceptor.LogInterceptor.execute(LogInterceptor.java:<span class="number">29</span>)</span><br><span class="line">at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:<span class="number">44</span>)</span><br><span class="line">at org.activiti.engine.impl.cfg.CommandExecutorImpl.execute(CommandExecutorImpl.java:<span class="number">39</span>)</span><br><span class="line">at org.activiti.engine.impl.TaskServiceImpl.complete(TaskServiceImpl.java:<span class="number">186</span>)</span><br><span class="line">at com.laiyy.activiti.config.SequenceFlow.sequenceFlowStart(SequenceFlow.java:<span class="number">40</span>)</span><br></pre></td></tr></table></figure></p><p><code>_4</code> 是执行这个任务的流程id，bpmn 文件中指定的<code>处理当天信息</code>这个步骤的 id。即在执行流程分支时，由于判断条件出错，导致流程不能往下执行。</p><hr><h1 id="排他网关"><a href="#排他网关" class="headerlink" title="排他网关"></a>排他网关</h1><p>排他网关主要用于在一个流程中，存在多个分支流程，但是无默认分支的情况。可以解决上面例子中出现的<code>Condition</code>不匹配的问题。在不能匹配<code>Condition</code>时进入默认流程分支。</p><p>如在银行办理业务时，有 <em>普通窗口</em>、<em>VIP窗口</em> 和银行的 <em>后台窗口</em>，在申请办理业务人为后台用户时，走 <em>后台窗口</em>，为 VIP 用户时，走 <em>VIP窗口</em>，其余默认走 <em>普通窗口</em>。<br>与上例中的 <em>经理/老板</em> 流程不同的是，在 <em>普通窗口</em> 的流程中，是没有判断条件的。这是一个简单的排他网关。</p><p><img src="/images/activiti/exclusive_gateway.png" alt="排他网关"></p><p>此时按照上例中的代码继续执行时，会发现，如果 visitor 满足 3，则进入<code>后台窗口</code>，满足 2 则进入 <code>vip窗口</code>，否则都进入<code>普通窗口</code></p><h1 id="动态指定处理人"><a href="#动态指定处理人" class="headerlink" title="动态指定处理人"></a>动态指定处理人</h1><p>可以使用类似于<code>el表达式</code>的方式：$userId，设置一个变量，在处理过程中动态的给这个变量赋值，即可实现动态指定。</p><p><img src="/images/activiti/assignee.png" alt="动态指定处理人"></p><h2 id="设置处理人"><a href="#设置处理人" class="headerlink" title="设置处理人"></a>设置处理人</h2><p>在进行流程处理时，设置下一步执行人<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; params =~ <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"userId"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">ProcessInstance processInstance = processEngine.getRuntimeService()</span><br><span class="line">                    .startProcessInstanceByKey(processDefikey, params);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结束后，根据处理人查看任务信息</span></span><br><span class="line">String user = <span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="comment">// 获取任务服务</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">// 创建任务查询对象</span></span><br><span class="line">TaskQuery taskQuery = taskService.createTaskQuery();</span><br><span class="line"><span class="comment">// 指定办理人，获取办理人的任务列表</span></span><br><span class="line">List&lt;Task&gt; list = taskQuery.taskAssignee(user).list();</span><br><span class="line"><span class="comment">// 连理任务列表</span></span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line"><span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">    System.out.println(<span class="string">"任务办理人："</span> + task.getAssignee() + <span class="string">" --&gt; 任务id："</span> + task.getId() + <span class="string">" --&gt; 任务名称："</span> + task.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了一个流程进行到底的工作流之外，还有一些有分支的工作流。如：下属在申报审批一条信息的时候，如果这条信息不算太重要，可以由经理审批；如果这条信息重要，需要由老板进行审批。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（6）  &lt;br /&gt; 历史流程、流程变量</title>
    <link href="https://www.laiyy.top/java/2018/12-14/activiti-6.html"/>
    <id>https://www.laiyy.top/java/2018/12-14/activiti-6.html</id>
    <published>2018-12-14T03:45:06.000Z</published>
    <updated>2018-12-14T03:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Activiti 不仅仅能执行流程、获取到当前流程的信息，也可以获取到已经执行过的流程信息、任务信息。<br>历史任务：流程执行的每一步都是一个任务，历史任务列表是所有流程的每一步执行情况。<br><a id="more"></a><br>需要用到的表：act_hi_taskinst、act_hi_procinst</p><hr><h1 id="查询历史流程"><a href="#查询历史流程" class="headerlink" title="查询历史流程"></a>查询历史流程</h1><blockquote><p>查看历史执行实例：</p></blockquote><p>代码示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">List&lt;HistoricProcessInstance&gt; list = historyService.createHistoricProcessInstanceQuery().list();</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">    list.forEach(item -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"流程实例id"</span> + item.getId());</span><br><span class="line">        System.out.println(<span class="string">"流程实例定义id"</span> + item.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">"流程开始时间"</span> + item.getStartTime());</span><br><span class="line">        System.out.println(<span class="string">"流程结束时间"</span> + item.getEndTime());</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>查看历史任务（每一步）</p></blockquote><p>代码实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">List&lt;HistoricTaskInstance&gt; list = historyService.createHistoricTaskInstanceQuery().list();</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">    list.forEach(item -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"历史流程实例id："</span> + item.getId());</span><br><span class="line">        System.out.println(<span class="string">"历史流程定义id："</span> + item.getTaskDefinitionKey());</span><br><span class="line">        System.out.println(<span class="string">"任务名称："</span> + item.getName());</span><br><span class="line">        System.out.println(<span class="string">"处理人："</span> + item.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">"================"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="流程变量"><a href="#流程变量" class="headerlink" title="流程变量"></a>流程变量</h1><p>如：在支付流程中，<em>支付</em> —&gt; <em>填写金额</em> —&gt; <em>确认/取消</em>，在<em>确认/取消</em>时，需要查看到当前支付金额，这个金额就是在支付流程中的变量。</p><p>流程变量设计到的表：<br>1、act_ru_variable：正在执行的流程变量表<br>2、act_hi_varinst：流程变量历史表</p><h2 id="设置流程变量值"><a href="#设置流程变量值" class="headerlink" title="设置流程变量值"></a>设置流程变量值</h2><p>可以设置普通的 POJO，但是需要实现序列化接口</p><h3 id="通过-taskService-设置变量"><a href="#通过-taskService-设置变量" class="headerlink" title="通过 taskService 设置变量"></a>通过 taskService 设置变量</h3><blockquote><p>通过 setVariable 设置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过 set 设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// taskId 任务id，范围比 runtime 小</span></span><br><span class="line"><span class="comment">// variableName 变量名</span></span><br><span class="line"><span class="comment">// value 变量值</span></span><br><span class="line">taskService.setVariable(taskId, variableName, value);</span><br><span class="line"><span class="comment">// 设置本执行对象的变量，该对象的作用域只在当前的执行对象</span></span><br><span class="line">taskService.setVariableLocal(taskId, variableName, value);</span><br><span class="line"><span class="comment">// 设置多个变量，values： Map&lt;String, Object&gt;</span></span><br><span class="line">taskService.setVariables(taskId, values);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 完成任务时设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">taskService.complete(taskId, values [, localScope])</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="通过-runtimeService-设置"><a href="#通过-runtimeService-设置" class="headerlink" title="通过 runtimeService 设置"></a>通过 runtimeService 设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 通过 set 设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// executionId 执行对象id</span></span><br><span class="line"><span class="comment">// variableName 变量名</span></span><br><span class="line"><span class="comment">// value 变量值</span></span><br><span class="line">runtimeService.setVariable(executionId, variableName, value);</span><br><span class="line"><span class="comment">// 设置本执行对象的变量，该对象的作用域只在当前的执行对象</span></span><br><span class="line">runtimeService.setVariableLocal(executionId, variableName, value);</span><br><span class="line"><span class="comment">// 设置多个变量，values： Map&lt;String, Object&gt;</span></span><br><span class="line">runtimeService.setVariables(executionId, values);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 启动时设置</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// processKey 任务 key， values Map&lt;String, Object&gt;</span></span><br><span class="line">runtimeService.startProcessInstanceByKey(processKey, values)</span><br></pre></td></tr></table></figure><h2 id="获取流程变量"><a href="#获取流程变量" class="headerlink" title="获取流程变量"></a>获取流程变量</h2><h3 id="使用-taskService-获取流程变量"><a href="#使用-taskService-获取流程变量" class="headerlink" title="使用 taskService 获取流程变量"></a>使用 taskService 获取流程变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtimeService.getVariable(executionId, key) 去单个变量</span><br><span class="line">runtimeService.getVariableLocal(executionId, key) 取本执行对象的单个变量</span><br><span class="line">runtimeService.getVariables(executionId) <span class="comment">// 取多个变量</span></span><br></pre></td></tr></table></figure><h3 id="使用-runtimeService-获取流程变量"><a href="#使用-runtimeService-获取流程变量" class="headerlink" title="使用 runtimeService 获取流程变量"></a>使用 runtimeService 获取流程变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">taskService.getVariable(taskId, key)</span><br><span class="line">taskService.getVariableLocal(taskId, key)</span><br><span class="line">taskService.getVariables(taskId)</span><br></pre></td></tr></table></figure><h2 id="变量支持的类型"><a href="#变量支持的类型" class="headerlink" title="变量支持的类型"></a>变量支持的类型</h2><blockquote><p>简单类型</p></blockquote><p>String、boolean、Integer、double、Date 等</p><blockquote><p>自定义对象</p></blockquote><p>自定义的 POJO</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Activiti 不仅仅能执行流程、获取到当前流程的信息，也可以获取到已经执行过的流程信息、任务信息。&lt;br&gt;历史任务：流程执行的每一步都是一个任务，历史任务列表是所有流程的每一步执行情况。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（5）  &lt;br /&gt; 流程定义</title>
    <link href="https://www.laiyy.top/java/2018/12-07/activiti-5.html"/>
    <id>https://www.laiyy.top/java/2018/12-07/activiti-5.html</id>
    <published>2018-12-07T02:06:01.000Z</published>
    <updated>2018-12-07T02:06:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上两篇博文中，已经介绍了如何创建、启动、完成一个流程，以及在流程运转过程中的一些注意点和需要用到的表结构的分析。那么，一个流程定义该如何管理？比如流程删除、流程中变量的使用、指定任务处理人等操作该如何操作？</p><a id="more"></a><p><strong>流程定义管理涉及对象、表</strong></p><p>流程定义中涉及到的对象主要是 <code>ProcessEngine</code>、<code>RepositoryService</code>、<code>Deployment</code>、<code>ProcessDefinition</code>，即：<code>Activiti</code> 核心类和仓库服务。<br><code>ProcessDefinition</code>：解析 .bpmn 文件后得到的流程定义规则信息，工作流就是按照流程定义的规则执行的。<br><code>Deployment</code>：部署对象，一次部署多个文件的信息。对于不需要的流程可以删除和修改。<br>涉及到的表结构主要有：</p><ul><li>act_re_deployment：部署对象表</li><li>act_re_procdef：流程定义表</li><li>act_ge_bytearray：资源文件表</li><li>act_ge_property：主键生成策略表</li></ul><h1 id="查询流程、资源"><a href="#查询流程、资源" class="headerlink" title="查询流程、资源"></a>查询流程、资源</h1><h2 id="新建一个采购审批流程，如图："><a href="#新建一个采购审批流程，如图：" class="headerlink" title="新建一个采购审批流程，如图："></a>新建一个采购审批流程，如图：</h2><p><img src="/images/activiti/bpmn.png" alt="采购审批流程"></p><h2 id="以-Zip-形式上传并自解压"><a href="#以-Zip-形式上传并自解压" class="headerlink" title="以 Zip 形式上传并自解压"></a>以 Zip 形式上传并自解压</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = getClass().getClassLoader().getResourceAsStream(<span class="string">"BuyBill.zip"</span>);</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">Deployment deploy = repositoryService.createDeployment()</span><br><span class="line">        .name(<span class="string">"采购流程"</span>)</span><br><span class="line">        <span class="comment">// 以 zip 形式上传 bpmn 文件</span></span><br><span class="line">        .addZipInputStream(<span class="keyword">new</span> ZipInputStream(inputStream))</span><br><span class="line">        .deploy();</span><br><span class="line">System.out.println(deploy.getId() + <span class="string">" --&gt; "</span> + deploy.getName());</span><br></pre></td></tr></table></figure><h2 id="查看流程定义信息"><a href="#查看流程定义信息" class="headerlink" title="查看流程定义信息"></a>查看流程定义信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看流程定义</span></span><br><span class="line">ProcessDefinitionQuery query = processEngine.getRepositoryService().createProcessDefinitionQuery();</span><br><span class="line"><span class="comment">// 查询（类比 SQL 的 where 条件）</span></span><br><span class="line"><span class="comment">// 流程定义的id，myProcess_1:2:22503，组成方式： key + 版本 + 自动生成的id</span></span><br><span class="line"><span class="comment">//        query = query.processDefinitionId("myProcess_1:2:22503");</span></span><br><span class="line"><span class="comment">// 流程定义的 key，有 bpmn 文件的 key 决定</span></span><br><span class="line">query.processDefinitionKey(<span class="string">"myProcess_1"</span>);</span><br><span class="line"><span class="comment">// 流程定义名称</span></span><br><span class="line"><span class="comment">//        query.processDefinitionName("");</span></span><br><span class="line"><span class="comment">// 流程定义版本</span></span><br><span class="line"><span class="comment">//        query.processDefinitionVersion(1);</span></span><br><span class="line"><span class="comment">// 最新版本</span></span><br><span class="line"><span class="comment">//        query.latestVersion();</span></span><br><span class="line"><span class="comment">// 版本降序排序</span></span><br><span class="line">List&lt;ProcessDefinition&gt; list = query.orderByProcessDefinitionVersion().desc()</span><br><span class="line">        <span class="comment">// 总数</span></span><br><span class="line"><span class="comment">//                .count()</span></span><br><span class="line">        <span class="comment">// 列表</span></span><br><span class="line">        .list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">    list.forEach( temp -&gt; System.out.println(<span class="string">"流程定义id："</span> + temp.getId() + <span class="string">" ---&gt; 流程定义key："</span> + temp.getKey() + <span class="string">" ---&gt; 流程版本："</span> + temp.getVersion() + <span class="string">" 部署id："</span> + temp.getDeploymentId() + <span class="string">" 流程定义名称："</span> + temp.getName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询资源文件并拷贝到本地"><a href="#查询资源文件并拷贝到本地" class="headerlink" title="查询资源文件并拷贝到本地"></a>查询资源文件并拷贝到本地</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过部署资源的 deployment id 获取资源</span></span><br><span class="line">String resourceName = <span class="string">""</span>;</span><br><span class="line">String deploymentId = <span class="string">"22501"</span>;</span><br><span class="line">List&lt;String&gt; resourceNames = processEngine.getRepositoryService().getDeploymentResourceNames(deploymentId);</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(resourceNames)) &#123;</span><br><span class="line">    resourceName = resourceNames.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 读取资源，根据 deploy id 和 资源名称</span></span><br><span class="line">    InputStream inputStream = processEngine.getRepositoryService().getResourceAsStream(deploymentId, resourceName);</span><br><span class="line">    <span class="comment">// 拷贝到本地</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"d:/"</span> + resourceName);</span><br><span class="line">    FileUtils.copyInputStreamToFile(inputStream, file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="删除流程定义"><a href="#删除流程定义" class="headerlink" title="删除流程定义"></a>删除流程定义</h1><p><br></p><blockquote><p>通过部署 id 删除流程定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String deployId = <span class="string">"2501"</span>;</span><br><span class="line">processEngine.getRepositoryService().deleteDeployment(deployId);</span><br></pre></td></tr></table></figure><p>操作成功后，<code>act_re_deploy</code>、<code>act_ge_bytearray</code>、<code>act_re_procdef</code> 表中会级联删除相关数据。但是 <code>act_hi_*</code> 中保存的是历史记录，历史记录不会删除。</p><h1 id="流程实例、任务的执行"><a href="#流程实例、任务的执行" class="headerlink" title="流程实例、任务的执行"></a>流程实例、任务的执行</h1><p>主要核心类：<code>Execution</code>、<code>ProcessInstance</code>、<code>Task</code></p><blockquote><p>Execution：执行对象，按照流程定义的规则执行一次的过程。</p></blockquote><p>对应的表：</p><ul><li>act_ru_exection：正在执行的信息</li><li>act_hi_procinst：已经执行完的历史流程实例信息</li><li>act_hi_actinst：存放历史所有完成的活动</li></ul><blockquote><p>ProcessInstance：流程实例，特质流程从开始导结束的最大执行分支。一个执行的流程中，流程实例只有一个。</p></blockquote><p>需要注意：</p><ul><li>如果是单例流程，执行对象 id 就是流程实例 id</li><li>如果一个流程有分值和聚合，那么执行对象 id 和流程实例 id 就不相同</li><li>一个流程中，流程实例只有一个，执行对象可以存在多个</li></ul><blockquote><p>Task 任务：执行到某任何环节时生成的任务信息。</p></blockquote><p>对应的表：</p><ul><li>act_ru_task：正在执行的任务</li><li>act_hi_taskinst：已经执行完的历史任务信息</li></ul><h2 id="理解流程实例和执行对象"><a href="#理解流程实例和执行对象" class="headerlink" title="理解流程实例和执行对象"></a>理解流程实例和执行对象</h2><p>流程实例和执行对象是两个不通的概念，可以粗略理解为，执行对象是由流程实例创建的。在一个流程中，流程的实例只能有一个，即：一个流程就是一个实例。但是执行对象可以有多个，即：一个流程可以委派给多个执行对象去执行这个流程。</p><p>举个例子：<br>一个人执行<em>跑步</em> —&gt; <em>打球</em> —&gt; <em>回家</em> 流程，如果此时在 <em>跑步</em> 完成之后，有一个快递需要拿，拿完直接回家的话，就是一个 <em>跑步</em> —&gt; <em>拿快递</em> —&gt; <em>回家</em> 流程。<br>在这个流程里面，此人只能执行其中一个流程，但是 <em>打球</em>、<em>拿快递</em> 都在主流程：<em>跑步</em> —&gt;… —&gt; <em>回家</em> 中。但是如果在 <em>拿快递</em> 这个流程执行的时候，把这个流程交给了一个朋友去执行，自己还可以继续去打球的。<br>在这个例子里面，<em>跑步</em> —&gt; <em>打球</em>(<em>拿快递</em>) —&gt; <em>回家</em> 是一个流程实例。 执行<em>打球</em>、<em>拿快递</em> 的是执行对象。 即：一个流程只能有一个实例，但是可以交给多个对象去执行。</p><p><img src="/images/activiti/process_instance.png" alt="一个流程实例，多个执行对象"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上两篇博文中，已经介绍了如何创建、启动、完成一个流程，以及在流程运转过程中的一些注意点和需要用到的表结构的分析。那么，一个流程定义该如何管理？比如流程删除、流程中变量的使用、指定任务处理人等操作该如何操作？&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（4）  &lt;br /&gt; 启动流程</title>
    <link href="https://www.laiyy.top/java/2018/12-06/activiti-4.html"/>
    <id>https://www.laiyy.top/java/2018/12-06/activiti-4.html</id>
    <published>2018-12-06T03:25:11.000Z</published>
    <updated>2018-12-06T03:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>ProcessEngine 的几个重要的 Service</p><ul><li>RepositoryService：管理流程的定义</li><li>RuntimeService：执行管理，包括流程的启动、推进、删除流程实例等操作</li><li>TaskService：任务管理</li><li>HistoryService：历史管理（执行完的数据管理）</li><li>IdentityService：可选服务，任务表单管理</li></ul><a id="more"></a><h1 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h1><p>在上一篇末尾，已经实现了使用 RepositoryService 定义、部署一个流程。部署完成的流程需要使用 RuntimeService 来启动</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行流程 -- 执行流程属于运行，需要获取运行时服务 RuntimeService</span></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line"><span class="comment">// startProcessInstanceById 使用 act_re_procdef 中的 ID_ 字段，该字段自动生成，不便于理解</span></span><br><span class="line"><span class="comment">// startProcessInstanceByKey 使用 act_re_procdef 中的 KEY_ 字段，该字段手动执行，便于理解，但是需要格外注意不能重复</span></span><br><span class="line"><span class="comment">// 如果一个流程进行了多次修改，那么 KEY_ 和 NAME_ 必须一样，且运行时执行最后一个 VERSION_ 版本</span></span><br><span class="line"><span class="comment">// 取得流程实例</span></span><br><span class="line">ProcessInstance instance = runtimeService.startProcessInstanceByKey(<span class="string">"levelBill"</span>);</span><br><span class="line">System.out.println(<span class="string">"流程实例id："</span> + instance.getId() + <span class="string">" ---&gt; 流程定义id： "</span> + instance.getProcessDefinitionId());</span><br></pre></td></tr></table></figure><p>控制台打印结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">流程实例id：5001 ---&gt; 流程定义id： levelBill:2:2503</span><br></pre></td></tr></table></figure></p><p>查看 act_ru_execution </p><p><img src="/images/activiti/start_1.png" alt="启动任务"></p><ul><li>PROC_INST_ID_：对应 act_ge_property 中的 next.dbid 的值</li><li>PARENT_ID_：对应上一步的 act_ru_execution 的 ID_</li><li>ROOT_PROC_INST_ID_：对应运行实例的 id</li><li>ACT_ID_：对应当前流程进行到哪一步了</li><li>PROC_DEF_ID_：对应流程定义的 id(act_re_procdef 中的 ID_)</li></ul><hr><h1 id="任务查询"><a href="#任务查询" class="headerlink" title="任务查询"></a>任务查询</h1><p>在第一步启动任务后，任务流程自动进入第一步中。在本例中，相当于 请假流程已经开始，需要 zhangsan 进行审批。那么，就需要获取 zhangsan 的任务列表。</p><p>获取任务列表，顾名思义就需要<code>任务服务</code>，通过任务服务查询出任务列表</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任务办理人（第一步是zhangsan办理）</span></span><br><span class="line">String user = <span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="comment">// 获取任务服务</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">// 创建任务查询对象</span></span><br><span class="line">TaskQuery taskQuery = taskService.createTaskQuery();</span><br><span class="line"><span class="comment">// 指定办理人，获取办理人的任务列表</span></span><br><span class="line">List&lt;Task&gt; list = taskQuery.taskAssignee(user).list();</span><br><span class="line"><span class="comment">// 连理任务列表</span></span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">    <span class="keyword">for</span> (Task task : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">"任务办理人："</span> + task.getAssignee() + <span class="string">" --&gt; 任务id："</span> + task.getId() + <span class="string">" --&gt; 任务名称："</span> + task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制台中可以看到，需要张三办理的任务完整打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">任务办理人：zhangsan --&gt; 任务id：5005 --&gt; 任务名称：first</span><br><span class="line">任务办理人：zhangsan --&gt; 任务id：7505 --&gt; 任务名称：first</span><br></pre></td></tr></table></figure></p><h2 id="对照数据库"><a href="#对照数据库" class="headerlink" title="对照数据库"></a>对照数据库</h2><p>查询 act_ru_task 表，可以看到当前正在执行的流程数据</p><p><img src="/images/activiti/task.png" alt="正在运行的任务"></p><ul><li>EXECUTION_ID：流程实例的id，对应 act_ru_exection 的 ID_</li><li>PROC_DEF_ID_：流程定义的id，对应 act_re_procdef 的 ID_</li><li>TASK_DEF_KEY_：当前流程 id，对应 act_ru_exection 的 ACT_ID_</li><li>ASSIGNEE_：执行人，对应 BPMN 文件中指定的当前流程执行人</li><li>NAME_：任务名称，对应 BPMN 文件中指定的当前流程的名称</li></ul><hr><h1 id="任务完成"><a href="#任务完成" class="headerlink" title="任务完成"></a>任务完成</h1><p>完成一个任务，即结束当前步骤，进入下一个步骤（并不是完成整改流程）</p><h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完成这个任务，即：当前步骤完成，进行下一个步骤</span></span><br><span class="line">String taskId = <span class="string">"5005"</span>; <span class="comment">// 指定需要完成的任务 id</span></span><br><span class="line"><span class="comment">// 完成任务，也需要任务服务</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line"><span class="comment">// 完成任务</span></span><br><span class="line">taskService.complete(taskId);</span><br></pre></td></tr></table></figure><h2 id="对照数据库-1"><a href="#对照数据库-1" class="headerlink" title="对照数据库"></a>对照数据库</h2><p>查询 act_ru_task 表</p><p><img src="/images/activiti/task_1.png" alt="正在运行的任务"></p><p>与上面任务执行后获取到的表进行对比，可以看到，<code>ID_</code>、<code>NAME_</code>、<code>TASK_DEK_KEY_</code>、<code>ASSIGENEE_</code> 均已变更为当前步骤的数据，而上一步的数据已经自动删除。</p><blockquote><p>自动删除执行过的步骤，可以保证正在运行的任务表足够小，无冗余，可以更大程度的保证流程处理的效率</p></blockquote><h2 id="任务结束"><a href="#任务结束" class="headerlink" title="任务结束"></a>任务结束</h2><p>如果修改 taskId，运行任务完成操作，在最后一步以后，会自动完成流程。完成后的流程，在 <code>act_ru_task</code>、<code>act_ru_execution</code> 是没有记录的，因为这些流程已经完成，不是进行中的状态。这样做可以保证运行中的任务表足够小，效率足够快。</p><p>任务结束后，历史流程可以在  act_hi_* 中查看到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ProcessEngine 的几个重要的 Service&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RepositoryService：管理流程的定义&lt;/li&gt;
&lt;li&gt;RuntimeService：执行管理，包括流程的启动、推进、删除流程实例等操作&lt;/li&gt;
&lt;li&gt;TaskService：任务管理&lt;/li&gt;
&lt;li&gt;HistoryService：历史管理（执行完的数据管理）&lt;/li&gt;
&lt;li&gt;IdentityService：可选服务，任务表单管理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（3） &lt;br /&gt;  添加一个简单的工作流</title>
    <link href="https://www.laiyy.top/java/2018/12-06/activiti-3.html"/>
    <id>https://www.laiyy.top/java/2018/12-06/activiti-3.html</id>
    <published>2018-12-06T02:00:58.000Z</published>
    <updated>2018-12-06T02:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建一个简单的工作流引擎，需要准备：数据库、工作流文件（BPMN）。创建工作流的基本流程： 构建 ProcessEngineConfiguration 对象 –&gt; 设置数据库连接 –&gt; 设置数据库表创建属性 –&gt; 构建一个流程引擎。其中：ProcessEngineConfiguration 对象，是构建一个简单工作流的核心 API。<br>为了简单的示例操作，使用 Junit 创建测试用例创建即可。</p><a id="more"></a><h1 id="创建简单的工作流引擎"><a href="#创建简单的工作流引擎" class="headerlink" title="创建简单的工作流引擎"></a>创建简单的工作流引擎</h1><p>创建工作流引擎的三个方法：</p><blockquote><ul><li>使用 ProcessEngineConfiguration 硬编码配置数据库连接创建</li><li>使用 ProcessEngineConfiguration + activiti.cfg.xml 文件创建</li><li>使用 ProcessEngines 默认配置创建</li></ul></blockquote><h2 id="使用-ProcessEngineConfiguration-创建"><a href="#使用-ProcessEngineConfiguration-创建" class="headerlink" title="使用 ProcessEngineConfiguration 创建"></a>使用 ProcessEngineConfiguration 创建</h2><p>使用 ProcessEngineConfiguration 创建工作流引擎时，需要指定好数据库、库表创建策略等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、取得 ProcessEngineConfiguration 对象</span></span><br><span class="line">ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class="line"><span class="comment">// 2、设置数据库属性</span></span><br><span class="line">configuration.setJdbcDriver(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">configuration.setJdbcUrl(<span class="string">"jdbc:mysql:///activiti?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;charsetEncoding=utf8&amp;serverTimezone=Hongkong"</span>);</span><br><span class="line">configuration.setJdbcUsername(<span class="string">"root"</span>);</span><br><span class="line">configuration.setJdbcPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、设置创建表的策略，没有表时自动创建</span></span><br><span class="line"><span class="comment">// DB_SCHEMA_UPDATE_TRUE 没有表时自动创建</span></span><br><span class="line"><span class="comment">// DB_SCHEMA_UPDATE_FALSE 不自动创建</span></span><br><span class="line"><span class="comment">// DB_SCHEMA_UPDATE_CREATE_DROP 先删除表再自动创建</span></span><br><span class="line">configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建流程引擎</span></span><br><span class="line">processEngine = configuration.buildProcessEngine();</span><br><span class="line">System.out.println(<span class="string">"流程创建成功"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="使用-ProcessEngineConfiguration-activiti-cfg-xml-文件创建"><a href="#使用-ProcessEngineConfiguration-activiti-cfg-xml-文件创建" class="headerlink" title="使用 ProcessEngineConfiguration + activiti.cfg.xml 文件创建"></a>使用 ProcessEngineConfiguration + activiti.cfg.xml 文件创建</h2><p>此种创建方式，实际上是将数据库的链接配置，设置在了 xml 文件中。</p><h3 id="activiti-cfg-xml-文件"><a href="#activiti-cfg-xml-文件" class="headerlink" title="activiti.cfg.xml 文件"></a>activiti.cfg.xml 文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ProcessEngineConfiguration 是一个抽象类，不能作为一个 Bean，需要指定具体的实现类作为 Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///activiti?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;charsetEncoding=utf8&amp;amp;serverTimezone=Hongkong"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">"activiti.cfg.xml"</span>);</span><br><span class="line">processEngine = configuration.buildProcessEngine();</span><br><span class="line">System.out.println(<span class="string">"流程创建成功"</span>);</span><br></pre></td></tr></table></figure><h2 id="使用-ProcessEngines-默认配置创建"><a href="#使用-ProcessEngines-默认配置创建" class="headerlink" title="使用 ProcessEngines 默认配置创建"></a>使用 ProcessEngines 默认配置创建</h2><p>使用 ProcessEngines 默认配置，实际上和 使用 xml 配置是一样的，因为使用 ProcessEngines 时会默认读取 activiti.cfg.xml 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">System.out.println(<span class="string">"流程创建成功"</span>);</span><br></pre></td></tr></table></figure><h3 id="ProcessEngines-重点源码分析："><a href="#ProcessEngines-重点源码分析：" class="headerlink" title="ProcessEngines 重点源码分析："></a>ProcessEngines 重点源码分析：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line">ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取默认配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getDefaultProcessEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getProcessEngine(<span class="string">"default"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否已经初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInitialized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInitialized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取默认配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title">getProcessEngine</span><span class="params">(String processEngineName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时调用肯定是没有初始化的，所以会调用 init 方法</span></span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processEngines.get(processEngineName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 此时 isInitialized 为 false</span></span><br><span class="line">    <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">        <span class="comment">// 如果 processEngines 为空，重新构造</span></span><br><span class="line">        <span class="keyword">if</span> (processEngines == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create new map to store process-engines if current map is</span></span><br><span class="line">            <span class="comment">// null</span></span><br><span class="line">            processEngines = <span class="keyword">new</span> HashMap&lt;String, ProcessEngine&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader classLoader = ReflectUtil.getClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取默认的 activiti.cfg.xml 配置</span></span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti.cfg.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 如果获取不到会报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti.cfg.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove duplicated configuration URL's using set. Some</span></span><br><span class="line">        <span class="comment">// classloaders may return identical URL's twice, causing duplicate</span></span><br><span class="line">        <span class="comment">// startups</span></span><br><span class="line">        <span class="comment">// 解析 xml 文件</span></span><br><span class="line">        Set&lt;URL&gt; configUrls = <span class="keyword">new</span> HashSet&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            configUrls.add(resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;URL&gt; iterator = configUrls.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">            URL resource = iterator.next();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 activiti-context.xml（和 activiti.cfg.xml 一样，不过是名字规定的不一样）</span></span><br><span class="line">            resources = classLoader.getResources(<span class="string">"activiti-context.xml"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ActivitiIllegalArgumentException(<span class="string">"problem retrieving activiti-context.xml resources on the classpath: "</span> + System.getProperty(<span class="string">"java.class.path"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line">            log.info(<span class="string">"Initializing process engine using Spring configuration '&#123;&#125;'"</span>, resource.toString());</span><br><span class="line">            initProcessEngineFromSpringResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 isInitialized 为 true，标记为已初始化</span></span><br><span class="line">        setInitialized(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">"Process engines already initialized"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="部署一个简单的工作流"><a href="#部署一个简单的工作流" class="headerlink" title="部署一个简单的工作流"></a>部署一个简单的工作流</h1><p>在创建工作流成功，并且创建 BPMN 文件后，可以进行流程的部署。流程部署需要用到<code>仓库服务</code>，即 RepositoryService</p><h2 id="部署操作代码示例"><a href="#部署操作代码示例" class="headerlink" title="部署操作代码示例"></a>部署操作代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取仓库服务：管理定义流程</span></span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">// 创建部署</span></span><br><span class="line">Deployment deploy = repositoryService.createDeployment() <span class="comment">// 返回部署的构建器</span></span><br><span class="line">        .addClasspathResource(<span class="string">"LevelBill.bpmn"</span>) <span class="comment">// 从类路径下添加资源</span></span><br><span class="line">        .name(<span class="string">"LevelBill：请假单流程"</span>) <span class="comment">// 设置部署的名字</span></span><br><span class="line">        .category(<span class="string">"办公类别"</span>) <span class="comment">// 设置类别</span></span><br><span class="line">        .deploy(); <span class="comment">// 部署</span></span><br><span class="line">System.out.println(<span class="string">"部署成功后返回的 id："</span> + deploy.getId() + <span class="string">"，部署的名称："</span> + deploy.getName());</span><br></pre></td></tr></table></figure><h2 id="查看部署结果"><a href="#查看部署结果" class="headerlink" title="查看部署结果"></a>查看部署结果</h2><blockquote><ul><li>查看 act_re_deployment 表</li></ul></blockquote><p><img src="/images/activiti/deploy_1.png" alt="部署结果"></p><blockquote><ul><li>查看 act_re_prrocdef 表</li></ul></blockquote><p><img src="/images/activiti/deploy_2.png" alt="部署结果"></p><p>bpmn 文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"levelBill"</span> <span class="attr">isClosed</span>=<span class="string">"false"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"LevelBill"</span> <span class="attr">processType</span>=<span class="string">"None"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中： <code>KEY_</code> 指向 BPMN 文件中 的 id， <code>NAME_</code> 指向 BPMN 文件中的 name，<code>_DEPLOYMENT_ID_</code> 指向 act_re_deployment 表的 id，<code>RESOURCE_NAME_</code> 指向 构建 deploy 时的 classpathResource 的值</p><blockquote><ul><li>查看 act_ge_property 表</li></ul></blockquote><p><img src="/images/activiti/deploy_3.png" alt="部署结果"></p><p>其中：next.dbid 的值<code>VALUE_</code> 即为下一步运行部署操作时，<code>act_re_deployment</code> 的 id。</p><h2 id="再次运行部署操作"><a href="#再次运行部署操作" class="headerlink" title="再次运行部署操作"></a>再次运行部署操作</h2><p>再次运行部署操作，查看 <code>act_ge_property</code> 和 <code>act_re_deployment</code> 表，可以看到 <code>act_ge_property</code> 的 next.dbid 的值变了，且 <code>act_re_deployment</code> 的中 id 变为上一次运行后 <code>act_ge_property</code> 的 next.dbid 的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个简单的工作流引擎，需要准备：数据库、工作流文件（BPMN）。创建工作流的基本流程： 构建 ProcessEngineConfiguration 对象 –&amp;gt; 设置数据库连接 –&amp;gt; 设置数据库表创建属性 –&amp;gt; 构建一个流程引擎。其中：ProcessEngineConfiguration 对象，是构建一个简单工作流的核心 API。&lt;br&gt;为了简单的示例操作，使用 Junit 创建测试用例创建即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（2） &lt;br /&gt;  使用 IDEA 创建工作流</title>
    <link href="https://www.laiyy.top/java/2018/12-06/activiti-2.html"/>
    <id>https://www.laiyy.top/java/2018/12-06/activiti-2.html</id>
    <published>2018-12-06T01:30:54.000Z</published>
    <updated>2018-12-06T01:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-actiBPM-插件"><a href="#安装-actiBPM-插件" class="headerlink" title="安装 actiBPM 插件"></a>安装 actiBPM 插件</h2><p>在 IDEA 中选择： File –&gt; Setting –&gt; Plugins –&gt; Browse repositories –&gt; 查询 actiBPM 并下载安装</p><h2 id="创建一个-BPM-文件"><a href="#创建一个-BPM-文件" class="headerlink" title="创建一个 BPM 文件"></a>创建一个 BPM 文件</h2><a id="more"></a><p>在 resources（静态文件存储路径）上右键新建，选择 BpmnFile 或者 BPMN File 进行创建<br><img src="/images/activiti/create_bpmn.png" alt="创建 BPMN 文件"></p><h2 id="设置流程"><a href="#设置流程" class="headerlink" title="设置流程"></a>设置流程</h2><p>一个已经设置好的流程：<br><img src="/images/activiti/bmpn.png" alt="BPMN 文件"></p><p>常用的几个控制器：</p><ul><li>startEvent：流程开始</li><li>endEvent：流程结束</li><li>UserTask：用户操作任务</li><li>ScriptTask：脚本操作任务</li><li>ServiceTask：业务操作任务</li><li>MailTask：邮件任务</li></ul><p>将右侧控制器拖拽至中间白板上，即可设置控制器属性。然后将鼠标放在控制器中央位置，会有一个圆点，选中圆点下拉至另外一个控制器，即可设置流程顺序。</p><h3 id="设置整个-bpmn-文件属性"><a href="#设置整个-bpmn-文件属性" class="headerlink" title="设置整个 bpmn 文件属性"></a>设置整个 bpmn 文件属性</h3><p>点击空白处，可在右侧看到整个 bpmn 文件属性，可以根据自己的实际需求进行设置</p><p><img src="/images/activiti/bmpn_1.png" alt="BPMN 文件属性"></p><p>常用属性：</p><ul><li>Id：可以看做 BPMN 在整个流程中的文件唯一标识</li><li>Name： 可以看做 BPMN 文件的别名（实际名称是创建 BPMN 文件时的名称）</li></ul><h3 id="设置开始、结束控制器"><a href="#设置开始、结束控制器" class="headerlink" title="设置开始、结束控制器"></a>设置开始、结束控制器</h3><p>点击开始、结束控制器，可根据自己实际需求设置控制器属性<br><img src="/images/activiti/bmpn_2.png" alt="BPMN 开始、结束控制器"></p><p>常用属性：</p><ul><li>Id：这个开始、结束控制器的 id，尽量不要更改</li><li>Name：这个开始、结束控制器的名称，更改后可以在中间图标出立即显示；也可以双击图标进行更改</li></ul><h3 id="设置中间流程控制器"><a href="#设置中间流程控制器" class="headerlink" title="设置中间流程控制器"></a>设置中间流程控制器</h3><p>点击中间流程控制器，设置控制器属性<br><img src="/images/activiti/bmpn_3.png" alt="BPMN 流程控制器"></p><p>常用属性：</p><ul><li>Id：流程控制器 Id，尽量不要更改</li><li>Name： 控制器的名称，更改后可以在中间图标出立即显示；也可以双击图标进行更改</li><li>Assignee：谁管理这个流程控制器（可以是用户、角色等）</li></ul><h2 id="设置-BPMN-需要注意的点："><a href="#设置-BPMN-需要注意的点：" class="headerlink" title="设置 BPMN 需要注意的点："></a>设置 BPMN 需要注意的点：</h2><p>在流程控制器中，Id 尽量不要更改。如果更改的话，必须要保证 id 不能重复，否则会出现同一个 id 对应两个流程控制，导致无法确定进行哪一步的流程，这样会出现错误。</p><hr><h2 id="bpmn-文件"><a href="#bpmn-文件" class="headerlink" title="bpmn 文件"></a>bpmn 文件</h2><p>将 bpmn 文件以文本形式打开，可以发现，bpmn 文件实际上是一个 xml 文件。以刚才创建好的 bpmn 文件为例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span> <span class="attr">xmlns:dc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span> <span class="attr">xmlns:di</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">xmlns:tns</span>=<span class="string">"http://www.activiti.org/testm1544000001944"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">id</span>=<span class="string">"m1544000001944"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/testm1544000001944"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  id 即为刚才设置的 “整个 BPMN 文件” 的 id， name 为 Name  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"levelBill"</span> <span class="attr">isClosed</span>=<span class="string">"false"</span> <span class="attr">isExecutable</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"LevelBill"</span> <span class="attr">processType</span>=<span class="string">"None"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开始节点， id 为 _2， name 为 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"_2"</span> <span class="attr">name</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用户操作节点，id 为 _3，name 为 first，操作人为 zhangsan --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">activiti:assignee</span>=<span class="string">"zhangsan"</span> <span class="attr">activiti:exclusive</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"_3"</span> <span class="attr">name</span>=<span class="string">"first"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">activiti:assignee</span>=<span class="string">"lsii"</span> <span class="attr">activiti:exclusive</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"_5"</span> <span class="attr">name</span>=<span class="string">"second"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">activiti:assignee</span>=<span class="string">"wangwu"</span> <span class="attr">activiti:exclusive</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"_7"</span> <span class="attr">name</span>=<span class="string">"third"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 结束节点，id为 _9，name 为 end --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"_9"</span> <span class="attr">name</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 流程控制（即两个控制器之间的箭头连线），从 _2 步骤指向 _3 步骤，即第一步为 _2：start，第二步为 _3：first --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"_4"</span> <span class="attr">sourceRef</span>=<span class="string">"_2"</span> <span class="attr">targetRef</span>=<span class="string">"_3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"_6"</span> <span class="attr">sourceRef</span>=<span class="string">"_3"</span> <span class="attr">targetRef</span>=<span class="string">"_5"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"_8"</span> <span class="attr">sourceRef</span>=<span class="string">"_5"</span> <span class="attr">targetRef</span>=<span class="string">"_7"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 流程控制，从 _7 步骤执行 _9，即最后一步为 从 _7：third 向 _9：end 流通 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"_10"</span> <span class="attr">sourceRef</span>=<span class="string">"_7"</span> <span class="attr">targetRef</span>=<span class="string">"_9"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下方为 bpmn 各节点样式、坐标等，通过拖拽自动生成，可改文件微调  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">documentation</span>=<span class="string">"background=#3C3F41;count=1;horizontalcount=1;orientation=0;width=842.4;height=1195.2;imageableWidth=832.4;imageableHeight=1185.2;imageableX=5.0;imageableY=5.0"</span> <span class="attr">id</span>=<span class="string">"Diagram-_1"</span> <span class="attr">name</span>=<span class="string">"New Diagram"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">"levelBill"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个节点的位置、宽高等调整，bpmnElement 指向节点 id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">"_2"</span> <span class="attr">id</span>=<span class="string">"Shape-_2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"32.0"</span> <span class="attr">width</span>=<span class="string">"32.0"</span> <span class="attr">x</span>=<span class="string">"450.0"</span> <span class="attr">y</span>=<span class="string">"70.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"32.0"</span> <span class="attr">width</span>=<span class="string">"32.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">"_3"</span> <span class="attr">id</span>=<span class="string">"Shape-_3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"425.0"</span> <span class="attr">y</span>=<span class="string">"160.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">"_5"</span> <span class="attr">id</span>=<span class="string">"Shape-_5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"425.0"</span> <span class="attr">y</span>=<span class="string">"260.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">"_7"</span> <span class="attr">id</span>=<span class="string">"Shape-_7"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"425.0"</span> <span class="attr">y</span>=<span class="string">"370.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"55.0"</span> <span class="attr">width</span>=<span class="string">"85.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">"_9"</span> <span class="attr">id</span>=<span class="string">"Shape-_9"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"32.0"</span> <span class="attr">width</span>=<span class="string">"32.0"</span> <span class="attr">x</span>=<span class="string">"455.0"</span> <span class="attr">y</span>=<span class="string">"465.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"32.0"</span> <span class="attr">width</span>=<span class="string">"32.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 两个节点之间的链接，bpmnElement 指向流程链接 id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">"_4"</span> <span class="attr">id</span>=<span class="string">"BPMNEdge__4"</span> <span class="attr">sourceElement</span>=<span class="string">"_2"</span> <span class="attr">targetElement</span>=<span class="string">"_3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"466.0"</span> <span class="attr">y</span>=<span class="string">"102.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"466.0"</span> <span class="attr">y</span>=<span class="string">"160.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"0.0"</span> <span class="attr">width</span>=<span class="string">"0.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">"_6"</span> <span class="attr">id</span>=<span class="string">"BPMNEdge__6"</span> <span class="attr">sourceElement</span>=<span class="string">"_3"</span> <span class="attr">targetElement</span>=<span class="string">"_5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"467.5"</span> <span class="attr">y</span>=<span class="string">"215.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"467.5"</span> <span class="attr">y</span>=<span class="string">"260.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"0.0"</span> <span class="attr">width</span>=<span class="string">"0.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">"_8"</span> <span class="attr">id</span>=<span class="string">"BPMNEdge__8"</span> <span class="attr">sourceElement</span>=<span class="string">"_5"</span> <span class="attr">targetElement</span>=<span class="string">"_7"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"467.5"</span> <span class="attr">y</span>=<span class="string">"315.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"467.5"</span> <span class="attr">y</span>=<span class="string">"370.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"0.0"</span> <span class="attr">width</span>=<span class="string">"0.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">"_10"</span> <span class="attr">id</span>=<span class="string">"BPMNEdge__10"</span> <span class="attr">sourceElement</span>=<span class="string">"_7"</span> <span class="attr">targetElement</span>=<span class="string">"_9"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"471.0"</span> <span class="attr">y</span>=<span class="string">"425.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">di:waypoint</span> <span class="attr">x</span>=<span class="string">"471.0"</span> <span class="attr">y</span>=<span class="string">"465.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dc:Bounds</span> <span class="attr">height</span>=<span class="string">"0.0"</span> <span class="attr">width</span>=<span class="string">"0.0"</span> <span class="attr">x</span>=<span class="string">"0.0"</span> <span class="attr">y</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bpmndi:BPMNLabel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-actiBPM-插件&quot;&gt;&lt;a href=&quot;#安装-actiBPM-插件&quot; class=&quot;headerlink&quot; title=&quot;安装 actiBPM 插件&quot;&gt;&lt;/a&gt;安装 actiBPM 插件&lt;/h2&gt;&lt;p&gt;在 IDEA 中选择： File –&amp;gt; Setting –&amp;gt; Plugins –&amp;gt; Browse repositories –&amp;gt; 查询 actiBPM 并下载安装&lt;/p&gt;
&lt;h2 id=&quot;创建一个-BPM-文件&quot;&gt;&lt;a href=&quot;#创建一个-BPM-文件&quot; class=&quot;headerlink&quot; title=&quot;创建一个 BPM 文件&quot;&gt;&lt;/a&gt;创建一个 BPM 文件&lt;/h2&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Activiti 工作流引擎（1）  &lt;br /&gt; 工作流基础了解</title>
    <link href="https://www.laiyy.top/java/2018/12-05/activiti-1.html"/>
    <id>https://www.laiyy.top/java/2018/12-05/activiti-1.html</id>
    <published>2018-12-05T03:43:06.000Z</published>
    <updated>2018-12-05T03:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是工作流"><a href="#什么是工作流" class="headerlink" title="什么是工作流"></a>什么是工作流</h1><p>工作流（Workflow），指“业务过程的部分或整体在计算机应用环境下的自动化”。是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。在计算机中，工作流属于计算机支持的协同工作（CSCW）的一部分。后者是普遍地研究一个群体如何在计算机的帮助下实现协同工作的。<br>工作流主要解决的主要问题是：为了实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。<br><a id="more"></a></p><h2 id="常见的工作流的地方"><a href="#常见的工作流的地方" class="headerlink" title="常见的工作流的地方"></a>常见的工作流的地方</h2><blockquote><ul><li>OA 审批功能</li><li>电子政务上传下达</li><li>物流运输流程记录</li><li>…</li></ul></blockquote><h2 id="使用工作流和不使用工作流的区别"><a href="#使用工作流和不使用工作流的区别" class="headerlink" title="使用工作流和不使用工作流的区别"></a>使用工作流和不使用工作流的区别</h2><p>以学校请假为例，如果一个学生请假需要经过以下流程：<strong> 填写请见条 –&gt; 提交给老师 –&gt; 老师审批<em>（通过，不通过）</em> –&gt; 提交到年级处 –&gt; 年级处审批<em>（通过，不通过）</em> –&gt; 提交给教务处 –&gt; 教务处审批 <em>（通过，不通过）</em> –&gt; 提交到校长 –&gt; 校长审批<em>（通过，不通过）</em> –&gt; 结束 </strong></p><hr><h1 id="Activiti-工作流"><a href="#Activiti-工作流" class="headerlink" title="Activiti 工作流"></a>Activiti 工作流</h1><p>常见的开源工作流引擎框架有：OSWrokFlow、jBPM（jboss business process management）、Activiti（对 jBPM 的升级）、Spring WorkFlow 等</p><h2 id="Activiti-的简单认识"><a href="#Activiti-的简单认识" class="headerlink" title="Activiti 的简单认识"></a>Activiti 的简单认识</h2><h3 id="ProcessEngine"><a href="#ProcessEngine" class="headerlink" title="ProcessEngine"></a>ProcessEngine</h3><p>ProcessEngine 是 Activiti 的核心工作类，可以由该类获取到其他服务（历史服务、仓库服务、任务服务、角色 / 参与者服务）</p><p>历史服务：之前运行过的所有流程即为历史服务<br>仓库服务：定义好的流程需要保存到一个仓库中（一般为数据库），该数据库中保存的流程，解析该流程的服务即为仓库服务<br>任务服务：定义好的流程中的每一步即为一个任务服务<br>角色 / 参与者服务：执行流程中步骤的人、角色，即为一个 角色 / 参与者服务</p><h3 id="BPMN"><a href="#BPMN" class="headerlink" title="BPMN"></a>BPMN</h3><p>BPMN： 业务流程建模与标注（Business Process Model and Notation），描述流程的基本符号，包括这些土元如果组成一个业务流程图（Business Process Diagram）</p><p>以一个简单的业务流程图为例： 第一个圆圈代表流程开始，审批流程为： 提交 -&gt; 经纪人 -&gt; 老总，最后一个加粗的圆圈代表流程结束。每一个起始点、流程审批点、结束点，都是一个最基本的 BPMN，这些点组合在一起，整个图可以称为一个最基本的 业务流程图。</p><p><img src="/images/activiti/business_process_diagram.png" alt="业务流程图"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>activiti.cfg.xml： Activiti 核心配置文件，配置流程引擎创建工具的基本参数和数据库连接参数</p><p>logging.properties： log4j 日志打印</p><hr><h1 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h1><p>Activiti 数据库总共有 23 张表，所有表都是以 ACT_ 开头，第二部分表示表的用途，一般用两个字母标示，用于和服务的 API 对应。</p><blockquote><ul><li>act_ge_* ： 通用数据，用于不同场景下，如：存放资源文件</li><li>act_hi_* ： hi 代表 history。包含历史数据，比如：历史流程实例、变量、任务等</li><li>act_re_* ： re 代表 repository。这个前缀的表包含了定义流程和流程静态资源（图片、规则等）</li><li>act_ru_* ： ru 代表 runtime。包含了流程实例、任务、变量、异步任务等运行中的数据。Activiti 只在了流程实例执行过程中保存这些数据，在流程结束后就会删除这些记录，这样可以保证运行时表一直很小，速度很快）</li><li>act_id_* ： id 代表 identity。包含身份信息，比如：用户、组等</li></ul></blockquote><h2 id="流程规则表-act-re"><a href="#流程规则表-act-re" class="headerlink" title="流程规则表: act_re_*"></a>流程规则表: act_re_*</h2><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">act_re_deployment</td><td style="text-align:center">部署信息</td></tr><tr><td style="text-align:center">act_re_model</td><td style="text-align:center">流程设计模型部署表</td></tr><tr><td style="text-align:center">act_re_procdef</td><td style="text-align:center">流程定义数据表</td></tr></tbody></table><h2 id="运行时数据库表：act-ru"><a href="#运行时数据库表：act-ru" class="headerlink" title="运行时数据库表：act_ru_*"></a>运行时数据库表：act_ru_*</h2><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">act_ru_execution</td><td style="text-align:center">运行时流程执行实例表</td></tr><tr><td style="text-align:center">act_ru_identitylink</td><td style="text-align:center">运行时流程人员表，主要存储任务节点与参与者的相关信息</td></tr><tr><td style="text-align:center">act_ru_task</td><td style="text-align:center">运行时任务节点表</td></tr><tr><td style="text-align:center">act_ru_variable</td><td style="text-align:center">运行时流程变量数据表</td></tr></tbody></table><h2 id="历史数据库表：-act-hi"><a href="#历史数据库表：-act-hi" class="headerlink" title="历史数据库表： act_hi_*"></a>历史数据库表： act_hi_*</h2><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">act_hi_actinst</td><td style="text-align:center">历史节点表</td></tr><tr><td style="text-align:center">act_hi_attachment</td><td style="text-align:center">历史附件表</td></tr><tr><td style="text-align:center">act_hi_comment</td><td style="text-align:center">历史意见表</td></tr><tr><td style="text-align:center">act_hi_identitylink</td><td style="text-align:center">历史流程人员表</td></tr><tr><td style="text-align:center">act_hi_detail</td><td style="text-align:center">历史详情表，提供历史变量的查询</td></tr><tr><td style="text-align:center">act_hi_procinst</td><td style="text-align:center">历史流程实例表（常用）</td></tr><tr><td style="text-align:center">act_hi_taskinst</td><td style="text-align:center">历史任务实例表（常用）</td></tr><tr><td style="text-align:center">act_hi_varinst</td><td style="text-align:center">历史变量表（常用）</td></tr></tbody></table><h2 id="组织结构表：act-id"><a href="#组织结构表：act-id" class="headerlink" title="组织结构表：act_id_*"></a>组织结构表：act_id_*</h2><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">act_id_group</td><td style="text-align:center">用户组信息</td></tr><tr><td style="text-align:center">act_id_info</td><td style="text-align:center">用户扩展信息</td></tr><tr><td style="text-align:center">act_id_membership</td><td style="text-align:center">用户与用户组队员信息</td></tr><tr><td style="text-align:center">act_id_user</td><td style="text-align:center">用户信息</td></tr></tbody></table><h2 id="通用数据表：-act-ge"><a href="#通用数据表：-act-ge" class="headerlink" title="通用数据表： act_ge_*"></a>通用数据表： act_ge_*</h2><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">act_ge_bytearray</td><td style="text-align:center">二进制数据表</td></tr><tr><td style="text-align:center">act_ge_property</td><td style="text-align:center">属性数据表，存储整个流程引擎级别的数据，初始化时会默认插入三条数据</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是工作流&quot;&gt;&lt;a href=&quot;#什么是工作流&quot; class=&quot;headerlink&quot; title=&quot;什么是工作流&quot;&gt;&lt;/a&gt;什么是工作流&lt;/h1&gt;&lt;p&gt;工作流（Workflow），指“业务过程的部分或整体在计算机应用环境下的自动化”。是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。在计算机中，工作流属于计算机支持的协同工作（CSCW）的一部分。后者是普遍地研究一个群体如何在计算机的帮助下实现协同工作的。&lt;br&gt;工作流主要解决的主要问题是：为了实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="Activiti" scheme="https://www.laiyy.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch 学习（7） &lt;br /&gt; 错误处理</title>
    <link href="https://www.laiyy.top/java/2018/12-03/spring-batch-study-7.html"/>
    <id>https://www.laiyy.top/java/2018/12-03/spring-batch-study-7.html</id>
    <published>2018-12-03T03:33:31.000Z</published>
    <updated>2018-12-03T03:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBatch-错误处理"><a href="#SpringBatch-错误处理" class="headerlink" title="SpringBatch 错误处理"></a>SpringBatch 错误处理</h1><p>SpringBatch 的错误处理，大致分为：<em>错误中断，重启后继续执行</em>，<em>错误重试</em>，<em>错误跳过</em> 等</p><a id="more"></a><blockquote><ul><li>错误中断，重启后继续执行：在每次 chunk 后在 ExecutionContext 中打入标记，在重启执行该任务时，判断 ExecutionContext 中是否存在标记，如果存在，则从标记位重新读取执行</li><li>错误重试：在出现错误时，根据指定的需要<em>重试</em>的异常，进行重新读写处理，需要指定：需要重试的异常、重试次数</li><li>错误跳过：在出现错误时，根据指定的需要<em>跳过</em>的异常，跳过该条数据，需要指定：需要跳过的异常，跳过次数</li></ul></blockquote><hr><h1 id="错误中断，重启后继续执行"><a href="#错误中断，重启后继续执行" class="headerlink" title="错误中断，重启后继续执行"></a>错误中断，重启后继续执行</h1><p><strong><em>在 读、处理、写 操作中任何一环出现问题都可以将任务中断</em></strong></p><p>此项操作，需要 ItemReader、ItemWriter 实现 ItemStreamReader<t>、ItemStreamWriter<t> 接口，在实现类中定义规则</t></t></p><h2 id="ItemStreamReader、ItemStreamWriter"><a href="#ItemStreamReader、ItemStreamWriter" class="headerlink" title="ItemStreamReader、ItemStreamWriter"></a>ItemStreamReader、ItemStreamWriter</h2><p>实现接口后有以下几个方法需要重写：</p><blockquote><ul><li>read()：读取 / 写入 数据的规则</li><li>open(ExecutionContext executionContext)：在开始读取 / 写入 之前调用，用于第一次执行 或 重启后继续执行时的判断</li><li>update(ExecutionContext executionContext)：在 chunk 后执行，用于修改数据库中对 ExecutionContext 的记录</li><li>close()：读取 / 写入 结束后执行</li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>数据来源(file1.txt)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;1&quot;,&quot;Kabul&quot;,&quot;AFG&quot;,&quot;Kabol&quot;,&quot;1780000&quot;</span><br><span class="line">&quot;2&quot;,&quot;Qandahar&quot;,&quot;AFG&quot;,&quot;Qandahar&quot;,&quot;237500&quot;</span><br><span class="line">&quot;3&quot;,&quot;Herat&quot;,&quot;AFG&quot;,&quot;Herat&quot;,&quot;186800&quot;</span><br><span class="line">&quot;4&quot;,&quot;Mazar-e-Sharif&quot;,&quot;AFG&quot;,&quot;Balkh&quot;,&quot;127800&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestartReader</span> <span class="keyword">implements</span> <span class="title">ItemStreamReader</span>&lt;<span class="title">City</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件读取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> FlatFileItemReader&lt;City&gt; reader = <span class="keyword">new</span> FlatFileItemReader&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前读到第几行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long curLine = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否重启</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> restart = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行的上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutionContext executionContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RestartReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reader.setResource(<span class="keyword">new</span> ClassPathResource(<span class="string">"file1.txt"</span>));</span><br><span class="line"></span><br><span class="line">        DelimitedLineTokenizer tokenizer = <span class="keyword">new</span> DelimitedLineTokenizer();</span><br><span class="line">        tokenizer.setNames(<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"countryCode"</span>, <span class="string">"district"</span>, <span class="string">"population"</span>);</span><br><span class="line">        <span class="comment">// 解析后的数据映射为对象</span></span><br><span class="line">        DefaultLineMapper&lt;City&gt; mapper = <span class="keyword">new</span> DefaultLineMapper&lt;&gt;();</span><br><span class="line">        mapper.setLineTokenizer(tokenizer);</span><br><span class="line"></span><br><span class="line">        mapper.setFieldSetMapper(<span class="keyword">new</span> FieldSetMapper&lt;City&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> City <span class="title">mapFieldSet</span><span class="params">(FieldSet fieldSet)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">                City city = <span class="keyword">new</span> City();</span><br><span class="line">                city.setCountryCode(fieldSet.readString(<span class="string">"countryCode"</span>));</span><br><span class="line">                city.setDistrict(fieldSet.readString(<span class="string">"district"</span>));</span><br><span class="line">                city.setId(fieldSet.readInt(<span class="string">"id"</span>));</span><br><span class="line">                city.setName(fieldSet.readString(<span class="string">"name"</span>));</span><br><span class="line">                city.setPopulation(fieldSet.readLong(<span class="string">"population"</span>));</span><br><span class="line">                <span class="keyword">return</span> city;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 数据校验</span></span><br><span class="line">        mapper.afterPropertiesSet();</span><br><span class="line">        <span class="comment">// 绑定映射</span></span><br><span class="line">        reader.setLineMapper(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception, UnexpectedInputException, ParseException, NonTransientResourceException </span>&#123;</span><br><span class="line">        City city = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 每次读取数据，当前行 +1</span></span><br><span class="line">        <span class="keyword">this</span>.curLine++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (restart) &#123;</span><br><span class="line">            <span class="comment">// 如果是重启（出现错误之后），则从 chunk 记录行开始读取</span></span><br><span class="line">            reader.setLinesToSkip(<span class="keyword">this</span>.curLine.intValue() - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 将重启值置为 false，否则将会重复读取</span></span><br><span class="line">            restart = <span class="keyword">false</span>;</span><br><span class="line">            System.out.println(<span class="string">"Start reading from line: "</span> + <span class="keyword">this</span>.curLine);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.open(<span class="keyword">this</span>.executionContext);</span><br><span class="line"></span><br><span class="line">        city = reader.read();</span><br><span class="line"><span class="comment">//        模拟出现错误：读到第 100 行数据时出错</span></span><br><span class="line"><span class="comment">//        if (city != null &amp;&amp; this.curLine == 100) &#123;</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException("Something Wrong!");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在开始读取之前调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(ExecutionContext executionContext)</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前执行上下文</span></span><br><span class="line">        <span class="keyword">this</span>.executionContext = executionContext;</span><br><span class="line">        <span class="keyword">if</span> (executionContext.containsKey(<span class="string">"curLine"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 如果执行上下文存在 cutLine，则证明执行为 重启后执行</span></span><br><span class="line">            <span class="keyword">this</span>.curLine = executionContext.getLong(<span class="string">"curLine"</span>);</span><br><span class="line">            <span class="comment">// 将重启值置为 true</span></span><br><span class="line">            <span class="keyword">this</span>.restart = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 第一次执行，向执行上下文中打入 curLine 记录（会记录进数据库）</span></span><br><span class="line">            <span class="keyword">this</span>.curLine = <span class="number">0L</span>;</span><br><span class="line">            executionContext.put(<span class="string">"curLine"</span>, <span class="number">0L</span>);</span><br><span class="line">            System.out.println(<span class="string">"Start reading from line: "</span> + (<span class="keyword">this</span>.curLine + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在每次读取 chunk 条数据后调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ExecutionContext executionContext)</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line">        <span class="comment">// 每次 chunk 后，重新打入 curLine 为当前行（会记录进数据库）</span></span><br><span class="line">        executionContext.put(<span class="string">"curLine"</span>, <span class="keyword">this</span>.curLine);</span><br><span class="line">        System.out.println(<span class="string">"Reading line: "</span> + (<span class="keyword">this</span>.curLine + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> ItemStreamException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="错误重试"><a href="#错误重试" class="headerlink" title="错误重试"></a>错误重试</h1><p><strong><em> 在 读、处理、写 操作中任何一环出现问题都可以重新执行出现错误的 chunk </em></strong></p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="模拟在-Processor-中出现错误"><a href="#模拟在-Processor-中出现错误" class="headerlink" title="模拟在 Processor 中出现错误"></a>模拟在 Processor 中出现错误</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> attemptCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(String item)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"processing item :"</span> + item);</span><br><span class="line">        <span class="comment">// 模拟错误：如果需要处理的数据为字符串 26，判断重试次数，如果重试次数大于等于 3 次，则数据处理成功，否则抛出异常，处理处理失败</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"26"</span>.equalsIgnoreCase(item)) &#123;</span><br><span class="line">            attemptCount++;</span><br><span class="line">            <span class="keyword">if</span> (attemptCount &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Retried "</span> + attemptCount + <span class="string">"times success"</span>);</span><br><span class="line">                <span class="keyword">return</span> String.valueOf(Integer.valueOf(item) * -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"Processed the "</span> + attemptCount + <span class="string">" times fail"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Process failed. Attempt: "</span> + attemptCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(Integer.valueOf(item) * -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Step-中进行错误重试操作"><a href="#在-Step-中进行错误重试操作" class="headerlink" title="在 Step 中进行错误重试操作"></a>在 Step 中进行错误重试操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@StepScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListItemReader&lt;String&gt; <span class="title">reader</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index&lt; <span class="number">60</span>; index++)&#123;</span><br><span class="line">        items.add(<span class="string">""</span>+index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItemReader&lt;&gt;(items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">retryDemoStep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"retryDemoStep"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .processor(retryItemProcessor)</span><br><span class="line">            .writer(retryItemWriter)</span><br><span class="line">            <span class="comment">// 容错</span></span><br><span class="line">            .faultTolerant()</span><br><span class="line">            <span class="comment">// 发生哪个异常时进行重试</span></span><br><span class="line">            .retry(RuntimeException.class)</span><br><span class="line">            <span class="comment">// 重试几次</span></span><br><span class="line">            .retryLimit(<span class="number">10</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此时，运行程序后，会发现控制台打印 0-20，30-60 都正常，但是在带引 20 - 30 的数据时，由于在 26 处出现了错误，会多次打印 20-25，和错误信息：”Processed the “ + attemptCount + “ times fail”</p><p>由此可证明错误重试 成功</p><hr><h1 id="错误跳过"><a href="#错误跳过" class="headerlink" title="错误跳过"></a>错误跳过</h1><p><strong><em> 在 读、处理、写 操作中任何一环出现问题都可以重新执行出现错误的 chunk </em></strong></p><h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><p>出现的错误还是以上例中的错误为本例错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">skipDemoStep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"skipDemoStep"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .processor(retryItemProcessor)</span><br><span class="line">            .writer(retryItemWriter)</span><br><span class="line">            <span class="comment">// 容错</span></span><br><span class="line">            .faultTolerant()</span><br><span class="line">            <span class="comment">// 跳过</span></span><br><span class="line">            .skip(RuntimeException.class)</span><br><span class="line">            <span class="comment">// 跳过次数</span></span><br><span class="line">            .skipLimit(<span class="number">10</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行代码，可以发现，当 26 错误错误时，processor 自动略过，在 ItemWriter 中并没有打印信息，控制台打印信息为： … 23  24  25  27  29 …</p><p>由此可看出 26 被成功跳过，则错误跳过成功</p><hr><h1 id="错误处理监听器"><a href="#错误处理监听器" class="headerlink" title="错误处理监听器"></a>错误处理监听器</h1><p>错误处理监听器：可以在执行批处理时，在出现错误的地方通过监听器，监听错误信息，如：read error、write error、processor error</p><h2 id="常见的错误处理监听器"><a href="#常见的错误处理监听器" class="headerlink" title="常见的错误处理监听器"></a>常见的错误处理监听器</h2><blockquote><ul><li>SkipListener：错误跳过监听</li><li>RetryListener：错误重试监听，该 listener 本身不提供操作，由以下几个子 Listener 提供操作<blockquote><ul><li>RetryProcessListener：processor error 消息监听</li><li>RetryWriteListener：write error 消息监听</li><li>RetryReadListener：read error 消息监听</li></ul></blockquote></li></ul></blockquote><h2 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h2><p>出现错误的方式还是以上例中的 字符串 26 错误为例</p><p><strong> 以 SkipListener 为例 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySkipListener</span> <span class="keyword">implements</span> <span class="title">SkipListener</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取跳过</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable 发生的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInRead</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入错误</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 写入的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable 发生的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInWrite</span><span class="params">(String s, Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在处理流程中出现的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 出现异常的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable 出现的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSkipInProcess</span><span class="params">(String s, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        System.out.println(s + <span class="string">" ----&gt; "</span> + throwable.getLocalizedMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Listener 使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Step <span class="title">skipListenerStep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"skipListenerStep"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .writer(skipItemWriter)</span><br><span class="line">            .processor(skipItemProcessor)</span><br><span class="line">            .faultTolerant()</span><br><span class="line">            .skip(RuntimeException.class)</span><br><span class="line">            <span class="comment">// 指定错误处理 Listener</span></span><br><span class="line">            .listener(skipListener)</span><br><span class="line">            .skipLimit(<span class="number">10</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBatch-错误处理&quot;&gt;&lt;a href=&quot;#SpringBatch-错误处理&quot; class=&quot;headerlink&quot; title=&quot;SpringBatch 错误处理&quot;&gt;&lt;/a&gt;SpringBatch 错误处理&lt;/h1&gt;&lt;p&gt;SpringBatch 的错误处理，大致分为：&lt;em&gt;错误中断，重启后继续执行&lt;/em&gt;，&lt;em&gt;错误重试&lt;/em&gt;，&lt;em&gt;错误跳过&lt;/em&gt; 等&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.laiyy.top/categories/java/"/>
    
    
      <category term="SpringBatch" scheme="https://www.laiyy.top/tags/SpringBatch/"/>
    
  </entry>
  
</feed>
